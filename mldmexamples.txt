# mldmexamples.txt
# 23 July 2022, Ver 1.0
# 
########################################################################################
# Bolum 2: R'ye giris
########################################################################################

# Örnek 2.1: R'nin güncellenmesi
suppressPackageStartupMessages(installed <- require(installr))
if (!installed) {
   install.packages("installr", repos="https://cloud.r-project.org")
   suppressPackageStartupMessages(require(installr))
 }

if(check.for.updates.R()){
   install.R() ; 
   copy.packages.between.libraries()}

# Örnek 2.2: R'de nesne tanımlama
x <- 10 

# Örnek 2.3: R'de aritmetik işlem örneği 1
x^2

# Örnek 2.4: R'de aritmetik işlem örneği 2
sqrt(x) 

# Örnek 2.5: R'de açıklama yapma
#R'yi öğrenmek kolaydır.
sqrt(x) # x'in karekökünü hesapla

# Örnek 2.6: R'de komut geçmişini listeleme
history()

# Örnek 2.7: R'de çalışma klasörünü öğrenme
getwd()

# Örnek 2.8: R'de çalışma klasörünü tanımlama
setwd("C:/mldmbook")
getwd()

# Örnek 2.9: R paketleri kurulum klasörü
.libPaths()

# Örnek 2.10: Sistemde kurulu paketler listesi
installed.packages() 
library()

# Örnek 2.11: R paketlerinin kurulması
install.packages("mda")

# Örnek 2.12: R paketlerinin kurulması
install.packages("mda", repos="https://cloud.r-project.org")

# Örnek 2.13: R paketlerinin kurulması
paketler <- c("mda","MASS","GA")
install.packages(paketler, repos="https://cloud.r-project.org")

# Örnek 2.14: R paketlerinin kurulması
paketler <- c("mda","MASS","GA", "adana")
yenipaket <- paketler[!(paketler %in% installed.packages()[,"Package"])]
if (length(yenipaket)) 
  install.packages(yenipaket, repos="https://cloud.r-project.org")

# Örnek 2.15: R paketlerinin paketkur ile kurulması
# Bağımlılık: Kod 2.1
paketler <- c("MASS", "psych")
paketkur(paketler)

# Örnek 2.16a: Kaynak koddan paket kurma
install.packages("D:/Rpaketleri/ppclust_1.3.zip", 
   repos = NULL, type = "source")

# Örnek 2.16b: Eski paketler ve güncelleme
old.packages(repo="https://cloud.r-project.org")
update.packages(repo="https://cloud.r-project.org")

# Örnek 2.17: R paketlerinin çalışma alanına yüklenmesi 1
library(GA)

# Örnek 2.18: R paketlerinin çalışma alanına yüklenmesi 2
require(GA)

# Örnek 2.19: R paketlerinin çalışma alanına yüklenmesi 3
suppressPackageStartupMessages(require(GA))

# Örnek 2.20: R paketlerinin çalışma alanına yüklenmesi 4
suppressPackageStartupMessages(installed <- require(GA))
if (!installed) {
   install.packages("GA", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(GA))
}

# Örnek 2.21: R çalışma alanındaki paketlerin listesi
search()

# Örnek 2.22: R paketlerinin çalışma alanından kaldırılması
detach("package:GA", unload=TRUE)

# Örnek 2.23: R paketlerinin diskten kaldırılması (uninstall)
remove.packages("GA")

# Örnek 2.24: ppclust paketindeki fcm fonksiyonunu çağırma 1
data(iris)
x <- iris[,-5]
require(ppclust)
resfcm <- fcm(x, centers=3, m=2)

# Örnek 2.25: ppclust paketindeki fcm fonksiyonunu çağırma 2
data(iris)
x <- iris[,-5]
resfcm <- ppclust::fcm(x, centers=3, m=2)

# Örnek 2.26: R'de atomik veri örnekleri 1
x <- 20.475
y <- 38
yas <- 38L
yogunluk <- 3e-07

# Örnek 2.27: R'de atomik veri örnekleri 2
il <- "Adana"
ad <- 'Zeytin'
plaka <- "01LLL99"
mkod <- "15"

# Örnek 2.28: R'de ikili mantıksal (binary logical) veri
basari <- TRUE ; donus <- FALSE

# Örnek 2.29: R'de kompleks sayılar
z <- complex(real=1.2, imaginary=-1)
z
Re(z)
Im(z)

# Örnek 2.30: R'de özel değerler
5/0
-5/0
0/0
x <- NA
x
y <- NULL
y
pi

# Örnek 2.31: R'de vektör tanımlama
sicaklik <- c(3, 5, 8, 5, 2, 4) 
iller <- c("Adana", "Mersin", "Osmaniye") 
gostergeler <- c(TRUE, FALSE, FALSE, TRUE) 

# Örnek 2.32: R'de vektör içeriğini görüntüleme
# Bağımlılık: Örnek 2.31
print(sicaklik) 
(sicaklik)
sicaklik

# Örnek 2.33: R'de karışık verileri vektörü
karisik <- c("Adana", FALSE,  1978)
karisik

# Örnek 2.34: Vektördeki elemanların sayılması
# Bağımlılık: Örnek 2.31
length(sicaklik)
length(iller)

# Örnek 2.35: Vektör elemanlarına erişim 1
# Bağımlılık: Örnek 2.31
sicaklik[3] # İndis köşeli parantezler arasında verilir.

# Örnek 2.36: Vektör elemanlarına erişim 2
# Bağımlılık: Örnek 2.31
sicaklik[4:6]

# Örnek 2.40: Vektöre eleman ekleme
# Bağımlılık: Örnek 2.31
sicaklik <- c(sicaklik, 7) #Yeni eleman vektörün sonuna eklenir
sicaklik

# Örnek 2.41: İki vektörü birleştirme
# Bağımlılık: Örnek 2.40
sicaklik1 <- c(3, 4, 6)
sicaklik <- c(sicaklik, sicaklik1)
sicaklik

# Örnek 2.42: Vektörden eleman silme 1
# Bağımlılık: Örnek 2.41
sicaklik <- sicaklik[-6]
sicaklik

# Örnek 2.43: Vektörden eleman silme 2
# Bağımlılık: Örnek 2.42
sicaklik <- sicaklik[-(3:5)]
sicaklik
sicaklik <- sicaklik[-c(3,6)]
sicaklik

# Örnek 2.44: Vektörlerle aritmetik işlemler
# Bağımlılık: Örnek 2.43
sicaklik^2
sum(sicaklik^2)

# Örnek 2.45: Matris tanımlama 1
A <- matrix(nrow=3, ncol=2)
A

# Örnek 2.46: Matris tanımlama 2
A <- matrix(nrow=3, ncol=2, 0)
B <- matrix(nrow=3, ncol=2, c(3,5,8), byrow=FALSE)
C <- diag(3)
A
B
C

# Örnek 2.47: Matris elemanlarına değer atama 1
# Bağımlılık: Örnek 2.46
A[1,1] <- 6

# Örnek 2.48: Matris elemanlarına değer atama 2
# Bağımlılık: Örnek 2.47
A[,2] <- c(4, 7, 5)

# Örnek 2.49: Matris elemanlarına değer atama 3
# Bağımlılık: Örnek 2.48
A[3,] <- c(8, 1)

# Örnek 2.50: Matrisi görüntüleme
# Bağımlılık: Örnek 2.49
A

# Örnek 2.51: Matrisi görüntüleme
# Bağımlılık: Örnek 2.50
F <- t(A)
F

# Örnek 2.52: Matris işlemleri
# Bağımlılık: Örnek 2.51
A*B  #Elemansal çarpım
F%*%A	# Matris çarpımı (A'A gibi)
MASS::ginv(A) # Ters matris

# Örnek 2.53: Dizi tanımlama ve görüntüleme
arrA <- array(c(3,2,6,5,6,2,3,4,2,5,4,6), dim=c(3,2,2)) 
arrA

# Örnek 2.54: Dizi elemanlarına değer atama 1
# Bağımlılık: Örnek 2.53
#
arrA[,,1] <- B
arrA

# Örnek 2.55: Dizi elemanlarına değer atama 2
# Bağımlılık: Örnek 2.54
arrA[3,2,1] <- 77
arrA

# Örnek 2.56: Veri çerçevesi tanımlama 
u2015 <- c(210, 90, 320)
u2016 <- c(200, 100, 400)
u2017 <- c(190, 95, 440)
u2018 <- c(190, 90, 460)
u2019 <- c(150, 102, 500)
utum <- rbind(u2015,u2016, u2017,u2018, u2019)
uretim <- data.frame(utum) 
uretim

# Örnek 2.57: Veri çerçevesi satır ve sütunlara ad verme 
# Bağımlılık: Örnek 2.56
rownames(uretim) <- c(2015:2019)
colnames(uretim) <-c("portakal", "limon", "zeytin")

# Örnek 2.58: Veri çerçevesini görüntüleme
# Bağımlılık: Örnek 2.57
uretim

# Örnek 2.59: Veri çerçevesinde sütun verileriyle işlem 1
# Bağımlılık: Örnek 2.57
uretim$portakal
mean(uretim$portakal)

# Örnek 2.60: Veri çerçevesi sütunlarına erişim 1
# Bağımlılık: Örnek 2.57
uretim["portakal"]

# Örnek 2.61: Veri çerçevesi sütunlarına erişim 2
# Bağımlılık: Örnek 2.57
uretim[,1]

# Örnek 2.62: Veri çerçevesi satırlarına erişim 
# Bağımlılık: Örnek 2.57
uretim[2,]

# Örnek 2.63: Veri çerçevesi elemanlarına erişim 1
# Bağımlılık: Örnek 2.57
uretim[3,2]

# Örnek 2.64: Veri çerçevesi elemanlarına erişim 2
# Bağımlılık: Örnek 2.57
uretim[3:4, ]
uretim[ ,2:3]
uretim[2:3, 3]

# Örnek 2.65: Veri çerçevesi elemanlarına erişim 3
# Bağımlılık: Örnek 2.57
uretim[ ,c(1,3)]

# Örnek 2.66: Veri çerçevesi elemanlarına erişim 3
# Bağımlılık: Örnek 2.57
uretim[ -3,-2]

# Örnek 2.67: Veri çerçevesi elemanlarına erişim 4
# Bağımlılık: Örnek 2.57
uretim[-c(1:2), c(1,3)]

# Örnek 2.68: Veri çerçevesine sütun ekleme
# Bağımlılık: Örnek 2.57
elma <- c(321, 360, 380, 400, 410)
uretim <- cbind(uretim, elma)
uretim

# Örnek 2.69: Veri çerçevesine satır ekleme
# Bağımlılık: Örnek 2.68
u2014 <- c(200, 120, 310, 305)
uretim <- rbind(u2014, uretim)
uretim

# Örnek 2.70: Veri çerçevesine satır ekleme
# Bağımlılık: Örnek 2.69
rownames(uretim)[1] <- "2014"

# Örnek 2.71: Liste tanımlama
# Bağımlılık: Örnek 2.70
il <- "Adana"
onay <- c(TRUE, FALSE)
adanatarim <- list(il=il, uretim=uretim, onay=onay)
adanatarim

# Örnek 2.72: Liste elemanlarının görüntülenmesi
# Bağımlılık: Örnek 2.71
adanatarim[[2]]
adanatarim$uretim

# Örnek 2.73: Liste elemanlarına erişim
# Bağımlılık: Örnek 2.71
adanatarim[[2]][,1]
adanatarim$uretim[,1]
adanatarim$uretim$portakal

# Örnek 2.74: Veri çerçevesi ve faktörlerin tanımlanması
irk <- c("ivesi", "ivesi", "ivesi", "sakiz", "sakiz", "sakiz")
sutverimi <- c(230, 180, 175, 400, 420, 390)
sutver <- data.frame(irk, sutverimi)
sutver

# Örnek 2.75: Veri çerçevesinin yapısını inceleme
# Bağımlılık: Örnek 2.74
str(sutver)

# Örnek 2.76: Faktör değerlerinin sayısal olarak girilmesi
irk <- c(1,1,1,2,2,2)
sutverimi <- c(230, 180, 175, 400, 420, 390)
sutver2 <- data.frame(irk, sutverimi)
sutver2
str(sutver2)

# Örnek 2.77: Sayısal değerlerin faktöre dönüştürülmesi
# Bağımlılık: Örnek 2.76
sutver2$irk <- as.factor(sutver2$irk)
sutver2
str(sutver2)

# Örnek 2.78: Frekans tablosu
# Bağımlılık: Örnek 2.74
table(sutver$irk)

# Örnek 2.79: Oransal frekans tablosu
# Bağımlılık: Örnek 2.74
irktablo <- table(sutver$irk)
irkptablo <- prop.table(irktablo)
irkptablo 

# Örnek 2.80: Tablo elemanlarına erişim
# Bağımlılık: Örnek 2.79
irkptablo[2]


########################################################################################
# Bolum 3: Veri Hazırlıma ve Görselleştirme
########################################################################################


# Örnek 3.1: iris veri seti
data(iris)
str(iris)
print(iris)
nrow(iris)
ncol(iris)
dim(iris)

# Örnek 3.2: MASS paketindeki veri setleri listesi
data(package='MASS')

# Örnek 3.3: MASS paketindeki oats veri setini çalışma alanına yükleme 1
library(MASS)
data(oats)
head(oats, 3)

# Örnek 3.4: MASS paketindeki oats veri setini çalışma alanına yükleme 2
data(oats, package="MASS")
head(oats, 3)

# Örnek 3.5: MASS paketindeki oats veri setini çalışma alanına yükleme 3
oats <- MASS::oats
head(oats, 3)

# Örnek 3.6: Tüm kurulu R paketlerindeki veri setlerini listeleme
data(package = .packages(all.available = TRUE))

# Örnek 3.7: Çalışma klasörünü ayarlama
getwd()
setwd("D:/mldmbook/datasets")
getwd()

# Örnek 3.8: CSV türü dosyaları okuma 1
# Bağımlılık: Örnek 3.7
> iris <- read.csv(file="iris.csv", header=TRUE)
> str(iris)
'data.frame':   150 obs. of  5 variables:
 $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
 $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
 $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
 $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
 $ Species     : chr  "setosa" "setosa" "setosa" "setosa" ...

# Karakter türünü faktör türüne dönüştürme
iris$Species <- as.factor(iris$Species)
str(iris)
head(iris)
tail(iris)

# Örnek 3.9: CSV türü dosyaları okuma 2
# Bağımlılık: Örnek 3.7
iris <- read.csv("iris2.csv", header=FALSE, 
    col.names=c('sl', 'sw', 'pl', 'pw', 'sp'))
head(iris)
tail(iris)

# Örnek 3.10: Metin türü dosyaları okuma
# Bağımlılık: Örnek 3.7
iris <- read.table(file="iris.dat", header=TRUE, sep="\t")
str(iris)

# Örnek 3.11: Metin türü dosya kaydetme
# Bağımlılık: Örnek 3.7
write.table(x = iris, file = "iris.dat", append = FALSE, 
   sep = "\t", eol = "\n", na = "NA", dec = ".", quote = FALSE, 
   row.names = FALSE, col.names = TRUE, 
   qmethod = c("escape", "double"), fileEncoding = "")

# Örnek 3.12: RDS dosyasına kaydetme ve okuma
# Bağımlılık: Örnek 3.7
saveRDS(iris, file = "iris.rds")
iris <- readRDS(file = "iris.rds")
str(iris)

# Örnek 3.13: RDA dosyasına kaydetme ve okuma
# Bağımlılık: Örnek 3.7
save(iris, file = "iris.rda")
load(file = "iris.rda")
str(iris)

# Örnek 3.14: RDA dosyasına birden fazla veri nesnesi kaydetme ve okuma
# Bağımlılık: Örnek 3.7
PL <- iris$Petal.Length
save(iris, file = "iriswork.rda")
load(file = "iriswork.rda")
head(iris, 3)
head(PL)

# Örnek 3.15: R çalışma alanını kaydetme ve geri yükleme
# Bağımlılık: Örnek 3.7
save.image(file = "analysis1.RData")
load("analysis1.RData")

# Örnek 3.16: writexl paketini kurma/yükleme
suppressPackageStartupMessages(installed <- require(writexl))
if (!installed) {
   install.packages("devtools", repos="https://cloud.r-project.org")
   devtools::install_github("ropensci/writexl")
   suppressPackageStartupMessages(require(writexl))
}

# Örnek 3.17: Excel dosyasına kayıt işlemi
data(iris)
setwd("D:/mldmbook/datasets")
require(writexl)
write_xlsx(x=iris, path = "iris.xlsx"),
   col_names = TRUE, format_headers = TRUE, use_zip64 = FALSE)

# Örnek 3.18: readxl paketinin kurulması/yüklenmesi
suppressPackageStartupMessages(installed <- require(readxl))
if (!installed) {
   install.packages("readxl", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(readxl))
}

# Örnek 3.19: readxl ile Excel dosyasını okuma
suppressPackageStartupMessages(installed <- require(readxl))
if (!installed) {
   install.packages("readxl", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(readxl))
}

setwd("D:/mldmbook/datasets")
excel_sheets("iris.xlsx")
iris <- read_excel("iris.xlsx", sheet="Sheet1")
head(iris)
tail(iris)

# Örnek 3.20: Excel dosyasından okuma seçenekleri
# Bağımlılık: Örnek 3.19
setosadf <- read_excel("iris.xlsx", sheet = "Sheet1", 
   range = "A2:D51", skip=1, na = "*", n_max=200,
   col_names = c("sl", "sw", "pl", "pw", "sp")) 
head(setosadf,3)
tail(setosadf,3)

# Örnek 3.21: Diğer yazılımlardan veri dosyası ithali 1
# Bağımlılık: Örnek 3.7
suppressPackageStartupMessages(installed <- require(foreign))
if (!installed) {
   install.packages("foreign", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(foreign))
}

irisspss <- read.spps(file="iris.sav")


# Örnek 3.22: Diğer yazılımlardan veri dosyası ithali 2
# Bağımlılık: Örnek 3.7
suppressPackageStartupMessages(installed <- require(Hmisc))
if (!installed) {
   install.packages("Hmisc", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(Hmisc))
}

irissas <- sasxport.get("iris.xpt")

# Örnek 3.23: Uzak sistemden dosya okuma
repos <- "http://archive.ics.uci.edu"
irisurl <- paste(repos, "/ml/machine-learning-databases/iris/iris.data")
iris <- read.table(file=irisurl, header=FALSE, sep=",")
names(iris) = c('cyu', 'cyg', 'tyu', 'tyg', 'stur')
head(iris, 3)
tail(iris, 3)

# Örnek 3.24: Uzak sistemden dosya indirme
irisurl <- "http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data" 

# Yerel klasör ve dosya adını tanımlama
filename <-"D:/mldmbook/datasets/iris.txt"
# Uzak dosyayı indirme
download.file(url=irisurl, destfile = filename, method ="curl")
iris_filedata<-read.csv(file = filename,header = FALSE,sep = ",")

iris <- read.table(file=filename, header=FALSE, sep=",")
names(iris) <-
  c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width","Species")
head(iris, 3)
tail(iris, 3)

# Örnek 3.25: R'de açıklayıcı istatistik fonksiyonları
data(iris)

min(iris$Sepal.Length)
max(iris$Sepal.Length)
mean(iris$Sepal.Length)
median(iris$Sepal.Length)
quantile(iris$Sepal.Length)
var(iris$Sepal.Length)
sd(iris$Sepal.Length)
IQR(iris$Sepal.Length)


# Örnek 3.26: skewness fonksiyonuyla çarpıklık katsayısı hesaplama
# Bağımlılık: Kod 3.1
data(iris)
skewness(iris$Sepal.Length) 


# Örnek 3.27: summary fonksiyonuyla açıklayıcı istatistikler
data(iris)
summary(iris)

# Örnek 3.28: pastecs paketiyle açıklayıcı istatistikler
# Bağımlılık: Örnek 3.27
suppressPackageStartupMessages(installed <- require(pastecs))
if (!installed) {
   install.packages("pastecs", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(pastecs))
}
stat.desc(iris[,1:4], basic=TRUE, desc=TRUE, norm=TRUE, p=0.95)

# Örnek 3.29: psych paketiyle açıklayıcı istatistikler
# Bağımlılık: Örnek 3.27
suppressPackageStartupMessages(installed <- require(psych))
if (!installed) {
   install.packages("psych", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(psych))
}

describeBy(iris[,1:4], group= iris[,5])


# Örnek 3.30: Histogram 
data(iris)
hist(iris$Sepal.Width, col="gray",
   xlab="Sepal Width", ylab="Frekans",
   main="Sepal Width Histogramı")

# Örnek 3.31: Histogram 2
data(iris)
hist(iris$Sepal.Width, prob=TRUE, 
   col="gray", xlab="Sepal Width", ylab="Frekans",
   main="Sepal Width Histogramı")

# Örnek 3.32: Histogram 3
data(iris)
hist(iris$Sepal.Width, prob=TRUE, breaks=30,  
   col="gray", xlab="Sepal Width", ylab="Frekans",
   main="Sepal Width Histogramı")


# Örnek 3.33: Olasılık Yoğunluk Grafiği
data(iris)
swdensity <- density(iris$Sepal.Width)
plot(swdensity, col="blue", lwd=2, lty=1,
   ylab="Yoğunluk", main="Olasılık Yoğunluk Grafiği")


# Örnek 3.34: Histogram ve Olasılık Yoğunluk Grafiği
data(iris)
hist(iris$Sepal.Width, prob=TRUE,  
   col="gray", xlab="Sepal Width", ylab="Yoğunluk",
   main="Sepal Width Histogramı ve Yoğunluk Grafiği")
swdensity <- density(iris$Sepal.Width)
lines(swdensity, col="blue", lwd=2, lty=1)


# Örnek 3.35: Kutu-bıyık grafiği
data(iris)
boxplot(iris$Sepal.Width, col="gray", horizontal=TRUE,
   main="Sepal Width Kutu-bıyık Grafiği")


# Örnek 3.36: Karşılaştırma amaçlı kutu-bıyık grafikleri
data(iris)
boxplot(iris[,1:4], col=c(2,3,5,6), horizontal=TRUE, notch=TRUE,
   main="iris veriseti Kutu-bıyık Grafiği")


# Örnek 3.37: Karşılaştırma amaçlı kutu-bıyık grafikleri (formülle)
data(iris)
boxplot(iris[,1]~iris[,5], col=c(2,3,5,6), 
   xlab="Türler", ylab="Sepal Length", 
   main="Sepal Length Kutu-bıyık Grafiği")

# Örnek 3.38: Karşılaştırma amaçlı kutu-bıyık grafikleri (formülle)
data(iris)
boxplot(iris[,1]~iris[,5], col=c(2,3,5,6), 
  xlab="Türler", ylab="Sepal Length", 
  main="Sepal Length Kutu-bıyık Grafiği")
stripchart(iris[,1] ~ iris[,5], vertical=TRUE, data = iris, 
  method='jitter', add=TRUE, pch=19, col='blue', cex=0.8)

# Örnek 3.39: Çubuk grafik
data(iris)
irismeans <- apply(iris[,1:4], 2, mean)
barplot(irismeans, col=c("red","green","blue","orange"),
   xlab="Özellikler", ylab="Ortalama", 
   main="iris verisi değişken ortalamaları")

# Örnek 3.40: Pasta grafik
data(iris)
n <- nrow(iris)
trainsize <- round(0.6*n)
trainidx <- sample(1:n, trainsize, replace=FALSE)
iristrain <- iris[trainidx,]  
traintable <- table(iristrain$Species)
traintable
pie(traintable, col=rainbow(3))


# Örnek 3.41: Serpilme grafiği 1
data(iris)
plot(iris$Sepal.Length, iris$Petal.Length,
   col="blue", pch=19, cex=2,
   xlab = "Sepal.Length", ylab = "Petal.Length", 
   main = "Serpilme Grafiği")


# Örnek 3.42: Serpilme grafiği 2
data(iris)
plot(iris$Sepal.Length, iris$Petal.Length,
   col=iris$Species, pch=19, cex=2,
   xlab = "Sepal.Length", ylab = "Petal.Length", main = "Serpilme Grafiği")


# Örnek 3.43: Değişken çiftleri içim serpilme grafikleri
data(iris)
pairs(iris[,1:4], col=iris[,5], pch=19)

# Örnek 3.44: 3B serpilme grafiği
suppressPackageStartupMessages(installed <- require(scatterplot3d))
if (!installed) {
   install.packages("scatterplot3d", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(scatterplot3d))
 }
data(iris)
scatterplot3d(x=iris[,1], y=iris[,2], z=iris[,3], angle=30,
   color=as.numeric(iris[,5]), pch=19,
   xlab="Sepal.Width", ylab="Sepal.Length", zlab="Petal.Width")

# Örnek 3.45: Çizgi grafik
buguretim <- c(19.0, 22.1, 20.1, 21.8, 19.7, 20.6, 17.8, 17.7, 20.0, 21.0, 21.0)
yillar <- c(2014, 2013, 2012, 2011, 2010, 2009, 2008, 2007, 2006, 2005, 2004)
plot(x=yillar, y=buguretim, type="o", col="blue", lwd=2, lty=1,
   xlab="Yıllar", ylab="Üretim (milyon ton)", main="Buğday Üretimi")

# Örnek 3.46: Paralel koordinat grafiği
suppressPackageStartupMessages(installed <- require(RColorBrewer))
if (!installed) {
   install.packages("RColorBrewer", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(RColorBrewer))
}
palette <- brewer.pal(3, "Set2") 
speciescolors <- palette[as.numeric(iris$Species)]

suppressPackageStartupMessages(installed <- require(MASS))
if (!installed) {
   install.packages("MASS", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(MASS))
}
data(iris)
parcoord(iris[,c(3,4,1,2)] , col=speciescolors)

# Örnek 3.47: Korelogram 1
suppressPackageStartupMessages(installed <- require(corrplot))
if (!installed) {
   install.packages("corrplot", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(corrplot))
}
data(iris)
iriscormat <- cor(iris[1:4])
corrplot(iriscormat, method="ellipse", type="upper", order="hclust",
   tl.col="black", tl.srt=45)

# Örnek 3.48: Korelogram 2
suppressPackageStartupMessages(installed <- require(corrplot))
if (!installed) {
   install.packages("corrplot", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(corrplot))
}
data(iris)
iriscormat <- cor(iris[1:4])
corrplot.mixed(iriscormat, lower.col="black", number.cex = 1.2)

# Örnek 3.49: ggcorrplot ile korelogram
suppressPackageStartupMessages(installed <- require(ggstatsplot))
if (!installed) {
   install.packages("ggstatsplot", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(ggstatsplot))
}
suppressPackageStartupMessages(installed <- require(ggcorrplot))
if (!installed) {
   install.packages("ggcorrplot", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(ggcorrplot))
}
#
data(iris)
ggcorrmat(
  data     = iris,
  colors   = c("red", "white", "dodgerblue"),
  title    = "İris Korelogram",
  subtitle = "standart"
 )


# Örnek 3.50: ggcorrplot ile sınıflara göre korelogram
suppressPackageStartupMessages(installed <- require(ggcorrplot))
if (!installed) {
   install.packages("ggcorrplot", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(ggcorrplot))
}
data(iris)
grouped_ggcorrmat(
   data         = iris,
   type         = "robust", # Korelasyon yöntemi
   colors       = c("#cbac43", "white", "#550000"),
   grouping.var = Species, # grup değişkeni
   matrix.type  = "lower"  # matris türü
)

# Örnek 3.51: Grafik penceresinde hücreleri (satır ve sütun sayısı) tanımlama
data(iris)
par(mfrow=c(2,2))
# Kenarları tanımlama
par(mar=c(4.5, 4.2, 3, 1.5)) 
hist(iris[,1], xlab = "Sepal Length", col = "gray", main="Histogram")
hist(iris[,2], xlab = "Sepal Width", col = "gray", main="Histogram")
plot(iris[,1:2], xlab="Length", ylab="Width", main= "Sepal", pch=19)
boxplot(iris[,1:2], notch=TRUE, col=c("red","blue"))

# Örnek 3.52: car paketiyle serpilme grafiği matrisi
suppressPackageStartupMessages(installed <- require(RColorBrewer))
if (!installed) {
   install.packages("RColorBrewer", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(RColorBrewer))
}
palette <- brewer.pal(3, "Set1") 

suppressPackageStartupMessages(installed <- require(car))
if (!installed) {
   install.packages("car", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(car))
}

data(iris)	
scatterplotMatrix(~ . | Species, data=iris, 
   col=palette, by.group=TRUE)


# Örnek 3.53: psych paketiyle serpilme grafiği matrisi
suppressPackageStartupMessages(installed <- require(psych))
if (!installed) {
   install.packages("psych", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(psych))
}
data(iris)
pairs.panels(iris[1:4], hist.col="orange")

# Örnek 3.54: GGally paketiyle serpilme grafiği matrisi
suppressPackageStartupMessages(installed <- require(GGally))
if (!installed) {
   install.packages("GGally", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(GGally))
}
data(iris)
ggpairs(iris, ggplot2::aes(colour = Species, alpha=0.6))


# Örnek 3.55: ggstatsplot paketiyle serpilme grafiği matrisi
suppressPackageStartupMessages(installed <- require(ggstatsplot))
if (!installed) {
   install.packages("ggstatsplot", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(ggstatsplot))
}
data(iris)
ggbetweenstats(
   data = iris,
   x = Species, y = Petal.Length,
   title = "Petal.Length"
)


# Örnek 3.57: iris veri setini normalleştirme
# Bağımlılık: Kod 3.2
data(iris)
normseplen <- maxminnorm(iris[,1])
head(normseplen)


# Örnek 3.58: iris veri setini normalleştirme
data(iris)
normiris <- as.data.frame(lapply(iris[,1:4], maxminnorm))
normiris <- cbind(normiris, Species=iris[,5])
head(normiris)


# Örnek 3.59: Normalleştirilmiş iris verisi grafikleri
# Bağımlılık: Örnek 3.58
suppressPackageStartupMessages(installed <- require(GGally))
if (!installed) {
   install.packages("GGally", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(GGally))
}
ggpairs(normiris, ggplot2::aes(colour = Species, alpha=0.6))


# Örnek 3.60:Normal ve Weibull dağılışından örnek veri oluşturma
set.seed(1923)
x1 <- rnorm(n=1000, mean=50, sd=2)
x2 <- rweibull(n=1000, shape=1, scale=5)

# Örnek 3.61: x1 ve x2 için histogramlar
# Bağımlılık: Örnek 3.60
oldpar <- par(mfrow=c(1,2))
hist(x1, col="gray", main="Normal")
hist(x2, col="gray", main="Weibull")
par(oldpar)


# Örnek 3.62: x1 ve x2 değişkenlerin kutu-bıyık grafikleri
# Bağımlılık: Örnek 3.60
oldpar <- par(mfrow=c(1,2))
boxplot(x1, horizontal = TRUE,
    col="gray", border="blue",
    main="kutu-bıyık grafiği",
    xlab="x1", ylab="")
boxplot(x2,horizontal = TRUE,
    col="gray", border="blue",
    main="kutu-bıyık grafiği",
    xlab="x2", ylab="")
par(oldpar)


# Örnek 3.63: Örnek veri için Q-Q grafikleri
# Bağımlılık: Örnek 3.60
oldpar <- par(mfrow=c(1,2))
qqnorm(x1, 
   xlab="Teorik Kantiller", ylab="Örneklem Kantilleri",
   main="Normal Dağılış (x1)")
qqline(x1, col=2, lwd=2)
qqnorm(x2, 
   xlab="Teorik Kantiller", ylab="Örneklem Kantilleri",
   main="Normal Olmayan Dağılış (x2)")
qqline(x2, col=2, lwd=2)
par(oldpar)

# Örnek 3.64: Q istatistiği
x <- c(1,1.1,1.1,1.1,1.1,1.2,1.2,1.6,2.2,2.2,2.4,2.6,3,
 4,4,4.1,4.1,4.1,4.2,4.5,5,5,5.1,10,10,10.5,15.2,20)
q <- diff(range(x)) / sd(x)
q


# Örnek 3.65: Shapiro-Wilk testi
# Bağımlılık: Örnek 3.60
shapiro.test(x1)
shapiro.test(x2)

# Örnek 3.66: normtest ile Jarque-Bera testi
# Bağımlılık: Örnek 3.60
suppressPackageStartupMessages(installed <- require(normtest))
if (!installed) {
   install.packages("normtest", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(normtest))
}

jb.norm.test(x1)
jb.norm.test(x2)


# Örnek 3.67: nortest ile Anderson-Darling testi
# Bağımlılık: Örnek 3.60
suppressPackageStartupMessages(installed <- require(nortest))
if (!installed) {
   install.packages("nortest", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(nortest))
}

ad.test(x1)
ad.test(x2)


# Örnek 3.68: x değişkeni ortalama ve standart sapması
x <- c(2, 4, 6, 3, 4, 5)
xort <- mean(x)
xort
xstd <- sd(x)
xstd

# Örnek 3.68: Örnek verinin standartlaştırılması
# Bağımlılık: Örnek 3.67
z <- (x-xort)/xstd
z
mean(z)
sd(z)


# Örnek 3.70: Örnek verinin standartlaştırılması
x <- c(2, 4, 6, 3, 4, 5)
sum(x)
xort <- mean(x)
xort
xstd <- sqrt(var(x))
xstd
z <- (x-xort)/xstd
z

# Örnek 3.71: Örnek verinin scale ile standartlaştırılması 1
# Bağımlılık: Örnek 3.70
z <- scale(x, center=TRUE, scale=TRUE) # kısaca scale(x)
z	

# Örnek 3.72: Örnek verinin scale ile standartlaştırılması 2
# Bağımlılık: Örnek 3.71
scale(x, center=FALSE, scale=TRUE)


# Örnek 3.73: Örnek veride ölçek değeri
# Bağımlılık: Örnek 3.71
sqrt(sum(x^2)/(length(x)-1))


# Örnek 3.74: Örnek veride WS ölçeklendirmesi
# Bağımlılık: Örnek 3.71
scale(x, center=median(x), scale=mad(x))


# Örnek 3.75: Örnek veride QSUM ölçeklendirmesi
# Bağımlılık: Örnek 3.71
scale(x, center=FALSE, scale=sum(x))

# Örnek 3.76: Örnek veri çerçevesi oluşturma
vagr <-  c(19, 25, 23)
kaa <-  c(27, 44, 37)
kya <- c(120, 198, 165)
kdata <- cbind(vagr, kaa, kya)
kdata

# Örnek 3.77: Örnek veri çerçevesinde standartlaştırma
# Bağımlılık: Örnek 3.76
skdata1 <- scale(kdata)
skdata1


# Örnek 3.78: Standart veride tanımlayıcı istatistikler
# Bağımlılık: Örnek 3.76
summary(skdata1)

# Örnek 3.79: Örnek veride QMAX ölçeklendirmesi
# Bağımlılık: Örnek 3.76
maxvals <- c(max(kdata[,1]), max(kdata[,2]), max(kdata[,3]))
maxvals
skdata2 <- scale(kdata, center=FALSE, scale=maxvals)
skdata2 

# Örnek 3.80: clusterSim paketini kurma ve yükleme
suppressPackageStartupMessages(installed <- require(clusterSim))
if (!installed) {
     install.packages("clusterSim", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(clusterSim))
  }

# Örnek 3.81: data.Normalization ile QMAX ölçeklendirmesi
# Bağımlılık: Örnek 3.76, 3.80
skdata3 <- data.Normalization(kdata, 
                              type="n8", normalization="column")
skdata3


# Örnek 3.82: caret paketini kurma ve yükleme
suppressPackageStartupMessages(installed <- require(caret))
if (!installed) {
     install.packages("caret", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(caret))
  }

# Örnek 3.83: preProcess ile standartlaştırma
# Bağımlılık: Örnek 3.76, 3.82
ppdata <- preProcess(kdata, method = c("center", "scale"))
skdata3 <- predict(ppdata, kdata)
skdata3



########################################################################################
# Bolum 4: Veri Madenciliği ve Makine Öğrenmesi 
########################################################################################


# Örnek 4.1: Veri setinin karıştırılması
data(iris)
head(iris, 4)
set.seed(9)
# Karıştırma işlemi
n <- nrow(iris)
sampidx <- sample(1:n, size=n, replace=FALSE)
iris <- iris[sampidx,]
head(iris, 4)


# Örnek 4.2: Eğitim ve test verilerinin oluşturulması 1
# Bağımlılık: Örnek 4.1
#
n <- nrow(iris)
sepoint <- 100 
iristrain <- iris[1:sepoint, ]
iristest <- iris[(sepoint+1):n, ]
head(iristrain, 3)
head(iristest, 3)


# Örnek 4.3: Eğitim ve test verilerinin oluşturulması 2
# Bağımlılık: Örnek 4.1
#
n <- nrow(iris)
set.seed(9)
trainsize <- 100 
trainidx <- sample(1:n, size=trainsize, replace=FALSE)
iristrain <- iris[trainidx, ]
iristest <- iris[-trainidx, ]
head(iristrain, 3)
head(iristest, 3)


# Örnek 4.4: Eğitim ve test verilerinin oluşturulması 3
# Bağımlılık: Örnek 4.1
#
n <- nrow(iris)
set.seed(9)
trainsize <- round(0.7*n)  # veya round(2*n/3) gibi
trainidx <- sample(1:n, trainsize, replace=FALSE)
iristrain <- iris[trainidx,]  
iristest <- iris[-trainidx,]
head(iristrain, 3)
head(iristest, 3)

# Örnek 4.5: Eğitim ve test verilerinin oluşturulması 4
# Bağımlılık: Örnek 4.1
#
setosa <- iris[iris$Species=="setosa",]
versicolor <- iris[iris$Species=="versicolor",]
virginica <- iris[iris$Species=="virginica",]
nc <- c(nrow(setosa), nrow(versicolor), nrow(virginica))
trainsize <- round(0.7*nc) 
set.seed(9)
idx1 <- sample(1:trainsize[1], size=trainsize[1], replace=FALSE)
idx2 <- sample(1:trainsize[2], size=trainsize[2], replace=FALSE)
idx3 <- sample(1:trainsize[3], size=trainsize[3], replace=FALSE)
iristrain <- rbind(setosa[idx1,],versicolor[idx2,],virginica[idx3,])
iristest <- rbind(setosa[-idx1,],versicolor[-idx2,],virginica[-idx3,])

head(iristrain, 3)
tail(iristrain, 3)
head(iristest, 3)
tail(iristest, 3)


# Örnek 4.6: Eğitim ve test verilerinin oluşturulması 5
# Bağımlılık: Örnek 4.1
#
suppressPackageStartupMessages(installed <- require(caTools))
if (!installed) {
     install.packages("caTools", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(caTools))
  }

set.seed(9)
trainidx <- sample.split(Y=iris$Species, SplitRatio=0.7)
iristrain <- subset(iris, trainidx == TRUE)
iristest <- subset(iris, trainidx == FALSE)

head(iristrain, 3)
head(iristest, 3)


# Örnek 4.7: Eğitim ve test verilerinin oluşturulması 6
# Bağımlılık: Örnek 4.1
#
suppressPackageStartupMessages(installed <- require(caret))
if (!installed) {
     install.packages("caret", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(caret))
  }

set.seed(9)
trainidx <- createDataPartition(y=iris$Species, p=0.7, times=1, list=FALSE)
iristrain <- iris[trainidx,]
iristest <- iris[-trainidx,]

head(iristrain, 3)
head(iristest, 3)


# Örnek 4.8: Eğitim ve test verilerinin oluşturulması 7
# Bağımlılık: Örnek 4.1
#
set.seed(9)
if(!require(rsample)){
     install.packages("rsample", repo="https://cloud.r-project.org");
     require(rsample) }
irissplit <- initial_split(data=iris, prop=0.7, strata="Species")
iristrain <- training(irissplit)
iristest  <- testing(irissplit)
head(iristrain, 3)
head(iristest, 3)

# Örnek 4.9: ROSE paketiyle ROC eğrisi çizme
suppressPackageStartupMessages(installed <- require(ROSE))
if (!installed) {
     install.packages("ROSE", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(ROSE))
  }
actvals <- c(rep(1, 10), rep(0,5))      # Gerçek sınıflar
predvals1 <- c(rep(1, 9), rep(0,5), 1)  # Tahmin sınıfları (Model 1)
predvals2 <- c(rep(1, 7), rep(0,8))     # Tahmin sınıfları (Model 2)
predvals3 <- c(rep(1, 8), rep(0,6), 1)  # Tahmin sınıfları (Model 3)
actvals
predvals1
predvals2
predvals3

roc.curve(actvals, predvals1, col=2, lwd=3, lty=1, add.roc=TRUE,
                main="Model ROC Eğrileri", xlab="FPR", ylab="TPR")
legend(0.7, 0.2, legend=c("Model 1", "Model 2", "Model 3"),
            lty=c(1,2,4), lwd=c(3,3,3), col=c(2,4,3))

roc.curve(actvals, predvals2, col=4, lwd=3, lty=2, add=TRUE)
roc.curve(actvals, predvals3, col=3, lwd=3, lty=4, add=TRUE)


# Örnek 4.10: İki sınıflı sınıflama problemleri başarım ölçütleri uygulaması
# Bağımlılık: Kod 4.1
#
ac <- c(0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1)
pc <- c(0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0,1,0,1,1,1,1)

bcreport <- binary_class_metrics(yactual=ac, ypred=pc)
cm <- bcreport$confmat
cm
accuracy <- bcreport$ACC
accuracy
all_metrics <- do.call(data.frame, bcreport[-1])
all_metrics

# Örnek 4.11: Çok sınıflı sınıflama problemleri başarım ölçütleri uygulaması
# Bağımlılık: Kod 4.2
#
ac <- c(0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,2)
pc <- c(0,0,0,1,0,0,1,0,2,1,0,0,1,1,1,1,1,1,0,1,2,2,2,2,2)

mcreport <- multi_class_metrics(yactual=ac, ypred=pc)
cm <- mcreport$confmat
cm
class_metrics <- mcreport$criteria
class_metrics
performances <- mcreport$performances
t(performances)


# Örnek 4.12a: sim_confmat ile veri benzetimi
# Bağımlılık: Kod 4.3
#
n <- 50 # Toplam gözlem sayısı
mcr <- 0.1  #Yanlış sınıf yüzdesi
classes <- LETTERS[1:4] #Sınıf etiketleri
cprobs <- c(0.25, 0.25, 0.25, 0.25)  #Sınıf olasılıkları

simdata <- sim_confmat(n=n, mcr=mcr, clabels=classes, 
                           probs=cprobs, seed=20)
head(simdata$df)
simdata$confmat


# Örnek 4.12b: sim_confmat ile benzetilen veride başarım ölçütleri
# Bağımlılık: Kod 4.2; Örnek 4.12
#
simyactual <- simdata$df[,1]
simypred <- simdata$df[,2]
mcreport <- multi_class_metrics(yactual=simyactual, ypred=simypred)
cm <- mcreport$confmat
cm
class_metrics <- mcreport$criteria
class_metrics
performances <- mcreport$performances
t(performances)


# Örnek 4.13: sim_confmat ile benzetilen veride başarım ölçütleri
# Bağımlılık: Kod 4.4; Örnek 4.12b
#
cm <- mcreport$confmat
renk <- c("white", "#009194")
plot_confmat(confmat=cm, color=renk)

# Örnek 4.14: Regresyon problemleri başarım ölçütleri
# Bağımlılık: Kod 4.5
#
av <- c(1.1, 1.9, 3.0, 4.4, 5.0, 5.6)
pv <- c(0.9, 1.8, 2.5, 4.5, 5.0, 6.2)
regreport <- regression_metrics(yactual=av, ypred=pv, ndigits=3)
regreport$errors
regreport$MAE
regreport$RMSE
all_metrics <- do.call(data.frame, regreport[-1])
all_metrics


# Örnek 4.15: Naïve-Bayes ile mısır ekimi sınıflaması
suppressPackageStartupMessages(installed <- require(e1071))
if (!installed) {
     install.packages("e1071", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(e1071))
  }

setwd("D:/mldmbook/datasets")
misirdf <- read.table("misir.dat", head=TRUE, sep="\t") 

misirnbc <- naiveBayes(misir ~ ., data=misirdf, 
                            laplace=0, na.action = na.pass)

misirnbc

# Örnek 4.16: Naïve-Bayes modeliyle eğitim verisinden tahminleme
# Bağımlılık: Örnek 4.15
misirtestpreds <- predict(misirnbc, newdata=misirdf)
misirconfmat <- table(misirdf$misir, misirtestpreds)
misirconfmat
suppressPackageStartupMessages(installed <- require(e1071))
if (!installed) {
     install.packages("e1071", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(e1071))
  }

confusionMatrix(misirconfmat)


# Örnek 4.17: iris veri için açıklayıcı istatistikler
suppressPackageStartupMessages(installed <- require(psych))
if (!installed) {
     install.packages("psych", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(psych))}
data(iris)
describeBy(iris[,1:4], iris[,5])


# Örnek 4.18: Sürekli normal değerler için olasılık hesaplama
dnorm(6.8, mean=6.59, sd=0.64)


# Örnek 4.19: Naïve-Bayes sınıflayıcısı ile eğitim
suppressPackageStartupMessages(installed <- require(rsample))
if (!installed) {
     install.packages("rsample", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(rsample))
  }

set.seed(1071)  
irissplit <- initial_split(iris, prop=0.8, strata="Species")
iristrain <- training(irissplit)
iristest  <- testing(irissplit)

suppressPackageStartupMessages(installed <- require(e1071))
if (!installed) {
     install.packages("e1071", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(e1071))
  }
irisnbc  <- naiveBayes(Species ~ ., data=iristrain, 
                            laplace=0, na.action = na.pass)

irisnbc

# Örnek 4.20: Naïve-Bayes modelinin test edilmesi
# Bağımlılık: Örnek 4.19
#
suppressPackageStartupMessages(installed <- require(caret))
if (!installed) {
     install.packages("caret", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(caret))
  }

iristestpreds <- predict(irisnbc, newdata=iristest)

irisconfmat <- table(iristest$Species, iristestpreds)
caret::confusionMatrix(irisconfmat)


# Örnek 4.21: Naïve-Bayes modelinin kaydedilmesi ve kullanılması
# Bağımlılık: Örnek 4.19
#
# Modelin kaydedilmesi
saveRDS(irisnbc, "irisnb.model")

# Kayıtlı modelin çağrılması
irisnbc <- readRDS("irisnb.model")

# Yeni veri 
flower1 <- c(5.1, 3.5, 1.4, 0.2)
flower2 <- c(7.0, 3.2, 4.7, 1.4) 
flower3 <- c(5.8, 2.7, 5.1, 1.9)
irisnew <- rbind(flower1, flower2, flower3)
colnames(irisnew) <- colnames(iris)[1:4]
irisnew

# Yeni verideki irislerin sınıflarını saptama
irisnewpreds <- predict(irisnbc, newdata=irisnew)
irisnewpreds


# Örnek 4.22: İris veri setindeki değişkenlere ait grafikler
# Bağımlılık: Örnek 4.19
#
suppressPackageStartupMessages(installed <- require(psych))
if (!installed) {
     install.packages("psych ", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(psych))
  }
psych::pairs.panels(iristrain[,-5])


# Örnek 4.23: Normallik kontrolü
# Bağımlılık: Örnek 4.19
#
shapiro.test(iristrain$Sepal.Length)
shapiro.test(iristrain$Sepal.Width)
shapiro.test(iristrain$Petal.Length)
shapiro.test(iristrain$Petal.Width)


# Örnek 4.24: Çekirdek tabanlı yoğunluklarla sınıflama
# Bağımlılık: Örnek 4.19
#
suppressPackageStartupMessages(installed <- require(naivebayes))
if (!installed) {
     install.packages("naivebayes", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(naivebayes))
  }

irisnbc  <- naive_bayes(Species ~ ., data=iristrain, 
                             laplace=0, usekernel=TRUE)

iristestpreds <- predict(irisnbc, newdata=iristest)

irisconfmat <- table(iristest$Species, iristestpreds)
caret::confusionMatrix(irisconfmat)

# Örnek 4.25: x1 ve x2 değişkenleri serpilme grafiği
x1 <- c(1,2.5,1,2.5,1.5,1.5,2,3,3,2,2.5,2)
x2 <- c(3,2.5,2,3,4,3,3.5,1,2,1.5,1.5,2)
cl <- c("2","2","1","2","2","2","2","1","1","1","1","1")
xydf <- data.frame(x1, x2, cl)
pcol <- ifelse(cl=="1", 2, 4)
ppch <- ifelse(cl=="1", 18, 19)
plot(xydf[,1], xydf[,2], col=pcol, pch=ppch, cex=3, 
          xlab="x1", ylab="x2", main="En yakın komşular")
points(2, 2, pch=18, col=3, bg=2, cex=3.5)
points(2, 2, pch="?", col=1, cex=1)
text(x1, x2, cex=0.8, 1:12, col=1, pos=1) 
text(1.65, 2, cex=0.8, "k=1", pos=2, font=2) 
text(1.5, 2.5, cex=0.8, "k=3", pos=2, font=2) 
legend(2.5, 4, legend=c("Sınıf 1", "Sınıf 2", "Yeni gözlem"),
            col=c(2, 4, 3), pch=c(18, 19, 18), cex=0.8)
if(!require(plotrix)){
     install.packages("plotrix", repos="https://cloud.r-project.org"); 
     require(plotrix)}
plotrix::draw.circle(2, 2, 0.30, border=2, lty=2, lwd=2)
plotrix::draw.circle(2, 2, 0.60, border=6, lty=3, lwd=2)


# Örnek 4.26: x1 ve x2 değişkenleri serpilme grafiği
# Bağımlılık: Örnek 4.25
#
distmat <- dist(xydf[,-3], method="euclidean")
round(distmat,2)


# Örnek 4.27: kNN ile eğitim için eğitim ve test setinin oluşturulması
# Bağımlılık: Örnek 4.25
#
set.seed(3)
n <- nrow(xydf)
xydf <- xydf[sample(n),]
set.seed(3)
trainidx <- sample(1:n, round(n*0.7))
xytrain <- xydf[trainidx, ]
xytest <- xydf[-trainidx, ]
head(xytest)


# Örnek 4.28: kNN ile eğitim (k=1)
# Bağımlılık: Örnek 4.27
#
suppressPackageStartupMessages(installed <- require(class))
if (!installed) {
     install.packages("class", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(class))
  }
xyknn_1 <- knn(train=xytrain[,-3], test=xytest[,-3],
                   cl=xytrain[,3], k=1, l=0, prob=FALSE, use.all=TRUE)

xyknn_1


# Örnek 4.29: kNN ile eğitim (k=3)
# Bağımlılık: Örnek 4.27
#
xyknn_3 <- knn(train=xytrain[,-3], test=xytest[,-3],
                   cl=xytrain[,3], k=3, l=0, prob=FALSE, use.all=TRUE)
xyknn_3
summary(xyknn_3)


# Örnek 4.30: k-NN başarımını inceleme
# Bağımlılık: Örnek 4.29
#
# Yanılgı matrisi
table(xyknn_3, xytest[,3], dnn=c("Tahmin", "Gerçek"))
# Sınıflama doğruluğu
ntrue <- sum(xytest[,3] == xyknn_3)
accuracy <- ntrue / nrow(xytest)
accuracy

# Örnek 4.31: Tahmin işlemleri
# Bağımlılık: Örnek 4.27
#
suppressPackageStartupMessages(installed <- require(class))
if (!installed) {
     install.packages("class", repos="https://cloud.r-project.org")  
     suppressPackageStartupMessages(require(class))
  }

newdata <- c(1.2, 3.4)
newpred <- knn(train = xytrain[,-3], test = newdata,
                   cl=xytrain[,3], k=3)
newpred


# Örnek 4.32: kknn paketiyle k-NN eğitimi
data(iris)
n <- dim(iris)[1]
set.seed(3)
testidx <- sample(1:n, size = floor(n/3), 
                    replace = FALSE, prob=rep(1/n, n)) 
iristrain <- iris[-testidx,]
iristest <- iris[testidx,]

if(!require(kknn)) 
    { install.packages("kknn", repo="https://cloud.r-project.org");
        require(kknn) }
iriskknn <- kknn(Species~., iristrain, iristest, distance = 2,
                     kernel = "triangular")

# Örnek 4.33: Sonuçların özetlenmesi
# Bağımlılık: Örnek 4.32
#
summary(iriskknn)
testclasses <- fitted(iriskknn)
testclasses


# Örnek 4.34: kknn nesnesi öznitelikleri
# Bağımlılık: Örnek 4.32
#
attributes(iriskknn)
head(iriskknn$prob, 5)


# Örnek 4.35: Test verisinde yanılgı matrisi ve tahmin doğruluğu
# Bağımlılık: Örnek 4.32
#
table(testclasses, iristest[,5], dnn=c("Tahmin","Gerçek"))
nfalse <- sum(iristest[,5] != testclasses)
misclassrate <- nfalse/nrow(iristest)
misclassrate
accuracy <- (nrow(iristest)-nfalse)/ nrow(iristest)
accuracy


# Örnek 4.36: Tahmin sonuçlarının görselleştirilmesi 
# Bağımlılık: Örnek 4.32
#
ppch <- as.character(as.numeric(iristest$Species))
pairs(iristest[1:4], pch=ppch, col = c(1,2)
          [(iristest$Species != testclasses)+1])

# Örnek 4.37: En iyi k-NN modelinin aranması 
# Bağımlılık: Örnek 4.32
#
iriskknn_best <- train.kknn(Species ~ ., data=iristrain, kmax = 15, 
                            kernel = c("optimal", "triangular", "rectangular", "epanechnikov"), 
                            distance = 2, kcv=10)

iriskknn_best


# Örnek 4.38: k-NN model nesnesinin öznitelikleri 
# Bağımlılık: Örnek 4.37
#
attributes(iriskknn_best) 
iriskknn_best$best.parameters 


# Örnek 4.39: caret paketiyle k-NN için çapraz doğrulama 
suppressPackageStartupMessages(installed <- require(caret))
if (!installed) {
   install.packages("caret", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caret))
}

set.seed(28)
trainidx  <- createDataPartition(iris$Species, p=0.75, list=FALSE)
iristrain <- iris[trainidx, ]
iristest  <- iris[-trainidx,]

trcont <- trainControl(
   method = "cv", number = 10, 
   savePred = TRUE, 
   classProb = TRUE)

iriskknncaret_best <- train(Species ~ ., 
                             data = iristrain, 
                             method = "kknn",
                             preProcess = c("center","scale"),
                             trControl = trcont)

iriskknncaret_best
plot(iriskknncaret_best)


# Örnek 4.40: Modelin test edilmesi 1
# Bağımlılık: Örnek 4.39
#
testpreds <- predict(iriskknncaret_best, iristest[,-5])
testpreds
cm <- table(testpreds, iristest[,5], dnn=c("Tahmin", "Gerçek"))
cm
accuracy <- (sum(diag(cm)))/sum(cm)
accuracy


# Örnek 4.41: Modelin test edilmesi 2
# Bağımlılık: Örnek 4.32
#
mcreport <- multi_class_metrics(iristest[,5], testpreds)
cm <- mcreport$confmat
cm
accuracy <- mcreport$performances$accuracy
accuracy
all_metrics <- mcreport$performances
t(all_metrics)


# Örnek 4.42: class ile iris veri setinde LVQ sınıflama
suppressPackageStartupMessages(installed <- require(rsample))
if (!installed) {
   install.packages("rsample", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rsample))
 }
data(iris)
set.seed(1919)  
trainidx <- initial_split(iris, prop=0.8, strata="Species")
iristrain <- training(trainidx)
iristest  <- testing(trainidx)

suppressPackageStartupMessages(installed <- require(class))
if (!installed) {
   install.packages("class", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(class))
 }

iriscodebook <- lvqinit(iristrain[,1:4], iristrain[,5], size = 100)
irisolvq1 <- olvq1(x=iristrain[,1:4], cl=iristrain[,5], 
                       codebk=iriscodebook, niter=1000, alpha=0.3)

trainpreds <- lvqtest(irisolvq1, iristrain[,1:4])
iristraincm <- table(trainpreds, iristrain[,5], dnn=c("Gerçek","Tahmin"))

iristraincm


# Örnek 4.43: LVQ ile tahmin ve test
# Bağımlılık: Örnek 4.42
#
testpreds <- lvqtest(irisolvq1, iristest[,1:4])
iristestcm <- table(testpreds, iristest[,5], 
                        dnn=c("Tahmin", "Gerçek"))
iristestcm
acc <- sum(testpreds==iristest[,5])/dim(iristest)[1]
acc


# Örnek 4.44: e1071 ile SVM 
suppressPackageStartupMessages(installed <- require(e1071))
if (!installed) {
   install.packages("e1071", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(e1071))
 }
data(iris)
iris$Species = as.factor(iris$Species)
set.seed(123)
tridx <- sample(nrow(iris), round(nrow(iris)*0.80))
iristrain <- iris[tridx,]
iristest <- iris[-tridx,]

# SVM modeli
irissvmmodel1 = svm(Species ~ ., data = iristrain, 
                  type="C-classification", kernel="radial",
                  cost=1, gamma=1/nrow(iristrain), probability=TRUE)
# Örnek 4.44: e1071 ile SVM 
suppressPackageStartupMessages(installed <- require(e1071))
if (!installed) {
   install.packages("e1071", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(e1071))
 }
data(iris)
iris$Species = as.factor(iris$Species)
set.seed(123)
tridx <- sample(nrow(iris), round(nrow(iris)*0.80))
iristrain <- iris[tridx,]
iristest <- iris[-tridx,]

# SVM modeli
irissvmmodel1 = svm(Species ~ ., data = iristrain, 
                  type="C-classification", kernel="radial",
                  cost=1, gamma=1/nrow(iristrain), probability=TRUE)

# Örnek 4.45: SVM sonuçlarının özetlenmesi
# Bağımlılık: Örnek 4.44
#
summary(irissvmmodel1)



# Örnek 4.46: SVM sonuç nesnesi bileşenleri
# Bağımlılık: Örnek 4.44
#
attributes(irissvmmodel1)


# Örnek 4.47: Destek vektör katsayıları
# Bağımlılık: Örnek 4.44
#
head(irissvmmodel1$SV)



# Örnek 4.48: SVM sınıflama grafiği
# Bağımlılık: Örnek 4.44
#
plot(irissvmmodel1, iristrain, Petal.Width ~ Petal.Length,
      slice=list(Sepal.Width=3, Sepal.Length=4),
      svSymbol='x', dataSymbol='o', symbolPalette=c(1,4,2),
      color.palette=cm.colors)


# Örnek 4.49: Eğitim verisinde tahmin ve yanılgı matrisi
# Bağımlılık: Örnek 4.44
#
iristrainpreds <- predict(irissvmmodel1, iristrain)
head(iristrainpreds)
# trainpreds <- fitted(irissvmmodel1) #Alternatif yol
# Yanılgı matrisi
trainconfmat <- table(Gercek=iristrain$Species,
                      Tahmin=iristrainpreds)

trainconfmat 

# Örnek 4.50: Eğitim verisinde tahmin ve yanılgı matrisi
# Bağımlılık: Örnek 4.49
#
accuracy <- sum(diag(trainconfmat)) / sum(trainconfmat)
accuracy
missclassrate <- 1-accuracy
missclassrate


# Örnek 4.51: Karar değişkenleri ve olasılıkları
# Bağımlılık: Örnek 4.44
#
probpreds <- predict(irissvmmodel1, iristrain[,-5], 
                     decision.values=TRUE)

attr(probpreds, "decision.values")[1:5,]


# Örnek 4.52: MDS ile görselleştirme
# Bağımlılık: Örnek 4.44
#
# Sınıflar renkler ile SV'ler + ile gösteriliyor
plot(cmdscale(dist(iris[,-5])),col = as.integer(iris[,5]), 
    pch = c("O","+")[1:150 %in% irissvmmodel1$index + 1])


# Örnek 4.53: SVM modelinin test edilmesi
# Bağımlılık: Örnek 4.44
#
iristestpreds <- predict(irissvmmodel1, iristest)
testconfmat <- table(iristest$Species, iristestpreds)
testconfmat 
accuracy <- sum(diag(testconfmat)) / nrow(iristest)
accuracy
accuracy <- mean(ifelse(iristest$Species == iristestpreds, 1, 0))
accuracy 


# Örnek 4.54: Farklı sınıf ağırlıkları (oranlarıyla) SVM
data(iris)
iris2 <- iris
levels(iris2$Species)[3] <- "versicolor"
summary(iris2$Species)
cweights <- 100 / table(iris2$Species)
cweights
irissvmmodel2 <- svm(Species ~ ., data = iris2, 
                    class.weights = cweights)


# Örnek 4.55: Çekirdek başarımlarının karşılaştırılması
suppressPackageStartupMessages(installed <- require(caTools))
if (!installed) {
   install.packages("caTools", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caTools))
 }
set.seed(123)
indexes <- sample.split(iris$Species, SplitRatio = 0.8)
iristrain <- subset(iris, indexes == TRUE)
iristest <- subset(iris, indexes == FALSE)
# iristrain[,1:4] <- scale(iristrain[,1:4])
# iristest[,1:4] <- scale(iristest[,1:4])
  
suppressPackageStartupMessages(installed <- require(e1071))
if (!installed) {
   install.packages("e1071", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(e1071))
 }

irissvmmodel1 <- svm(formula = Species~., data = iristrain, 
                     type='C-classification', kernel='linear')

irissvmmodel2 <- svm(formula = Species~., data = iristrain, 
                    type='C-classification', kernel='poly')

irissvmmodel3 <- svm(formula = Species~., data = iristrain, 
                    type='C-classification', kernel='sigmoid')

irissvmmodel4 <- svm(formula = Species~., data=iristrain, 
                    type='C-classification', kernel='radial')

iristestpreds1 <- predict(irissvmmodel1, type='response',
                        newdata=iristest[-5])
iristestpreds2 <- predict(irissvmmodel2, type='response',
                        newdata=iristest[-5])
iristestpreds3 <- predict(irissvmmodel3, type='response',
                        newdata=iristest[-5])
iristestpreds4 <- predict(irissvmmodel4, type='response',
                        newdata=iristest[-5])

# Yanılgı matrisleri
testconfmat1 <- table(Gercek=iristest[,5], Tahmin=iristestpreds1)
testconfmat2 <- table(Gercek=iristest[,5], Tahmin=iristestpreds2)
testconfmat3 <- table(Gercek=iristest[,5], Tahmin=iristestpreds3)
testconfmat4 <- table(Gercek=iristest[,5], Tahmin=iristestpreds4)

testconfmat1
testconfmat2
testconfmat3
testconfmat4


# Örnek 4.56: SVM parametre ayarları ve başarım grafiği
suppressPackageStartupMessages(installed <- require(caTools))
if (!installed) {
   install.packages("caTools", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caTools))
 }
set.seed(123)
indexes <- sample.split(iris$Species, SplitRatio = 0.8)
iristrain <- subset(iris, indexes == TRUE)
iristest <- subset(iris, indexes == FALSE)

iristunemodels <- tune(svm, Species~., data=iristrain,
                      ranges=list(epsilon= seq(0, 1, 0.1), cost = 2^(2:5)))
plot(iristunemodels)


# Örnek 4.57: En iyi SVM modelinin bulunması
# Bağımlılık: Örnek 4.56
#
set.seed(123)
irisbestmodel <- iristunemodels$best.model
summary(irisbestmodel)


# Örnek 4.58: En iyi SVM sınıflaması grafiği
# Bağımlılık: Örnek 4.57
#
plot(irisbestmodel, data=iristrain,
   Petal.Width~Petal.Length,
   slice = list(Sepal.Width=3, Sepal.Length=4),
   svSymbol='x', dataSymbol='o', symbolPalette=c(7,4,2),
   color.palette=terrain.colors)     

# Örnek 4.59: SVM modelinin kaydedilmesi ve yeni verilerle kullanılması
# Bağımlılık: Örnek 4.57
#
# Modelin kaydedilmesi
> setwd("D:/mldmbook/models")
> saveRDS(irisbestmodel, "irissvm.model")

# Kayıtlı modelin çağrılması
setwd("D:/mldmbook/models")
irissvmmodel <- readRDS("irissvm.model")

# Yeni veri 
flower1 <- c(5.1, 3.5, 1.4, 0.2)
flower2 <- c(7.0, 3.2, 4.7, 1.4) 
flower3 <- c(5.8, 2.7, 5.1, 1.9)
irisnew <- rbind(flower1, flower2, flower3)
colnames(irisnew) <- colnames(iris)[1:4]
irisnew
# Yeni verideki irislerin sınıflarını saptama
irisnewpreds <- predict(irissvmmodel, newdata=irisnew)
irisnewpreds


# Örnek 4.60: Çiftliklerde yönetim yazılımı kullanımı
setwd("D:/mldmbook/datasets")
fmsw <- read.table("farmsoft.txt", sep="\t", header=TRUE)
fmsw

# Örnek 4.61: Frekans tabloları oluşturma
# Bağımlılık: Örnek 4.60
table(Cins=fmsw$Cins, Yazilim=fmsw$Yazilim)
table(Egitim=fmsw$Egitim, Yazilim=fmsw$Yazilim)
table(Egitim=fmsw$Uretim, Yazilim=fmsw$Yazilim)


# Örnek 4.62: İkinci düğüm için frekans tabloları oluşturma
# Bağımlılık: Örnek 4.60
# Sol dal (Eğitim=Y) ve Sağ dal (Eğitim=L) alt kümeleri
leftnode1 <- fmsw[fmsw$Egitim=="Y",]
rightnode1 <- fmsw[fmsw$Egitim=="L",]
# Üretim için sol dal frekans tablosu
table(leftnode1$Uretim, Yazilim=leftnode1$Yazilim)
# Üretim için sağ dal frekans tablosu
table(Uretim=rightnode1$Uretim, Yazilim=rightnode1$Yazilim)
# Cins için sol dal frekans tablosu
table(leftnode1$Cins, Yazilim=leftnode1$Yazilim)
# Cins için sağ dal frekans tablosu
table(Uretim=rightnode1$Cins, Yazilim=rightnode1$Yazilim)


# Örnek 4.63: rpart ile iris verisetinde CART analizi
if(!require(caTools)){
   install.packages("caTools", repo="https://cloud.r-project.org");
   require(caTools) }
set.seed(123)
indexes <- sample.split(iris$Species, SplitRatio = 0.8)
iristrain <- subset(iris, indexes == TRUE)
iristest <- subset(iris, indexes == FALSE)

if(!require(rpart)){
   install.packages("rpart", repo="https://cloud.r-project.org");
   require(rpart) }

irisrpartmodel <- rpart(Species~., data=iristrain, method='class')
summary(irisrpartmodel)


# Örnek 4.64: Karar ağacı grafiği
# Bağımlılık: Örnek 4.63
#
plot(irisrpartmodel)
text(irisrpartmodel, pretty=0) 


# Örnek 4.65: Estetik karar ağaçları
# Bağımlılık: Örnek 4.63
#
if(!require(rattle)){
   install.packages("rattle", repo="https://cloud.r-project.org");
   require(rattle) }

fancyRpartPlot(irisrpartmodel, type=1, 
               palettes=c("PuRd", "Purples"),
               main="irisrpartmodel modeli", sub="Veri: iristrain", caption="ZC")


# Örnek 4.66: Estetik karar ağaçları
# Bağımlılık: Örnek 4.63
#
if(!require(rattle)){
   install.packages("rattle", repo="https://cloud.r-project.org");
   require(rattle) }

fancyRpartPlot(irisrpartmodel, type=5, 
               palettes=c("PuRd", "Purples"),
               main="iris tür karar ağacı", sub="irisrpartmodel", caption="ZC")


# Örnek 4.67: Estetik karar ağaçları 3
# Bağımlılık: Örnek 4.63
#
if(!require(rpart.plot)){
   install.packages("rpart.plot", repo="https://cloud.r-project.org");
   require(rpart.plot) }
rpart.plot(irisrpartmodel, type=1, extra = 3,
           main="iris tür karar ağacı", sub="irisrpartmodel")


# Örnek 4.70: CART modelinin test edilmesi
# Bağımlılık: Örnek 4.63
#
irisrpartpreds <- predict(irisrpartmodel, iristest[,-5],
                         type='class')

testconfmat <- table(Tahmin=irisrpartpreds,
                    Gercek=iristest$Species)

testconfmat
accuracy <- mean(irisrpartpreds == iristest$Species)
accuracy 


# Örnek 4.69: CART ağacının budanması
# Bağımlılık: Örnek 4.63
# 
printcp(irisrpartmodel)
# En küçük xerror hatasına sahip CP indisinin bulunması
irisopt <- which.min(irisrpartmodel$cptable[,'xerror'])
# CP değerlerinin bulunması
iriscp <- irisrpartmodel$cptable[irisopt, 'CP']
iriscp
plotcp(irisrpartmodel)

# Örnek 4.70: Budanmış modeli oluştur
# Bağımlılık: Örnek 4.63
#
irisprunnedrpartmodel <- prune(irisrpartmodel, cp=iriscp)
summary(irisprunnedrpartmodel)
if(!require(rattle)){
   install.packages("rattle", repo="https://cloud.r-project.org");
   require(rattle) }

fancyRpartPlot(irisprunnedrpartmodel, main="Budanmış Ağaç Grafiği", 
               sub="irispartmodel1", caption="iristrain", type=2)


# Örnek 4.71: Modelin test edilmesi
# Bağımlılık: Örnek 4.70
#
iristestpreds <- predict(irisprunnedrpartmodel, newdata = iristest,
                         type='class')

table(Tahmin=iristestpreds, Gerçek=iristest$Species)
missclasserror <- round(mean(iristestpreds != iristest$Species), 2)
missclasserror


# Örnek 4.72: Çapraz doğrulama ve test işlemi 
# Bağımlılık: Örnek 4.63
#
suppressPackageStartupMessages(installed <- require(caret))
if (!installed) {
   install.packages("caret", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caret))
 }
# Çapraz doğrulama
iriscv <- caret::train(Species ~ ., data=iristrain, method="rpart", 
                       trControl = trainControl(method = "cv", number=10))
irisrpartmodel <- iriscv$finalModel
# Test işlemi
iristestpreds <- predict(irisrpartmodel, newdata = iristest,
                          type='class')
# Yanılgı matrisi
table(Tahmin=iristestpreds, Gerçek=iristest$Species)
# Yanlış sınıflama oranı
missclasserror <- round(mean(iristestpreds != iristest$Species), 2)
missclasserror


# Örnek 4.73: CART modelinin kaydedilmesi ve yeni verilerle kullanılması
# Bağımlılık: Örnek 4.63, 4.72
#
# Modelin kaydedilmesi
setwd("D:/mldmbook/models")
saveRDS(irisrpartmodel, "irisrpart.model")

# Kayıtlı modelin çağrılması
setwd("D:/mldmbook/models")
irisrpartmodel <- readRDS("irisrpart.model")

# Yeni veri 
flower1 <- c(5.1, 3.5, 1.4, 0.2)
flower2 <- c(7.0, 3.2, 4.7, 1.4) 
flower3 <- c(5.8, 2.7, 5.1, 1.9)
irisnew <- as.data.frame(rbind(flower1, flower2, flower3))
colnames(irisnew) <- colnames(iris)[1:4]
irisnew
# Yeni verideki irislerin sınıflarını saptama
irisnewpreds <- predict(irisrpartmodel, newdata=irisnew, type="class")
irisnewpreds

# Örnek 4.74: iris veri setinde kesikleştirme uygulaması
suppressPackageStartupMessages(installed <- require(arules))
if (!installed) {
   install.packages("arules", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(arules))
 }

data(iris)
# Kesikleştirme
for(i in 1:4) 
   iris[,i] <- discretize(iris[,i],  method="interval", breaks=3)
head(iris,3)
tail(iris,3)

# Örnek 4.75: iris veri setinde CHAID uygulaması
# Bağımlılık: Örnek 4.74
#
if(!require(CHAID)){
   install.packages("CHAID", repo="http://R-Forge.R-project.org");
   require(CHAID) }

# Eğitim ve test verilerinin oluşturulması
set.seed(99)
trainidx <- sample(1:nrow(iris), size=100, replace=FALSE)
iristrain <- iris[trainidx,]
iristest  <- iris[-trainidx,]

# CHAID modelinin eğitimi
irischaidctrl <- chaid_control(minsplit=20, minprob=0.1)
irischaidmodel <- chaid(Species~., data=iristrain, 
                        control=irischaidctrl)

# Sonuçların incelenmesi
print(irischaidmodel)
# CHAID karar ağacının çizilmesi
plot(irischaidmodel,
    main = "CHAID Karar Ağacı\n iris veri seti – minsplit=20, minprob=0.1",
    gp = gpar(col="blue", lty=1, lwd=2 ))


# Örnek 4.76: CHAID modelinin test edilmesi ve başarımı
# Bağımlılık: Örnek 4.75, Kod 4.2
#
testpreds <- predict(irischaid, iristest[,-5])
testpreds
mcreport <- multi_class_metrics(yactual=iristest$Species, 
                               ypred=testpreds)

confmat <- mcreport$confmat
confmat
class_metrics <- mcreport$criteria
class_metrics[,1:12]
performances <- mcreport$performances
t(performances)


# Örnek 4.77: CHAID modelinin kaydedilmesi ve test işlemi
# Bağımlılık: Örnek 4.76
# Modelin diske kaydedilmesi
saveRDS(irischaid, "D:/mldmbook/models/irischaid.model")
# Modelin diskten okunması 
irischaidmodel <- readRDS("D:/mldmbook/models/irischaid.model")
irischaidmodel


# Örnek 4.78: C5.0 algoritmasıyla eğitim
suppressPackageStartupMessages(installed <- require(C50))
if (!installed) {
   install.packages("C50", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(C50))
 }

# Eğitim ve test setini oluşturma
set.seed(99)
data(iris)
trainidx <- sample(1:nrow(iris), size=100, replace=FALSE)
iristrain <- iris[trainidx,]
iristest  <- iris[-trainidx,]

# C5.0 modelini eğitme
irisc50model <- C5.0(Species ~., data=iristrain)

# Modelin gösterilmesi
summary(irisc50model)
# Sınıflama ağacının görüntülenmesi
plot(irisc50model)


# Örnek 4.79: Değişkenlerin önemlilikleri
# Bağımlılık: Örnek 4.78
#
C5imp(irisc50model, metric = "usage", pct = TRUE)


# Örnek 4.80: C5.0 nesnesi öznitelikleri
# Bağımlılık: Örnek 4.78
#
names(irisc50model)


# Örnek 4.81: C5.0 nesnesi öznitelikleri
# Bağımlılık: Örnek 4.78
#
iristestpreds <- predict(object=irisc50model, newdata=iristest, 
                         type="class")
summary(iristestpreds)
table(iristestpreds, iristest$Species)

# Örnek 4.82: C5.0 modelinin kaydedilmesi ve test işlemi
# Bağımlılık: Örnek 4.78
#
# Modelin diske kaydedilmesi
saveRDS(irisc50model, "D:/mldmbook/models/irisc50.model")
# Modelin diskten okunması 
irisc50model <- readRDS("D:/mldmbook/models/irisc50.model")
irisc50model


# Örnek 4.83: Ağırlıklar ile C5.0 eğitimi
# Bağımlılık: Örnek 4.78
#
costvalmat <- matrix(c(0, 0, 0, 0, 1, 2, 0, 0,1), nrow = 3)
colnames(costvalmat) <- c("setosa", "versicolor", "virginica")
rownames(costvalmat) <- colnames(costvalmat)
costvalmat
irisc50costmodel <- C5.0(x = iristrain[, 1:4], y = iristrain[,5], 
                          costs = costvalmat)
summary(irisc50costmodel)


# Örnek 4.84: Kural tabanlı C5.0 eğitimi
# Bağımlılık: Örnek 4.78
#
irisc50rbmodel <- C5.0(x = iristrain[, 1:4],  y = iristrain[,5],
                       rules = TRUE)
summary(irisc50rbmodel)


# Örnek 4.85: C4.5 ile eğitim
# Bağımlılık: Örnek 4.78
#
suppressPackageStartupMessages(installed <- require(RWeka))
if (!installed) {
   install.packages("RWeka", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(RWeka))
 }

# C4.5 (J48) modelini eğit
irisc45model <- J48(Species~., data=iristrain)

# Modeli göster
summary(irisc45model)
# Test verisinde tahmin yap
testpreds <- predict(irisc45model, iristest[,1:4])

# Yanılgı matrisi
table(testpreds, iristest$Species)

# Örnek 4.86: RWeka paketindeki ML araçları
suppressPackageStartupMessages(installed <- require(RWeka))
if (!installed) {
   install.packages("RWeka", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(RWeka))
 }

list_Weka_interfaces()


# Örnek 4.86: PART ile eğitim
suppressPackageStartupMessages(installed <- require(RWeka))
if (!installed) {
   install.packages("RWeka", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(RWeka))
 }
set.seed(99)
data(iris)
trainidx <- sample(1:nrow(iris), size=100, replace=FALSE)
iristrain <- iris[trainidx,]
iristest  <- iris[-trainidx,]

# PART modelini eğitme
irispartmodel <- PART(Species~., data=iristrain, 
                     control = Weka_control(R=TRUE, M=5))
summary(irispartmodel) #veya evaluate_Weka_classifier(irispartmodel)


# Örnek 4.87: Test verisinde tahmin işlemi ve yanılgı matrisi
# Bağımlılık: Örnek 4.86
#
testpreds <- predict(irispartmodel, iristest[,1:4])
# Yanılgı matrisi
table(Tahmin=testpreds, Gerçek=iristest$Species)


# Örnek 4.88: caret ile bagging CART
suppressPackageStartupMessages(installed <- require(party))
if (!installed) {
   install.packages("party", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(party))
 }
suppressPackageStartupMessages(installed <- require(caret))
if (!installed) {
   install.packages("caret", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caret))
 }

data(iris)
set.seed(123) 
trainidx <- createDataPartition(iris$Species, p=0.8, list=FALSE)
iristrain <- iris[trainidx, ]
iristest <- iris[-trainidx, ]

# Torbalama kontrolünü oluştur
bagcontrol <- bagControl(fit = ctreeBag$fit,
                          predict = ctreeBag$pred,
                          aggregate = ctreeBag$aggregate)

# Torbalama
irisbag <- bag(Species~., data=iristrain, bagControl=bagcontrol)
irisbag


# Örnek 4.89: Modelin test edilmesi
testpreds <- predict(irisbag, iristest)
iristestdf <- data.frame(iristest[,1:4], 
                         actual = iristest$Species, predicted = testpreds)
print(iristestdf)


# Örnek 4.90: caret train ile bagging CART
suppressPackageStartupMessages(installed <- require(caret))
if (!installed) {
   install.packages("caret", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caret))
 }
data(iris)
set.seed(123) 
trainidx <- createDataPartition(iris$Species, p = .8, list = F)
iristrain <- iris[trainidx, ]
iristest <- iris[-trainidx, ]
trcont <- trainControl(method = "cv", number = 10)
irisbag2 <- train(Species~., data = iristrain, method = "treebag",
                 trControl = trcont, metric = "Accuracy")
print(irisbag2)
testpreds2 <- predict(irisbag2, iristest)
iristestdf2 <- data.frame(iristest[,1:4], 
                         actual = iristest$Species, predicted = testpreds)
testpreds2 <- predict(irisbag2, iristest)
iristestdf2 <- data.frame(iristest[,1:4], 
                         actual = iristest$Species, predicted = testpreds)
print(iristestdf2)



# Örnek 4.91: RF ile sınıflama
if(!require(caTools)){
   install.packages('caTools', repo='https://cloud.r-project.org');
   require(caTools) }
set.seed(123)
trainidx <- sample.split(iris$Species, SplitRatio = 0.8)
iristrain <- subset(iris, trainidx == TRUE)
iristest <- subset(iris, trainidx == FALSE)

if(!require(randomForest)){
   install.packages('randomForest', repo='https://cloud.r-project.org');
   require(randomForest) }

irisrfmodel <- randomForest(Species~., data = iristrain,
                           ntree=500, mtry = 2, importance=TRUE)

irisrfmodel


# Örnek 4.92: Farklı mtry değerleriyle model başarımını değiştirme
# Bağımlılık: Örnek 4.91
#
acc <- c()
for (i in 2:4) {
   irisrfmodel <- randomForest(Species~., data = iristrain, 
                               ntree = 200, mtry = i, importance = TRUE)
   testpreds <- predict(irisrfmodel, iristest[,1:4], type = "class")
   acc[i-2] <- mean(testpreds == iristest$Species)
 }
acc
plot(acc, type="l", col=4, lwd=2)


# Örnek 4.93: RF modelinde değişkenlerin önemlilikleri
# Bağımlılık: Örnek 4.91
#
round(importance(irisrfmodel),3)
varImpPlot(irisrfmodel, n.var = 4, sort = TRUE,
           main = "En önemli 4 değişken")

# Örnek 4.94: Sınıfların değişkenlere kısmi bağımlılıkları
# Bağımlılık: Örnek 4.91
#
partialPlot(irisrfmodel, iristrain, Petal.Width, "setosa")


# Örnek 4.95: RF modelinin test edilmesi
# Bağımlılık: Örnek 4.91
#
testpreds <- predict(irisrfmodel, iristest[,-5])
unname(testpreds)
confmat <- table(Gerçek=iristest[,5], Tahmin=testpreds)
confmat
mcr <- 1-(sum(diag(confmat)/sum(confmat)))
mcr


# Örnek 4.96: RF modeli için caret ile çapraz doğrulama
suppressPackageStartupMessages(installed <- require(caret))
if (!installed) {
   install.packages("caret", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caret))
 }
# Eğitim ve test setini oluştur
set.seed(123)
trainidx <- createDataPartition(iris$Species, p=0.8, list=FALSE)
iristrain <- iris[trainidx, ]
iristest  <- iris[-trainidx, ]

# Kontrol parametrelerini tanımla
repcvcontrol <- trainControl(method = "repeatedcv", 
                             number = 10, repeats = 3, sampling = "smote",
                             savePredictions = TRUE, verboseIter = FALSE)
rfgrid <-  expand.grid(mtry = c(2: 4))

# Modeli eğit
set.seed(123)
irisrfcv <- train(Species ~., data = iristrain,
                 method = "rf", preProcess = c("scale", "center"),
                 fitControl = repcvcontrol, tuneGrid = rfgrid)

irisrfcv


# Örnek 4.97: RF karar ağacı
# Bağımlılık: Örnek 4.96
#
suppressPackageStartupMessages(installed <- require(quotidieR))
if (!installed) {
   if(!require(remotes)) {install.packages("remotes")}
   remotes::install_github("HanjoStudy/quotidieR")  
   suppressPackageStartupMessages(require(quotidieR))
 }
opar <- par(ask=TRUE)
quotidieR::plot_rf_tree(irisrfcv, "most")
quotidieR::plot_rf_tree(irisrfcv, "least")
par(opar)


# Örnek 4.98: RF modeli test işlemleri
# Bağımlılık: Örnek 4.96
# Test verisinde tahmin
testpreds <- predict(irisrfcv, newdata=iristest[,1:4])
# Yanılgı matrisi
confmat <- table(Tahmin=testpreds, Gerçek=iristest$Species)
confmat             
mcr <- round(mean(testpreds != iristest$Species),2)
mcr



# Örnek 4.99: RF modelinin kaydedilmesi 
# Bağımlılık: Örnek 4.96
#
# Modelin diske kaydedilmesi
saveRDS(irisrfcv, "D:/mldmbook/models/irisrf.model")
# Modelin diskten okunması 
irisrfmodel <- readRDS("D:/mldmbook/models/irisrf.model")
irisrfmodel


# Örnek 4.100: GBM uygulaması
if(!require(caTools)){
   install.packages('caTools', repo='https://cloud.r-project.org');
   require(caTools) }

if(!require(gbm)){
   install.packages('gbm', repo='https://cloud.r-project.org');
   require(gbm) }

# Eğitim ve test verilerini oluştur
data(iris)
set.seed(123)
tridx <- sample.split(iris$Species, SplitRatio = 0.8)
iristrain <- subset(iris, tridx == TRUE)
iristest <- subset(iris, tridx == FALSE)

# GBM modelini eğit
irisgbm <- gbm(
   formula = Species~., 
   data = iristrain, 
   distribution = "gaussian",
   shrinkage = 0.01,
   cv.folds = 10,
   interaction.depth = 1,
   n.minobsinnode = 10,
   n.trees = 500,
   verbose = TRUE)

# Model nesnesi özniteliklerini göster
attributes(irisgbm)



# Örnek 4.101: GBM başarımını inceleme
# Bağımlılık: Örnek 4.100
#
irisgbm_perf <- gbm.perf(irisgbm, method = "cv") # "OOB" da olabilir
irisgbm_perf


# Örnek 4.102: GBM modelinin test edilmesi
# Bağımlılık: Örnek 4.100
# Test verisinde tahmin yap
testpreds  <- predict(irisgbm, newdata=iristest, type="response",
                    n.trees=irisgbm_perf)

# Sınıf etiketlerini sapta
classpreds <- levels(iris$Species)[round(testpreds)]
classpreds
confmat <- table(Tahmin=classpreds, Gerçek=iristest$Species)
confmat          
mcr <- 1-(sum(diag(confmat)) / sum(confmat))
mcr

# Örnek 4.103: Parametre ayarlama ve en iyi modelin seçimi
# Bağımlılık: Örnek 4.100
#
suppressPackageStartupMessages(installed <- require(caret))
if (!installed) {
   install.packages("caret", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caret))
 }

trCtrl <- trainControl(method = "cv", number = 10)

gbm_grid <- expand.grid(
   interaction.depth = 2,
   n.trees = 500, 
   shrinkage = 0.1, 
   n.minobsinnode = 10
 )

set.seed(123)
irisgbmmodel <- train(Species ~ ., data = iristrain,
                     method = "gbm", trControl = trCtrl,
                     verbose = FALSE, tuneGrid = gbm_grid)

# Örnek 4.104: Modelin test edilmesi
# Bağımlılık: Örnek 4.100, 4.103
#
testpreds <- predict(irisgbmmodel, iristest)
# Yanılgı matrisi
confmat <- table(Tahmin=testpreds, Gerçek=iristest$Species)
confmat


# Örnek 4.105: Değişken önemlilikleri
# Bağımlılık: Örnek 4.103
#
summary.gbm(irisgbmmodel$finalModel)


# Örnek 4.106: Modelin kaydedilmesi ve yeni verilerin tahmini
# Bağımlılık: Örnek 4.103
# 
# Eğitilen modeli kaydet
setwd("D:/mldmbook/models")
saveRDS(irisgbmmodel, "irisgbm.model")
# Kayıtlı modelin çağrılması
setwd("D:/mldmbook/models")
irisgbmmodel <- readRDS("irisgbm.model")

# Yeni veri 
flower1 <- c(5.1, 3.5, 1.4, 0.2)
flower2 <- c(7.0, 3.2, 4.7, 1.4) 
flower3 <- c(5.8, 2.7, 5.1, 1.9)
irisnew <- as.data.frame(rbind(flower1, flower2, flower3))
colnames(irisnew) <- colnames(iris)[1:4]
irisnew <- as.matrix(irisnew)

# Yeni verideki irislerin sınıflarını saptama
newpreds <- predict(irisgbmmodel, newdata=irisnew)
newpreds



# Örnek 4.107: xgboost ile model eğitimi
# xgboost paketini kur/yükle
suppressPackageStartupMessages(installed <- require(xgboost))
if (!installed) {
   install.packages("xgboost", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(xgboost))
 }

data(iris)
predictors <- as.matrix(iris[,-5])
labels <- iris[,"Species"]

# Eğitim ve test verilerini oluştur
set.seed(123)
tridx <- sample(1:nrow(iris), nrow(iris)*0.80)
train_x   <- predictors[tridx,]
train_y  <- labels[tridx]
test_x  <- predictors[-tridx,]
test_y <- labels[-tridx]

# D matris formuna çevir
iristrain <- xgb.DMatrix(data = train_x, label = train_y)
iristest <- xgb.DMatrix(data = test_x, label = test_y)

# İzleme listesi tanımla
wl <- list(train=iristrain, test=iristest)

# Modeli eğit
irisxgbmodel <- xgb.train(data = iristrain, max.depth = 3, 
                         nrounds = 100, watchlist = wl)

# En düşük hata veren ağacı bul
evallog <- irisxgbmodel$evaluation_log
minetree <- which.min(evallog$test_rmse)
minetree 

plot(evallog$test_rmse, type="l", col=4, lwd=2,
     xlab="Tur", ylab="RMSE", 
     ylim=c(0, max(evallog$train_rmse, evallog$test_rmse)))
lines(evallog$train_rmse, type="l", col=2, lwd=2)
legend("topright", legend=c("test", "eğitim"),
      col=c(4,2), lty=c(1,1), lwd=c(2,2))


# Örnek 4.108: En düşük test RMSE'si veren modelin oluşturulması
# Bağımlılık: Örnek 4.107
#
irisxgbmodel <- xgboost(data = iristrain, max.depth = 3, 
                       nrounds = minetree, verbose = 0)

irisxgbmodel 


# Örnek 4.109: Model eğitim sonuçlarının dökümü
# Bağımlılık: Örnek 4.107
#
xgb.dump(irisxgbmodel, with_stats = TRUE)



# Örnek 4.110: Model parametrelerinin tanımlanması
# Bağımlılık: Örnek 4.107
#
# D matriste multi:softmax için sınıf etikerleri 0,1,2… olmalıdır
iristrain <- xgb.DMatrix(data = train_x, label = as.numeric(train_y)-1)
iristest <- xgb.DMatrix(data = test_x, label = as.numeric(test_y)-1)
nc <- length(unique(train_y))
nr <- 100 

# Parametre listesi tanımla
irisparams <- list(
  "num_class" = nc,
  "eval_metric" = "merror",
  "objective" = "multi:softmax",
  "eta" = 0.1,
  "max.depth" = 3,
  "gamma" = 0,
  "subsample" = 1,
  "colsample_bytree" = 1,
  "preProc" = c("center", "scale")
 )

# Modeli parametre listesiyle eğit
irisxgbmodel <- xgboost(
   data = iristrain, 
   params=irisparams, 
   nrounds = nr, 
   verbose = 0
 )

irisxgbmodel

# Minimum eğitim hatası veren ağacın bulunması 
evallog <- irisxgbmodel$evaluation_log
minetree <- which.min(evallog$train_merror)
minetree


# Örnek 4.111: XGBoost ağaç grafiği
# Bağımlılık: Örnek 4.110
#
xgb.plot.tree(model = irisxgbmodel, trees = minetree)


# Örnek 4.112: Ağaç grafiğin farklı formatlarda diske kaydedilmesi
# Bağımlılık: Örnek 4.110
#
suppressPackageStartupMessages(installed <- require(DiagrammeR))
if (!installed) {
   install.packages("DiagrammeR", repo="https://cloud.r-project.org")
   require(DiagrammeR) }
suppressPackageStartupMessages(installed <- require(DiagrammeRsvg))
if (!installed) {
   install.packages("DiagrammeRsvg", repo="https://cloud.r-project.org")
   require(DiagrammeRsvg) }
suppressPackageStartupMessages(installed <- require(rsvg))
if (!installed) {
   install.packages("rsvg", repo="https://cloud.r-project.org")
   require(rsvg) }

# file_type olarak pdf, png, svg, ps atanabilir
xgbtreegraph <- xgb.plot.tree(
   model = irisxgbmodel,
   trees = minetree,
   plot_width = 1200, plot_height = 1200,
   render = FALSE)

# Grafiği dosyaya kaydet
export_graph(xgbtreegraph, 
             file_name="irisxgbagac.svg", file_type="svg",
             width = 1200, height = 1200)



# Örnek 4.113: Çapraz doğrulama ve test işlemi 
# Bağımlılık: Örnek 4.107
#
suppressPackageStartupMessages(installed <- require(caret))
if (!installed) {
   install.packages("caret", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caret))
 }
# Parametre ayarlama ve Çapraz doğrulama
tune_grid <- expand.grid(
  nrounds = seq(from=50, to=200, by=25),
  max_depth = c(2, 3, 4, 5),
  eta = c(0.025, 0.05, 0.1, 0.3),
  gamma = 0,
  colsample_bytree = c(0.7, 1),
  min_child_weight = 1,
  subsample = c(0.8, 1)
 )

train_ctrl <- caret::trainControl(
  method = "cv",
  number = 5, 
  verboseIter = FALSE, 
  allowParallel = TRUE
 )

irisxgbtunedmodels <- caret::train(
   x = train_x,
   y = train_y,
   trControl = train_ctrl,
   tuneGrid = tune_grid,
   method = "xgbTree",
   preProc = c("center", "scale"),
   verbosity = 0
 )

# En iyi model
irisxgbmodel <- irisxgbtunedmodels$finalModel
irisxgbmodel


# Örnek 4.114: Modeldeki değişkenlerin önemlilikleri
# Bağımlılık: Örnek 4.113
#
# Özelliklerin adları
fnames <-  colnames(train_x)
# Önemlilik matrisi
importance <- xgb.importance(
   feature_names = fnames, 
   model = irisxgbmodel)

head(importance)


# Örnek 4.115: Önemlilik grafikleri
# Bağımlılık: Örnek 4.113
#
suppressPackageStartupMessages(installed <- require(Ckmeans.1d.dp))
if (!installed) {
   install.packages("Ckmeans.1d.dp", repo="https://cloud.r-project.org")
   require(Ckmeans.1d.dp) }

# Önemlilik grafiği
impgraph <- xgb.ggplot.importance(importance)
print(impgraph)
# Alternatif grafik
barplot(importance$Gain, xlab="Önem kazancı", ylab="Frekans")



# Örnek 4.116: Test verisinde tahmin işlemleri
# Bağımlılık: Örnek 4.113
#
# Test verisinde tahmin
preds <- predict(irisxgbmodel, newdata=iristest)
nc <- length(unique(test_y))
clabels <- levels(test_y)
preds <- matrix(preds, ncol=nc, byrow=T)
classpreds <- as.factor(clabels[apply(preds,1,which.max)])

# Tahmin sınıflarıyla test verisi
testpreds <- data.frame(test_x, actual=test_y, predicted=classpreds)
head(testpreds,3)

# Yanılgı matrisi
confmat <- table(Tahmin=testpreds$predicted, Gerçek=testpreds$actual)
confmat             

# Yanlış sınıflama oranı
mcr <- round(mean(testpreds$actual != testpreds$predicted),2)
mcr


# Örnek 4.117: Modelin kaydedilmesi ve yeni verilerin tahmini
# Bağımlılık: Örnek 4.113
# 
# Eğitilen modeli kaydet
setwd("D:/mldmbook/models")
xgb.save(irisxgbmodel, "xgboost.model")
# Kayıtlı modelin çağrılması
setwd("D:/mldmbook/models")
irisxgbmodel <- xgb.load("xgboost.model")

# Yeni veri 
flower1 <- c(5.1, 3.5, 1.4, 0.2)
flower2 <- c(7.0, 3.2, 4.7, 1.4) 
flower3 <- c(5.8, 2.7, 5.1, 1.9)
irisnew <- as.data.frame(rbind(flower1, flower2, flower3))
colnames(irisnew) <- colnames(iris)[1:4]
irisnew <- as.matrix(irisnew)

# Yeni verideki irislerin sınıflarını saptama
newpreds <- predict(irisxgbmodel, newdata=irisnew, type="class")
clabels <- c("setosa", "versicolor", "virginica")
newpreds <- matrix(newpreds, ncol=nc, byrow=TRUE)
classpreds <- as.factor(clabels[apply(newpreds,1,which.max)])
classpreds



# Örnek 4.118: MASS ile LDA 1
if(!require(rsample)){
   install.packages("rsample", repo="https://cloud.r-project.org");
   require(rsample) }

set.seed(1)  
trainidx <- initial_split(iris, prop=0.8, strata="Species")
iristrain <- training(trainidx)
iristest  <- testing(trainidx)

if(!require(MASS)){
   install.packages("MASS", repo="https://cloud.r-project.org");
   require(MASS) }

irislda <- lda(formula = Species ~ .,  data = iristrain, 
               prior = c(1/3, 1/3, 1/3))
irislda


# Örnek 4.119: MASS ile LDA 1 – Sonuçların incelenmesi
# Bağımlılık: Örnek 4.118
#
attributes(irislda)
irislda$prior
irislda$counts
irislda$means
irislda$scaling
irislda$svd


# Örnek 4.120: LDA sonuçlarının görselleştirmesi 1
# Bağımlılık: Örnek 4.118
#
plot(irislda, col=as.numeric(iristrain$Species))


# Örnek 4.121: LDA sonuçlarının görselleştirmesi 2
# Bağımlılık: Örnek 4.118
#
irisldapreds <- predict(irislda)
plot(irisldapreds$x[,1],irisldapreds$x[,2],
     col=rainbow(8)[as.numeric(iristrain$Species)],
     pch=19, xlab="LD1", ylab="LD2") 
text(irisldapreds$x[,1],irisldapreds$x[,2], 
    cex=0.7, pos=4, col=1)
legend("bottomright", legend=c("setosa", "versicolor", "virginica"),
    col=rainbow(8)[1:3], pch=rep(19,3))


# Örnek 4.122: LDA sonuçlarının görselleştirmesi 3
# Bağımlılık: Örnek 4.118
#
plot(irislda, dimen=1, type="both") 



# Örnek 4.123: LDA sonuçlarının görselleştirmesi 4
# Bağımlılık: Örnek 4.118
#
ldahist(data = irisldapreds$x[,1], g=iristrain$Species)
ldahist(data = irisldapreds$x[,2], g=iristrain$Species)


# Örnek 4.124: MASS ile LDA 2
if(!require(rsample)){
   install.packages("rsample", repo="https://cloud.r-project.org");
   require(rsample) }
set.seed(1)  
trainidx <- initial_split(iris, prop=0.8, strata="Species")
iristrain <- training(trainidx)
iristest  <- testing(trainidx)

if(!require(MASS)){
   install.packages("MASS", repo="https://cloud.r-project.org");
   require(MASS) }

irisldacv <- lda(formula = Species ~ .,  data = iristrain, 
                 prior = c(1/3, 1/3, 1/3), CV=TRUE)

attributes(irisldacv)
head(irisldacv$posterior)
head(irisldacv$class)


# Örnek 4.125: MASS ile LDA 3 – Test ve tahmin işlemi
# Bağımlılık: Örnek 4.119
#
testpreds <- predict(irislda, newdata=iristest[,-5])$class
testpreds
confmat <- table(Tahmin=testpreds, Gerçek=iristest[,5])
confmat
sum(diag(confmat))/sum(confmat) # Doğruluk


# Örnek 4.126: MASS ile QDA 1
if(!require(rsample)){
   install.packages("rsample", repo="https://cloud.r-project.org");
   require(rsample) }
set.seed(1)  
trainidx <- initial_split(iris, prop=0.8, strata="Species")
iristrain <- training(trainidx)
iristest  <- testing(trainidx)
if(!require(MASS)){
   install.packages("MASS", repo="https://cloud.r-project.org");
   require(MASS) }

irisqda <- qda(formula = Species ~ .,  data = iristrain, 
               prior = c(1/3, 1/3, 1/3))

attributes(irisqda)
irisqda$prior
irisqda$counts
irisqda$means


# Örnek 4.127: MASS ile QDA 2 – Test ve tahmin işlemi
testpreds <- predict(irisqda, newdata=iristest[,-5])$class
testpreds
confmat <- table(Tahmin=testpreds, Gerçek=iristest[,5])
confmat
sum(diag(confmat))/sum(confmat) # Doğruluk




# Örnek 4.128: mda ile MDA 
if(!require(rsample)){
   install.packages("rsample", repo="https://cloud.r-project.org");
   require(rsample) }
set.seed(1)  
trainidx <- initial_split(iris, prop=0.8, strata="Species")
iristrain <- training(trainidx)
iristest  <- testing(trainidx)

if(!require(mda)){
   install.packages("mda", repo="https://cloud.r-project.org");
   require(mda) }

irismda <- mda(Species~., data=iristrain, 
               prior = c(1/3, 1/3, 1/3))

irismda



# Örnek 4.129: mda ile MDA – Sonuçların incelenmesi
ls(irismda)
irismda$means
irismda$confusion



# Örnek 4.130: mda ile MDA – Test ve tahmin işlemi
testpreds <- predict(irismda, newdata=iristest[,1:4])
testpreds
confmat <- table(Tahmin=testpreds, Gerçek=iristest[,5])
confmat
sum(diag(confmat))/sum(confmat) # Doğruluk



# Örnek 4.131: mda ile FDA 
if(!require(rsample)){
   install.packages("rsample", repo="https://cloud.r-project.org");
   require(rsample) }
set.seed(1)  
trainidx <- initial_split(iris, prop=0.8, strata="Species")
iristrain <- training(trainidx)
iristest  <- testing(trainidx)

if(!require(mda)){
   install.packages("mda", repo="https://cloud.r-project.org");
   require(mda) }

irisfda <- fda(Species~., data=iristrain)
irisfda
ls(irisfda)
irisfda$confusion




# Örnek 4.132: mda ile FDA – Test ve tahmin işlemi
testpreds <- predict(irisfda, newdata=iristest[,1:4])
testpreds
confmat <- table(Tahmin=testpreds, Gerçek=iristest[,5])
confmat
sum(diag(confmat))/sum(confmat) # Doğruluk


# Örnek 4.133: klaR ile RDA 
if(!require(rsample)){
   install.packages("rsample", repo="https://cloud.r-project.org");
   require(rsample) }
set.seed(123)  
trainidx <- initial_split(iris, prop=0.8, strata="Species")
iristrain <- training(trainidx)
iristest  <- testing(trainidx)

if(!require(klaR)){
   install.packages("klaR", repo="https://cloud.r-project.org");
   require(klaR) }

irisrda <- rda(Species~., data=iristrain, 
               gamma = 0.05, lambda = 0.2,
               prior = c(1/3, 1/3, 1/3))

irisrda
ls(irisrda)
irisrda$error.rate


# Örnek 4.135: klaR ile RDA – Test ve tahmin işlemi
testpreds <- predict(irisrda, newdata=iristest[,1:4])
testpreds$class
confmat <- table(Tahmin=testpreds$class, Gerçek=iristest[,5])
confmat
sum(diag(confmat))/sum(confmat) # Doğruluk



# Örnek 4.136: DA yöntemlerinin karşılaştırılması
# Bağımlılık: Kod 2.1
# Paketlerin kurulması ve yüklenmesi
paketler <- c("MASS", "mda", "klaR", "rsample")
paketkur(paketler)
require(MASS); require(mda); require(klaR); require(rsample)

set.seed(567)  
trainidx <- initial_split(iris, prop=0.8, strata="Species")
iristrain <- training(trainidx)
iristest  <- testing(trainidx)

# DA modellerinin test edilmesi 
# LDA model başarımını hesaplama
ldamodel <- MASS::lda(Species~., data=iristrain)   # Model eğitimi
ldapreds <- predict(ldamodel, newdata=iristest)    # Tahmin
ldaacc <- mean(ldapreds$class == iristest$Species) # Doğruluk

# QDA model başarımını hesaplama
qdamodel <- MASS::qda(Species~., data=iristrain)   # Model eğitimi
qdapreds <- predict(qdamodel, newdata=iristest)    # Tahmin
qdaacc <- mean(qdapreds$class == iristest$Species) # Doğruluk

# RDA model başarımını hesaplama
rdamodel <- klaR::rda(Species~., data=iristrain)   # Model eğitimi
rdapreds <- predict(rdamodel, newdata=iristest)    # Tahmin
rdaacc <- mean(rdapreds$class == iristest$Species) # Doğruluk

# MDA model başarımını hesaplama
mdamodel <- mda::mda(Species~., data=iristrain)    # Model eğitimi
mdapreds <- predict(mdamodel, newdata=iristest)    # Tahmin
mdaacc <- mean(mdapreds == iristest$Species)       # Doğruluk

# FDA model başarımını hesaplama
fdamodel <- mda::fda(Species~., data=iristrain)   # Model eğitimi
fdapreds <- predict(fdamodel, newdata=iristest)   # Tahmin
fdaacc <- mean(fdapreds == iristest$Species)      # Doğruluk

accuracies <- data.frame(LDA=ldaacc, QDA=qdaacc, 
                         RDA=rdaacc, MDA=mdaacc, FDA=fdaacc)

accuracies 



# Örnek 4.137: NNS ile iris veri setinde sınıflama 1
if(!require(rsample)){
   install.packages("rsample", repo="https://cloud.r-project.org");
   require(rsample) }
set.seed(1)  
trainidx <- initial_split(iris, prop=0.8, strata="Species")
iristrain <- training(trainidx)
iristest  <- testing(trainidx)
if(!require(NNS)){
   install.packages("NNS", repo="https://cloud.r-project.org");
   require(NNS) }
irisnns <- NNS.reg(x=iristrain[,1:4], y=iristrain[,5], 
                   order="max", type="class", residual.plot=TRUE, ncores=1) 



# Örnek 4.138: NNS ile iris veri setinde sınıflama 2
# Bağımlılık: Örnek 4.137
attributes(irisnns)
irisnns$rhs.partitions
trainpreds <- irisnns$Fitted.xy$y.hat
trainpreds
plot(iristrain[,1:4], col= trainpreds, pch=20, cex=1.2)

irisnns$R2


# Örnek 4.139: NNS ile test işlemi
# Bağımlılık: Örnek 4.137
irisnns <- NNS.reg(x=iristrain[,1:4], y=iristrain[,5], 
                   point.est=iristest[,1:4], 
                   order="max", type="class", ncores=1)

testpreds <- irisnns$Point.est
testpreds
testpreds <- levels(iris$Species)[testpreds]
table(Tahmin=testpreds, Gerçek=iristest[,5])



# Örnek 4.140: NNS ile boosting 1
if(!require(rsample)){
   install.packages("rsample", repo="https://cloud.r-project.org");
   require(rsample) }
set.seed(123)  
trainidx <- initial_split(iris, prop=0.8, strata="Species")
iristrain <- training(trainidx)
iristest  <- testing(trainidx)
if(!require(NNS)){
   install.packages("NNS", repo="https://cloud.r-project.org");
   require(NNS) }

irisnnsboost <- NNS.boost(
   IVs.train = iristrain[, 1:4], 
   DV.train = iristrain[, 5],
   IVs.test = iristest[, 1:4],
   type = "class",
   epochs = 100, learner.trials = 100, 
   status = FALSE, balance = TRUE)


# Örnek 4.141: NNS ile boosting sonuçlarının incelenmesi ve değerlendirme
# Bağımlılık: Örnek 4.140
testpreds <- irisnnsboost$results
testpreds
irisnnsboost$feature.weights
testpreds <- levels(iris$Species)[testpreds]
table(Tahmin=testpreds, Gerçek=iristest[,5])
mean(testpreds == iristest[, 5])


# Örnek 4.142: NNS.stack çapraz doğrulama
if(!require(rsample)){
   install.packages("rsample", repo="https://cloud.r-project.org");
   require(rsample) }
set.seed(123)  
trainidx <- initial_split(iris, prop=0.8, strata="Species")
iristrain <- training(trainidx)
iristest  <- testing(trainidx)
if(!require(NNS)){
   install.packages("NNS", repo="https://cloud.r-project.org");
   require(NNS) }

irisnnsstack <- NNS.stack(
   IVs.train = iristrain[, 1:4], 
   DV.train = iristrain[, 5],
   IVs.test = iristest[, 1:4],
   type = "class",
   obj.fn = expression( mean(round(predicted) == actual) ),
   balance = TRUE, ncores=1)

testpreds <- irisnnsstack$reg
testpreds
testpreds <- levels(iris$Species)[testpreds]

table(Tahmin=testpreds, Gerçek=iristest[,5])
mean(testpreds == iristest[, 5]) # Doğruluk



# Örnek 4.143: MARS ile sınıflama uygulaması
suppressPackageStartupMessages(installed <- require(rsample))
if (!installed) {
   install.packages("rsample", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rsample))
 }

suppressPackageStartupMessages(installed <- require(earth))
if (!installed) {
   install.packages("earth", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(earth))
 }

set.seed(567)  
trainidx <- initial_split(iris, prop=0.8, strata="Species")
iristrain <- training(trainidx)
iristest  <- testing(trainidx)

irismars <- earth(Species~., data=iristrain, degree=1,
                 pmethod="backward", nprune=5) 

summary(irismars)



# Örnek 4.144: MARS modeli test işlemi
# Bağımlılık: Örnek 4.143
#
predmat <- predict(irismars, newdata=iristest[,1:4])
clabels <- levels(iristest$Species)
testpreds <- clabels[apply(predmat, 1, which.max)]
confmat <- table(Tahmin=testpreds, Gerçek=iristest[,5])
confmat
sum(diag(confmat))/sum(confmat) # Doğruluk



# Örnek 4.145: En iyi MARS modelinin çapraz doğrulamayla bulunması
# Bağımlılık: Örnek 4.143
#
suppressPackageStartupMessages(installed <- require(rsample))
if (!installed) {
   install.packages("rsample", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rsample))
 }

suppressPackageStartupMessages(installed <- require(earth))
if (!installed) {
   install.packages("earth", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(earth))
 }

suppressPackageStartupMessages(installed <- require(caret))
if (!installed) {
   install.packages("caret", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caret))
 }

set.seed(123)  
trainidx <- initial_split(iris, prop=0.8, strata="Species")
iristrain <- training(trainidx)
iristest  <- testing(trainidx)

# caret ile çapraz doğrulama
irismarsmodel <- train(
   x = subset(iristrain, select= -Species),
   y = iristrain$Species,
   method = "earth",
   trControl = trainControl(method="cv", number=5),
   tuneGrid = expand.grid(
     degree = 1:3, 
     nprune = round(seq(2, 10, length.out=5))
   )
 )

# En iyi model
irimarsmodel <- irismarsmodel$finalModel 
irismarsmodel$bestTune


# Örnek 4.144: Model doğruluğunun terim sayısına göre değişimi 
# Bağımlılık: Örnek 4.144
ggplot(irismarsmodel)



# Örnek 4.145: MARS modelinin test işlemi
# Bağımlılık: Örnek 4.143
#
iristestpreds <- predict(irismarsmodel, iristest, type="prob")
classes <- levels(iristest$Species)
iristestpreds <- classes[apply(iristestpreds, 1, which.max)]
trainconfmat <- table(Tahmin=iristestpreds, Gerçek=iristest$Species)
trainconfmat
accuracy <- sum(diag(trainconfmat)) / sum(trainconfmat)
round(accuracy, 2)
mcr <- 1-accuracy
round(mcr, 2)




# Örnek 4.146: neuralnet ile sınıflama
data(iris)
# iris verisetini yeniden ölçeklendir
colmaxs <- apply(iris[,-5], 2, max)
colmins <- apply(iris[,-5], 2, min)
irisscaled <- iris
# Min-max normalleştirmesi
irisscaled[,-5] <- as.data.frame(scale(iris[,-5], 
                                center = colmins, scale = colmaxs - colmins))
# Eğitim ve test setlerini oluştur
set.seed(123)
trainidx <- sample(nrow(irisscaled),nrow(irisscaled)*0.80)
iristrain <- irisscaled[trainidx,]
iristest <- irisscaled[-trainidx,]

# YSA modeli eğitimi
# Paketi yükle ve modeli eğit
if(!require(neuralnet)) {
   install.packages('neuralnet', repo='https://cloud.r-project.org');
   require(neuralnet) }

formula <- as.formula("Species ~ .")
irisnnet <- neuralnet(formula, data=iristrain, 
                     hidden=c(5), algorithm = 'rprop+', 
                     linear.output=FALSE, likelihood = TRUE)

# Örnek 4.147: neuralnet nn nesnesi bileşenleri
# Bağımlılık: Örnek 4.146
#
attributes(irisnnet)
# neuralnet sonuç matrisi
irisnnet$result.matrix


# Örnek 4.148: YSA grafiği
# Bağımlılık: Örnek 4.146
#
plot(irisnnet)


# Örnek 4.149: YSA Modeli ile tahminleme
# Bağımlılık: Örnek 4.146
#
testpreds <- compute(irisnnet, iristest)
head(testpreds$net.result)
clabels <- c('setosa','versicolor','virginica')
classpreds <- clabels[apply(testpreds$net.result, 1, which.max)]
classpreds
confmat <- table(Tahmin=classpreds, Gerçek=iristest$Species)
confmat         
acc <- sum(diag(confmat))/sum(confmat)
acc




# Örnek 4.150: YSA Modeli ile tahminleme
# Bağımlılık: Örnek 4.146
#
irisnnet <- neuralnet(Species ~ 
                      Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, 
                      data=iristrain, hidden=c(10, 5), rep=4, 
                      err.fct='ce', linear.output=FALSE, 
                      lifesign='minimal', stepmax=1000000,
                      threshold=0.001)
plot(irisnnet, rep='best')



# Örnek 4.152: İleri düzey YSA grafikleri
# Bağımlılık: Örnek 4.151
#
if(!require(NeuralNetTools)) {
   install.packages(' NeuralNetTools', 
                       repo='https://cloud.r-project.org');
   require(NeuralNetTools) }
plotnet(irisnnet, 
        circle_col = list('orange', 'green', 'blue'), 
        bord_col='black', alpha.val=0.6)


#Örnek 4.153: YSA modelinin kaydedilmesi ve geri yüklenmesi
# Bağımlılık: Örnek 4.151
#
# Modeli kaydet
save(irisnnet, file = "irisnnetmodel.Rda")
# Modeli geri yükle
irisnnet <- load("irisnnetmodel.Rda")




# Örnek 4.154: caret ile sınıflayıcı başarımlarını karşılaştırma
suppressPackageStartupMessages(installed <- require(caret))
if (!installed) {
   install.packages("caret", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caret))
 }

# Veriyi oku ve hazırla
repo <- "https://archive.ics.uci.edu"
path <- "/ml/machine-learning-databases/wine/wine.data"
url <- paste0(repo, path)
df <- read.csv(url, head=TRUE)
df <- df[sample(nrow(df)), ]  #veriyi karıştır
# Değişkenlere ad ver
colnames(df) <- c("variety", "alco", "macid", "ash", "alca", "mg",
                 "phe", "flav", "nonflav", "proant", "colint", "hue", "OD", "prol")
df$variety <- as.factor(paste0("V", df$variety))
head(df, 3)
tail(df, 3)

# Eğitim ve test verilerini hazırla
set.seed(123)
trainidx <- createDataPartition(y=df$variety, p=0.7, list=FALSE)
traindata <- df[trainidx,]
testdata  <- df[-trainidx,]

# caret eğitim kontrolünü tanımla
trc <- trainControl(method="repeatedcv", number=5, repeats=3)

# Algoritmalara göre modeli eğit
elapsedtime <- numeric(9)

# Naive-Bayes sınıflayıcısı
set.seed(28)
start <- Sys.time()
rcvNB <- train(variety~., data=traindata, method="nb", 
              trControl=trc)
elapsedtime[1] <- as.integer(Sys.time()) - as.integer(start)
# kNN sınıflayıcısı
set.seed(28)
start <- Sys.time()
rcvKNN <- train(variety~., data=traindata, method="knn", 
              trControl=trc)
elapsedtime[2] <- as.integer(Sys.time()) - as.integer(start)
# LVQ sınıflayıcısı
set.seed(28)
start <- Sys.time()
rcvLVQ <- train(variety~., data=traindata, method="lvq", 
               trControl=trc)
elapsedtime[3] <- as.integer(Sys.time()) - as.integer(start)
# Radyal SVM sınıflayıcısı
set.seed(28)
start <- Sys.time()
rcvRadSVM <- train(variety~., data=traindata, method="svmRadial", 
                  trControl=trc)
elapsedtime[4] <- as.integer(Sys.time()) - as.integer(start)
# CART sınıflayıcısı
set.seed(28)
start <- Sys.time()
rcvCART <- train(variety~., data=traindata, method="rpart", 
                trControl=trc)
elapsedtime[5] <- as.integer(Sys.time()) - as.integer(start)
# LDA sınıflayıcısı
set.seed(28)
start <- Sys.time()
rcvLDA <- train(variety~., data=traindata, method="lda", 
              trControl=trc)
elapsedtime[6] <- as.integer(Sys.time()) - as.integer(start)
# RF sınıflayıcısı
set.seed(28)
start <- Sys.time()
rcvRF <- train(variety~., data=traindata, method="rf", 
              trControl=trc)
elapsedtime[7] <- as.integer(Sys.time()) - as.integer(start)
# GBM sınıflayıcısı
set.seed(28)
start <- Sys.time()
rcvGBM <- train(variety~., data=traindata, method="gbm", 
              trControl=trc, verbose=FALSE)
elapsedtime[8] <- as.integer(Sys.time()) - as.integer(start)
# XGBoost sınıflayıcısı
set.seed(28)
start <- Sys.time()
rcvXGB <- train(variety~., data=traindata, method="xgbTree", 
              trControl=trc, verbosity=0, metric = "Accuracy")
elapsedtime[9] <- as.integer(Sys.time()) - as.integer(start)


# Örnek 4.155: Çapraz doğrulama ile başarımların incelenmesi
# Bağımlılık: Örnek 4.154
#
oopt <- options(digits=3, scipen=0)

# Yeniden örneklemeleri birleştirme
performances <- resamples(list(NBayes=rcvNB, KNN=rcvKNN, 
                               LVQ=rcvLVQ, RadSVM=rcvRadSVM, CART=rcvCART, LDA=rcvLDA,
                               RF=rcvRF, GBM=rcvGBM,  XGBM=rcvXGB))

summary(performances)


# Örnek 4.156: Çapraz doğrulama ile başarımların sıralanması
# Bağımlılık: Örnek 4.155
#
performancessummary <- summary(performances)
accuracy <- performancessummary$statistics$Accuracy
accuracy[order(accuracy[,"Median"], decreasing = TRUE),]
# Başarım sıralaması
rank(-accuracy[,"Max."], ties.method="average")

# Örnek 4.157: Eğitim sürelerine göre sıralama
# Bağımlılık: Örnek 4.155
#
names(elapsedtime) <- rownames(accuracy)

elapsedtime
rank(elapsedtime, ties.method="average")



# Örnek 4.158: Başarımların kutu-bıyık grafikleriyle karşılaştırılması
# Bağımlılık: Örnek 4.155
#
bwplot(performances)


# Örnek 4.159: Başarımların nokta grafikleriyle karşılaştırılması
# Bağımlılık: Örnek 4.155
#
dotplot(performances)



# Örnek 4.160: Başarımların istatistik testlerle karşılaştırılması
# Bağımlılık: Örnek 4.155
#
options(digits=1, scipen=0)
# Başarımlar arası farklılıklar
perfdifs <- diff(performances)
# Farklar ve farklıkların önemlilikleri
summary(perfdifs, digits=1)




# Örnek 4.161: Test verisinde başarımların karşılaştırılması 1
# Bağımlılık: Örnek 4.154
#
knntestpreds <- predict(rcvKNN, newdata=testdata) 
knntestperf <- confusionMatrix(data=knntestpreds, testdata$variety)
knntestperf


# Örnek 4.162: Test verisinde başarımların karşılaştırılması 2
# Bağımlılık: Örnek 4.154, 4.161
#
testaccuracies <- numeric(9); testkappas <- numeric(9)

names(testaccuracies) <- c("NBayes", "KNN", "LVQ",
                             +   "RadSVM", "CART", "LDA", "RF", "GBM", "XGBM")
names(testkappas) <- names(testaccuracies)

testpreds <- predict(rcvNB, newdata=testdata) 
testperf <- confusionMatrix(data=testpreds, testdata$variety)
testaccuracies[1] <- testperf$overall[1]
testkappas [1] <- testperf$overall[2]

testpreds <- predict(rcvKNN, newdata=testdata) 
testperf <- confusionMatrix(data=testpreds, testdata$variety)
testaccuracies[2] <- testperf$overall[1]
testkappas [2] <- testperf$overall[2]

testpreds <- predict(rcvLVQ, newdata=testdata) 
testperf <- confusionMatrix(data=testpreds, testdata$variety)
testaccuracies[3] <- knntestperf$overall[1]
testkappas [3] <- knntestperf$overall[2]

testpreds <- predict(rcvRadSVM, newdata=testdata) 
testperf <- confusionMatrix(data=testpreds, testdata$variety)
testaccuracies[4] <- testperf$overall[1]
testkappas [4] <- testperf$overall[2]

testpreds <- predict(rcvCART, newdata=testdata) 
testperf <- confusionMatrix(data=testpreds, testdata$variety)
testaccuracies[5] <- testperf$overall[1]
testkappas [5] <- testperf$overall[2]

testpreds <- predict(rcvLDA, newdata=testdata) 
testperf <- confusionMatrix(data=testpreds, testdata$variety)
testaccuracies[6] <- testperf$overall[1]
testkappas [6] <- knntestperf$overall[2]

testpreds <- predict(rcvRF, newdata=testdata) 
testperf <- confusionMatrix(data=testpreds, testdata$variety)
testaccuracies[7] <- testperf$overall[1]
testkappas [7] <- knntestperf$overall[2]

testpreds <- predict(rcvGBM, newdata=testdata) 
testperf <- confusionMatrix(data=testpreds, testdata$variety)
testaccuracies[8] <- testperf$overall[1]
testkappas [8] <- knntestperf$overall[2]

testpreds <- predict(rcvXGB, newdata=testdata) 
testperf <- confusionMatrix(data=testpreds, testdata$variety)
testaccuracies[9] <- testperf$overall[1]
testkappas [9] <- knntestperf$overall[2]

testperformances <- rbind(testaccuracies, testkappas)
rownames(testperformances) <- c("Acc","Kappa")
testperformances

# Görselleştirme
opar <- par(mfrow=c(2,1))
barplot(sort(testperformances[1,], decreasing=TRUE), 
       ylim=c(0,1), col=rainbow(9),
       xlab="Sınıflayıcılar", ylab="Doğruluk", main="Başarım Karşılaştırması")
barplot(sort(testperformances[2,], decreasing=TRUE), 
       ylim=c(0,1), col=rainbow(9),
       xlab="Sınıflayıcılar", ylab="Kappa")
par(opar)


# Örnek 4.163: Tam bağlantı yöntemiyle hiyerarşik kümeleme
# 
data(iris)

# Standartlaştırma
irisdf <- iris[, 1:4]
irisdf <- scale(irisdf, center=TRUE, scale=TRUE)

# Uzaklıklar matrisi
irisdist <- dist(irisdf, method="euclidean")

# Hiyerarşik tam bağlantı kümelemesi
irishc <- hclust(irisdist, method="complete")

# Kümeleme sonuç nesnesi bileşenleri
attributes(irishc)



# Örnek 4.164: Tam bağlantı yöntemiyle oluşturulan dendrogram
# Bağımlılık: Örnek 4.163
#
plot(irishc)


# Örnek 4.165: Kofenetik korelasyon
# Bağımlılık: Örnek 4.163
#
# Kofenetik uzaklık
cophdist <- cophenetic(irishc)

# Kofenetik uzaklık ve orijinal uzaklıklar arasındaki korelasyon
cor(irisdist, cophdist)
irishc2 <- hclust(irisdist, method = "average")
cor(irisdist, cophenetic(irishc2))


# Örnek 4.166: Küme ağacının kesilmesi ve gözlemlerin kümelere atanması
# Bağımlılık: Örnek 4.163
#
# Ağacı 3 küme olacak şekilde kes
kumeler <- cutree(irishc, k = 3)

head(kumeler, 5)
# Kümelerdeki gözlem sayıları
table(kumeler)
# İkinci kümedeki gözlemlerin listelenmesi
rownames(iris)[kumeler == 2]
plot(irishc, labels=FALSE, hang=-1)
rect.hclust(irishc, k=3)



# Örnek 4.167: Küme ağacının factoextra ile çizilmesi
# Bağımlılık: Örnek 4.163, 4.165
#
suppressPackageStartupMessages(installed <- require(factoextra))
if (!installed) {
   install.packages("factoextra", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(factoextra))
 }

fviz_dend(irishc2, cex=0.8, k=3)

kumeler <- hcut(irisdf, k=3, hc_method="complete")

# Dendrogramı çiz
fviz_dend(kumeler, show_labels=FALSE, rect=TRUE)



# Örnek 4.168: Küme yapılarının görselleştirilmesi
# Bağımlılık: Örnek 4.163
suppressPackageStartupMessages(installed <- require(factoextra))
if (!installed) {
   install.packages("factoextra", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(factoextra))
 }

kumeler <- cutree(irishc, k=3)
fviz_cluster(list(data = irisdf, cluster=kumeler), 
             palette = "jco", ggtheme = theme_classic())


# Örnek 4.169: Kümeleme geçerliliği tablosu
# Bağımlılık: Örnek 4.163
table(iris$Species, kumeler)



# Örnek 4.170: Uzaklıklar matrisi ısı haritası
# Bağımlılık: Örnek 4.163
suppressPackageStartupMessages(installed <- require(factoextra))
if (!installed) {
   install.packages("factoextra", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(factoextra))
 }
irisdist <- dist(irisdf, method="euclidean")
fviz_dist(irisdist)




# Örnek 4.171: DIANA ile ayırıcı kümeleme
suppressPackageStartupMessages(installed <- require(cluster))
if (!installed) {
   install.packages("cluster", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(cluster))
 }

data(iris)
irisdiana <- diana(x=iris, stand=TRUE, metric="euclidean")

suppressPackageStartupMessages(installed <- require(factoextra))
if (!installed) {
   install.packages("factoextra", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(factoextra))
 }

fviz_dend(irisdiana, k=3, rect = TRUE,
         cex = 0.6, color_labels_by_k = TRUE)


# Örnek 4.172: DIANA ile küme yapısı
# Bağımlılık: Örnek 4.171
kumeler <- cutree(irisdiana, k=3)
kümeler
fviz_cluster(list(data = iris[,1:4], cluster=kumeler), 
             palette = "jco", ggtheme = theme_classic())



# Örnek 4.173: K-ortalamalar ile kümeleme
data(iris)
irisdf <- iris[,-5]

set.seed(01)
iriskmc <- kmeans(x=irisdf, centers=3, algorithm="MacQueen", 
                 iter.max=10, nstart=15, trace=FALSE)

iriskmc
kumeler <- iriskmc$cluster
head(kumeler)


# Örnek 4.174: K-ortalamalar kümeleme sonucunu görselleştirme 1
# Bağımlılık: Örnek 4.173
#
plot(irisdf[,1], irisdf[,3], col=kumeler, pch=19,
      xlab="Sepal.Width", ylab="Petal.Length", main="İris kümeleri")
points(iriskmc$centers[,c(1,3)], col=1:3, pch=19, cex=2)


# Örnek 4.175: K-ortalamalar kümeleme sonucunu görselleştirme 2
# Bağımlılık: Örnek 4.173
#
pairs(irisdf, col=kumeler, pch=19, main="İris kümeleri")



# Örnek 4.176. K-ortalamalar kümeleme sonucunu görselleştirme 3
# Bağımlılık: Örnek 4.173
#
if(!require(factoextra)) 
  { install.packages("factoextra", repo="https://cloud.r-project.org");
    require(factoextra) }	
fviz_cluster(iriskmc, irisdf, palette="Set2", ggtheme=theme_minimal())


# Örnek 4.177: K-ortalamalar kümeleme sonucunu görselleştirme 4
# Bağımlılık: Örnek 4.173
#
if(!require(factoextra)) 
  { install.packages("factoextra", repo="https://cloud.r-project.org");
      require(factoextra) }
fviz_cluster(iriskmc, irisdf, ellipse.type = "norm")



# Örnek 4.177: Farklı küme sayıları için K-ortalamalar kümelemesi
data(iris)
irisdf <- iris[,1:4]
iriskmc2 <- kmeans(irisdf, centers=2, nstart=50)
iriskmc3 <- kmeans(irisdf, centers=3, nstart=50)
iriskmc4 <- kmeans(irisdf, centers=4, nstart=50)
iriskmc5 <- kmeans(irisdf, centers=5, nstart=50)

# Küme grafikleri
if(!require(factoextra)) 
    { install.packages("factoextra", repo="https://cloud.r-project.org");
      require(factoextra) }
plot1 <- fviz_cluster(iriskmc2, geom="point", data=irisdf) + ggtitle("k=2")
plot2 <- fviz_cluster(iriskmc3, geom="point", data=irisdf) + ggtitle("k=3")
plot3 <- fviz_cluster(iriskmc3, geom="point", data=irisdf) + ggtitle("k=4")
plot4 <- fviz_cluster(iriskmc4, geom="point", data=irisdf) + ggtitle("k=5")
if(!require(gridExtra)) 
  { install.packages("gridExtra", repo="https://cloud.r-project.org");
    require(gridExtra) }

grid.arrange(plot1, plot2, plot3, plot4, nrow=2)


# Örnek 4.178: Küme sayısının saptanması 1
data(iris)
irisdf <- iris[,1:4]
# 
if(!require(fpc)) 
  { install.packages("fpc", repo="https://cloud.r-project.org");
      require(fpc) }

fpc::prediction.strength(irisdf, Gmin=2, Gmax=10, M=10, cutoff=0.8)



# Örnek 4.179: Küme sayısının saptanması 2
data(iris)
irisdf <- iris[,1:4]
irisdist <- dist(irisdf, method="euclidean")
resmat <- matrix(nrow=9, ncol=4)
colnames(resmat) <- c("k","Ort.Sil.", "Dunn", "Q")

if(!require(fpc)) 
  { install.packages("fpc", repo="https://cloud.r-project.org");
      require(fpc) }

for(k in 2:10){
   iriskmc <- kmeans(irisdf, centers=k, nstart=20)
   clstats <- cluster.stats(irisdist, iriskmc$cluster)
   resmat[k-1,1] <- k
   resmat[k-1,2] <- clstats$avg.silwidth
   resmat[k-1,3] <- clstats$dunn   
   resmat[k-1,4] <- 1-(iriskmc$tot.withinss/iriskmc$totss)   
 }
resmat
opar <- par(mfrow=c(1,2))
plot(resmat[,c(1,2)], type="l", lwd=2, col=4, 
     xlab='Küme sayısı', ylab = 'Silüet genişliği',
     main='Silüet Genişliği')
plot(resmat[,c(1,3)], type="l", lwd=2, col=4, 
     xlab='Küme sayısı', ylab = 'Dunn indeksi',
     main='Dunn İndeksi')
par(opar)


# Örnek 4.180: Küme sayısının saptanması 3
data(iris)
irisdf <- iris[,1:4]

suppressPackageStartupMessages(installed <- require(NbClust))
if (!installed) {
   install.packages("NbClust", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(NbClust))
 }

set.seed(123) 
iriskmc <-NbClust(irisdf, distance = "euclidean", 
                 min.nc=2, max.nc=10, method = "kmeans", index = "all")  

t(iriskmc$Best.nc)
# Önerilen küme sayıları
table(iriskmc$Best.nc[1,]>0)



# Örnek 4.181: Küme sayısının saptanması 3
data(iris)
irisdf1 <- iris[,1:4]
set.seed(123) 
irisdf2 <- irisdf[sample(nrow(iris)), ]
irisdf3 <- scale(irisdf1)
irisdf4 <- scale(irisdf2)

suppressPackageStartupMessages(installed <- require(NbClust))
if (!installed) {
   install.packages("NbClust", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(NbClust))
 }

set.seed(123) 
iriskmc1 <-NbClust(irisdf1, distance = "euclidean", 
                   min.nc=2, max.nc=10, method = "kmeans", index = "all")  
set.seed(123) 
iriskmc2 <-NbClust(irisdf2, distance = "euclidean",
                   min.nc=2, max.nc=10, method = "kmeans", index = "all")  
set.seed(123) 
iriskmc3 <-NbClust(irisdf3, distance = "euclidean",
                   min.nc=2, max.nc=10, method = "kmeans", index = "all")  
set.seed(123) 
iriskmc4 <-NbClust(irisdf4, distance = "euclidean",
                   min.nc=2, max.nc=10, method = "kmeans", index = "all")  

optk1 <- iriskmc1$Best.nc[1,]
optk2 <- iriskmc2$Best.nc[1,]
optk3 <- iriskmc3$Best.nc[1,]
optk4 <- iriskmc4$Best.nc[1,]

optkdf <- data.frame(optk1, optk2, optk3, optk4)
optkdf <- optkdf[optkdf[,1] > 0,]
colnames(optkdf) <- c("O","K","OÖ","KÖ")
optkdf
opar <- par(mfrow=c(2,2))
for(j in 1:4)
    barplot(table(optkdf[,j]), col=(2:20), main=colnames(optkdf)[j])
par(opar)


# Örnek 4.182. K-medoid ile kümeleme
suppressPackageStartupMessages(installed <- require(cluster))
if (!installed) {
   install.packages("cluster", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(cluster))
 }

data(iris)
# Veriler sıralı olduğu için karıştır
idx <- sample(nrow(iris))
irisdf <- iris[idx,]

iriskmedc <- pam(irisdf, k=3)
iriskmedc


# Örnek 4.183: K-medoid kümeleme sonuçlarını görselleştirme
# Bağımlılık: Örnek 4.182
#
pairs(irisdf[, -5], pch=20, col=iriskmedc$cluster)

opar <- par(mfrow=c(2,1))
plot(iriskmedc, which.plots = 1)
plot(iriskmedc, which.plots = 2)
par(opar)



# Örnek 4.184: Ortalama silüet genişliği ile k'nın saptanması
data(iris)
irisdf <- iris[,1:4]
nc <- 2:10
ASW <- numeric(length(nc))
for (k in nc)
   ASW[k - 1] <- pam(irisdf, k=k)$silinfo$avg.width
plot(nc, ASW, pch=20, col=4, type="b", 
     xlab="k", main="Ort. Silüet Genişliği")


# Örnek 4.185: Spektral kümeleme
suppressPackageStartupMessages(installed <- require(kknn))
if (!installed) {
   install.packages("kknn", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(kknn))
 }

data(iris)
irisdf <- iris[,1:4]
irissc <- specClust(data=irisdf, centers=3, nn=5, method="random-walk")
irissc



# Örnek 4.186: Spektral kümeleme sonuçlarının görselleştirme
# Bağımlılık: Örnek 4.185
#
table(iris[,5], irissc$cluster, dnn=c("Gerçek", "Tahmin")) 
pcol <- as.character(as.numeric(iris$Species))
pairs(iris[1:4], pch = pcol, col = c(3,2,4)[irissc$cluster])


# Örnek 4.187: FCM ile kümeleme
suppressPackageStartupMessages(installed <- require(ppclust))
if (!installed) {
   install.packages("ppclust", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(ppclust))
 }
data(iris)
irisdf <- iris[,1:4]

irisfcm <- fcm(x=irisdf, centers=3, m=2, dmetric="sqeuclidean",
               alginitv="kmpp", alginitu="imembrand", nstart=15)

summary(irisfcm)




# Örnek 4.188: Bulanık üyelikler matrisi
# Bağımlılık: Örnek 4.187
#
membmat <- irisfcm$u
membmat
cluster <- apply(membmat, 1, which.max)
unname(cluster)




# Örnek 4.189: FCM sonuçlarının görselleştirilmesi 1
# Bağımlılık: Örnek 4.187
#
plotcluster(irisfcm, cp=1, trans=TRUE)



# Örnek 4.190: FCM sonuçlarının görselleştirilmesi 2
# Bağımlılık: Örnek 4.187
#
iriskmc <- ppclust2(irisfcm, "kmeans")
fviz_cluster(iriskmc, data = irisdf, ellipse.type = "convex",
             palette = "jco", repel = TRUE)



# Örnek 4.192: Bulanık noktaların aranması
# Bağımlılık: Örnek 4.187
#
U <- round(irisfcm$u, 3)
k <- ncol(U)
nuniq <- (apply(U, 1, function(x) length(unique(x))))
fpoints <- which(nuniq < k)
cl <- irisfcm$cluster
cl[fpoints] <- k+1
pc <- rep(20, nrow(U))
pc[fpoints] <- 3
plot(irisdf[,3], irisdf[,4], col=cl, pch=pc)




# Örnek 4.193: FCM için bulanık değerlendirme ölçütleri
# Bağımlılık: Örnek 4.187
#
suppressPackageStartupMessages(installed <- require(fcvalid))
if (!installed) {
  if(!require(devtools))
    install.packages("devtools", repos="https://cloud.r-project.org") 
  install_github("zcebeci/fcvalid")
  suppressPackageStartupMessages(require(fcvalid))
}

xb(irisfcm) 
kwon(irisfcm) 
allindexes(irisfcm)


# Örnek 4.194: FCM için optimal küme sayısının saptanması
# Bağımlılık: Örnek 4.193
data(iris)
irisdf <- iris[,1:4]

options(scipen=100, digits=3, width=120)
k1 <- 2
k2 <- 6
indnames <- c("PC","MPC","PE","XB","K", "TSS", "CL", "FS",
               "PBMF","FSIL","FHV", "APD")
indvals <- matrix(ncol=length(indnames), nrow=k2-k1+1)
colnames(indvals) <- indnames
rownames(indvals) <- paste0("k=",k1:k2)
i <- 1
for(k in k1:k2){
   resfcm <- fcm(x=irisdf, centers=k, nstart=5)
   indvals[i,1] <- pc(resfcm)
   indvals[i,2] <- mpc(resfcm)
   indvals[i,3] <- pe(resfcm)
   indvals[i,4] <- xb(resfcm)
   indvals[i,5] <- kwon(resfcm)
   indvals[i,6] <- tss(resfcm)
   indvals[i,7] <- cl(resfcm)
   indvals[i,8] <- fs(resfcm)
   indvals[i,9] <- pbm(resfcm)
   indvals[i,10] <- si(resfcm)$sif
   indvals[i,11] <- fhv(resfcm)
   indvals[i,12] <- apd(resfcm)
   i <- i+1
 }

print(t(indvals))




# Örnek 4.195: UPFC kümeleme uygulaması
suppressPackageStartupMessages(installed <- require(ppclust))
if (!installed) {
   install.packages("ppclust", repos="https://cloud.r-project.org") 
   suppressPackageStartupMessages(require(ppclust))
 }

data(iris)
irisdf <- iris[,1:4]

irisupfc <- upfc(irisdf, centers=3, m=2, eta=2, nstart=5)

summary(irisupfc)
plotcluster(irisupfc, trans=TRUE)



# Örnek 4.196: UPFC bulanık üyelik ve tipiklik matrisleri
# Bağımlılık: Örnek 4.195
#
head(irisupfc$u, 3)
head(irisupfc$t, 3)


# Örnek 4.197: Spiral şekilli küme benzetimi
if(!require(mlbench)) {
  install.packages('mlbench', repo='https://cloud.r-project.org');
  require(mlbench) }
set.seed(12)
spirals <- mlbench.spirals(1000, 1.5, 0.05)
sdata <- spirals$x
colnames(sdata) <- c("x1", "x2")
head(sdata, 3)
plot(spirals, cex=0.8, pch=19, main="spirals")


# Örnek 4.198: spiral veri setinde K-ortalamalar kümelemesi
# Bağımlılık: Örnek 4.197
#
spiralskmc <- kmeans(sdata, centers=2, nstart=5)

if(!require(factoextra)) {
   install.packages('factoextra', repo='https://cloud.r-project.org');
   require(factoextra) }

fviz_cluster(spiralskmc, sdata, geom="point", 
             ellipse=FALSE, show.clust.cent=TRUE,
             palette="Set1", ggtheme=theme_classic())


# Örnek 4.199: spiral veri setinde dbscan kümelemesi
# Bağımlılık: Örnek 4.197
#
if(!require(dbscan)) {
  install.packages('dbscan', repo='https://cloud.r-project.org');
  require(dbscan) }

spiralsdbscanc <- dbscan(sdata, eps=0.11, minPts=5)

spiralsdbscanc
fviz_cluster(spiralsdbscanc, sdata, geom="point", 
             ellipse=FALSE, show.clust.cent=FALSE,
             palette="Set1", ggtheme=theme_classic())


# Örnek 4.200: dbscan kümeleme nesnesi bileşenleri
# Bağımlılık: Örnek 4.199
#
attributes(spiralsdbscanc)
spiralclusters <- spiralsdbscanc$cluster
head(spiralclusters)
noises <- which(spiralclusters==0)
noises
if(!require(cluster)) {
  install.packages('cluster', repo='https://cloud.r-project.org');
  require(cluster) }
spiralsdist <- dist(sdata)
# Silüet ölçütünü hesapla
spiralssilhouette <- silhouette(spiralclusters, spiralsdist)

# Silüet grafiği çiz
fviz_silhouette(spiralssilhouette)

# Yanılgı matrisi
table(spiralclusters, spirals$class)


# Örnek 4.201: Optimal eps değerinin bulunması
# Bağımlılık: Örnek 4.197
#
kNNdistplot(sdata, k=5)
abline(h=0.11, lty=2, lwd=1, col="red")


# Örnek 4.202: Farklı epsilonlara göre dbscan denemeleri 
epsilons <- seq(0.01, 0.5, by=0.01)
par(ask=TRUE)
for (e in epsilons) {
  spiraldbsanc <- dbscan(sdata, eps=e, minPts=5)
  caption <- paste("Epsilon=", e)
 clplot <- fviz_cluster(spiraldbsanc, sdata,
                          ellipse=FALSE, geom="point", main=caption)
  print(clplot)
 }
par(ask=FALSE)


# Örnek 4.203: OPTICS ile kümeleme 
# Bağımlılık: Örnek 4.197
#
if(!require(dbscan)) {
  install.packages('dbscan', repo='https://cloud.r-project.org');
  require(dbscan) }

spiraloptics <- optics(sdata, eps = 10,  minPts = 10)

attributes(spiraloptics)
head(spiraloptics$order)
plot(spiraloptics)

# Kümelerin saptanması
kumeler <- extractDBSCAN(spiraloptics, eps_cl = 0.01)
res <- extractXi(kumeler, xi = 0.025)
plot(res)
hullplot(sdata, res)
# Xi cluster structure
res$clusters_xi


# Örnek 4.204: iris verisinde küme yapısının incelenmesi
if(!require(ggpubr)){
   install.packages('ggpubr', repo='https://cloud.r-project.org');
   require(ggpubr) }
ggscatter(iris, x="Sepal.Width", y="Sepal.Length")+
  geom_density2d() # 2B yoğunluk ekle


# Örnek 4.205: iris verisetinde MBC uygulaması
if(!require(mclust)){
   install.packages('mclust', repo='https://cloud.r-project.org');
   require(mclust) }

data(iris)

irismbc <- Mclust(iris[,-5])  #Kümeleme işlemi
summary(irismbc) # Sonuçları göster


# Örnek 4.206. MBC kümeleme sonuçlarının parametrelerle listelenmesi
# Bağımlılık: Örnek 4.205
#
summary(irismbc, parameters = TRUE)


# Örnek 4.207: MBC sonuçlarının görselleştirilmesi 1
# Bağımlılık: Örnek 4.205
#
plot(irismbc)


# Örnek 4.208: MBC sonuçlarının görselleştirilmesi 2
# Bağımlılık: Örnek 4.205
#
BIC <- mclustBIC(iris[,-5])
plot(BIC)


# Örnek 4.209: MBC sonuçlarının görselleştirilmesi 3
# Bağımlılık: Örnek 4.205
#
plot(irismbc, what='classification')



# Örnek 4.210: Optimal küme saysının bulunması
suppressPackageStartupMessages(installed <- require(mclust))
if (!installed) {
   install.packages("mclust", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(mclust))
 }

data(iris)
irisdf <- iris[, -5]
irismbc <- Mclust(irisdf, G = c(2:12))
summary(irismbc)




# Örnek 4.211: mclust nesnesi bileşenleri
# Bağımlılık: Örnek 4.210
attributes(irismbc)
irismbc$modelName
irismbc$G
irismbc$classification




# Örnek 4.212: Yanılgı matrisi ve küme yapıları
# Bağımlılık: Örnek 4.210
#
table(iris$Species, irismbc$classification)           
clPairs(iris[,1:4], iris[,5]) 


# Örnek 4.213: Karma veri setlerinde k-prototip kümelemesi
# Bağımlılık: Örnek 4.217
if(!require(clustMixType)){
   install.packages("clustMixType", repos="cloud.r-project.org",
                       dependencies=TRUE)
   require(clustMixType)}
# Veri dosyasını okuma
setwd("D:/mldmbook/datasets")
chicksdf <- read.table("chicks_sim.dat", sep="\t", head=TRUE)
# Karakter türündeki verileri faktöre çevir
chicksdf$c1 <- as.factor(chicksdf$c1)
chicksdf$c2 <- as.factor(chicksdf$c2)
chicksdf$c3 <- as.factor(chicksdf$c3)
chicksdf$c4 <- as.factor(chicksdf$c4)
chicksdf$o1 <- ordered(as.factor(chicksdf$o1))

# lamda değeri tahmini
l <- lambdaest(chicksdf)

# Küme sayısı (k) tahmini
twss <- c()
k <- c(2:10)
for(j in k){
   kpres <- kproto(chicksdf, k=j, nstart=5, verbose=F)
   twss[j-1] <- kpres$tot.withinss
 }
plot(1:9, twss, type="b", lwd=2, col=4,
     ylab = "Küme-içi varyans", xlab = "Küme sayısı", 
     main = "Optimal K")

# K-prototip kümelemesi
chickskpro <- kproto(chicksdf, k=5, lambda = l, 
                      iter.max = 100, nstart = 10, na.rm = TRUE, verbose=TRUE)



# Örnek 4.214: Kümeleme sonuçlarının incelenmesi
# Bağımlılık: Örnek 4.213
summary(chickskpro)
attributes(chickspro)
head(chickskpro$cluster,20)
opar <- par(mfrow=c(4,2))
clprofiles(chickskpro, x=chicksdf, vars=c(1:8))
par(opar)


# Örnek 4.215: k-prototip ile diğer algoritmaları karşılaştırma
# Bağımlılık: Örnek 4.213
if(!require(klaR)){
   install.packages("klaR", repo="https://cloud.r-project.org");
   require(klaR) }
suppressPackageStartupMessages(installed <- require(clusteval))
if (!installed) {
   if(!require(devtools))
     install.packages("devtools", repos="https://cloud.r-project.org") 
   install_github("ramhiser/clusteval")
   suppressPackageStartupMessages(require(clusteval))
 }

kpres <- kproto(chicksdf, k=5, verbose=F) # Tüm değişkenlerle
kmres <- kmeans(chicksdf[,6:8], 5) # Sayısal değişkenlerle 
kmores <- kmodes(chicksdf[,1:5], 5) # Kategorik değişkenlerle
cluster_similarity(kpres$cluster, kmres$cluster, similarity = "rand")
cluster_similarity(kpres$cluster, kmores$cluster, similarity = "rand")
cluster_similarity(kmores$cluster, kmres$cluster, similarity = "rand")


# Örnek 4.216: 6 küme ve 2000 gözlem içeren veri seti benzetimi
suppressPackageStartupMessages(installed <- require(MixSim))
if (!installed){
    install.packages("MixSim", repo="https://cloud.r-project.org", 
                        dependecies = TRUE)
    suppressPackageStartupMessages(require(MixSim)) } 

k <- 6 # Küme sayısı
p <- 4 # Değişken (özellik) sayısı
ns <- 2000 # Örneklem büyüklüğü
sr <- 0.05 # Örneklem oranı
or <- 0.01 # Çakışan gözlem oranı
mor <- 0.1 # Maksimum çakışma oranı
#sn <- 1122  # Rastlantısal sayı çekirdeği tohumu
  
# Mixture model benzetimi
A <- MixSim(BarOmega=or, MaxOmega=mor, K=k, p=p)

# Paralel dağılım grafiği
pdplot(A$Pi, A$Mu, A$S, MaxInt=0.5)

#set.seed(sn)
# Benzetim verisi çerçevesi oluştur
simdata <- simdataset(n=ns, A$Pi, A$Mu, A$S)
simdf <- cbind(simdata$X, cl=simdata$id)
rm(simdata)
# Veriye satır ve sütun adları ata
rownames(simdf) <- simdf[,p+1]
colnames(simdf) <- c(paste0("x",1:p), "cl")
head(simdf[sample(1:ns, 4),])

# Kümeleri serpilme grafiğinde göster
pairs(simdf[,1:p], col=simdf[,(p+1)])
# Veriyi disk dosyasına kaydet
setwd("D:/mldmbook/datasets")
write.table(simdf, "sim_k5_p4_2000.dat", 
               sep="\t", col.names=TRUE, row.names=TRUE, quote=FALSE)


# Örnek 4.217: Farklı ölçeklerden değişkenlerle karma veri seti üretimi
n <- 500
set.seed(123)
simdf <- data.frame(
   c1 = sample(LETTERS[1:4], n, replace = TRUE),  
   c2 = sample(month.abb[1:12], n, replace = TRUE), 
   c3 = sample(c("E","D"), n, replace = TRUE),
   c4 = sample(letters[1:8],n, replace = TRUE),
   o1 = sample(c("D", "O", "Y"), n, replace=TRUE),
   x1 = runif(n, 1, 5),  
   x2 = sample(5:25, n, replace = TRUE),
   x3 = rnorm(n, mean=10, sd=5)
 )
# Karakter türündeki verileri faktöre çevir
simdf$c1 <- as.factor(simdf$c1)
simdf$c2 <- as.factor(simdf$c2)
simdf$c3 <- as.factor(simdf$c3)
simdf$c4 <- as.factor(simdf$c4)
simdf$o1 <- ordered(as.factor(simdf$o1))

str(simdf)
head(simdf)
setwd("D:/mldmbook/datasets")
write.table(simdf, "chicks_sim.dat", 
           sep="\t", col.names=TRUE, row.names=TRUE, quote=FALSE)


# Örnek 4.218: Kümeleme yöntemlerini karşılaştırma
if(!require(cluster)) {
  install.packages('cluster', repo='https://cloud.r-project.org');
  require(cluster) }

if(!require(ppclust)) {
  install.packages('ppclust', repo='https://cloud.r-project.org');
  require(ppclust) }

# Veriyi oku ve hazırla
repo <- "https://archive.ics.uci.edu"
path <- "/ml/machine-learning-databases/wine/wine.data"
url <- paste0(repo, path)
df <- read.csv(url, head=TRUE)
df <- df[sample(nrow(df)), ]  #veriyi karıştır

# Değişkenlere ad ver
colnames(df) <- c("variety", "alco", "macid", "ash", "alca", "mg",
                 "phe", "flav", "nonflav", "proant", "colint", "hue", "OD", "prol")
df$variety <- as.factor(paste0("V", df$variety))
winedf <- df[,-1]

head(winedf, 3)
tail(winedf, 3)
winedist <- dist(winedf)
sil <- c()
for(i in 2:8){
   res <- kmeans(winedf, centers=i, nstart=5)
   silw <- silhouette(res$cluster, winedist)
   silw <- mean(silw[, 3])
   sil <- c(sil, silw)
 }
perfsil <- t(sil)

sil <- c()
for(i in 2:8){
   res <- pam(winedf, k=i, nstart=5)
   silw <- silhouette(res$cluster, winedist)
   silw <- mean(silw[, 3])
   sil <- c(sil, silw)
 }
perfsil <- rbind(perfsil, sil)

sil <- c()
for(i in 2:8){
   res <- fcm(winedf, centers=i)
   silw <- silhouette(res$cluster, winedist)
   silw <- mean(silw[, 3])
   sil <- c(sil, silw)
 }

perfsil<- rbind(perfsil, sil)
colnames(perfsil) <- paste0("k=", 2:8)
rownames(perfsil) <- c("K-means", "K-medois", "FCM")
perfsil


# Örnek 4.219: Birliktelik kuralı için veri benzetimi
uretimdf <- data.frame(portakal=c(T,F,F,T,T,F,T,T,T), 
                       limon = c(T,T,T,T,F,T,F,T,T), mandarin=c(F,F,T,F,T,T,T,T,T),
                       bugday = c(F,T,F,T,F,F,F,F,F), misir=c(T,F,F,F,F,F,F,T,F))
str(uretimdf)
head(uretimdf)
setwd("D:/mldmbook/datasets")
write.table(uretimdf, "uretimcesit.dat", sep="\t",
           col.names=T, row.names=F, quote=F)


# Örnek 4.220: apriori ile birliktelik kurallarının belirlenmesi
# Bağımlılık: Örnek 4.219
#
suppressPackageStartupMessages(installed <- require(arules))
if (!installed) {
   install.packages("arules", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(arules))
 }

uretimarules <- apriori(uretimdf, control = list(verbose=FALSE),
                       parameter = list(minlen=3, maxlen=5, supp=0.2, conf=0.1, target="rules"))

attributes(uretimarules)
uretimarules@quality



# Örnek 4.221: Birliktelik kurallarının incelenmesi
# Bağımlılık: Örnek 4.220
#
inspect(uretimarules)
uretimarules1 <- sort(uretimarules, by="lift")
inspect(uretimarules1)


# Örnek 4.222: arulesViz ile görselleştirme 1
# Bağımlılık: Örnek 4.220
#
if(!require(arulesViz)){
   install.packages("arulesViz", repo="https://cloud.r-project.org");
   require(arulesViz) }
plot(uretimarules)



# Örnek 4.223: arulesViz ile görselleştirme 2
# Bağımlılık: Örnek 4.220
#
if(!require(arulesViz)){
   install.packages("arulesViz", repo="https://cloud.r-project.org");
   require(arulesViz) }
plot(uretimarules, method="graph")




# Örnek 4.224: arulesViz ile görselleştirme 3
# Bağımlılık: Örnek 4.216
#
if(!require(arulesViz)){
   install.packages("arulesViz", repo="https://cloud.r-project.org");
   require(arulesViz) }
plot(uretimarules, method="grouped")



# Örnek 4.225: Kuralları budama
# Bağımlılık: Örnek 4.220
#
nrarules <- uretimarules[!is.redundant(uretimarules,
                                       measure = "confidence", confint = FALSE, level = 0.95,
                                       smoothCounts = 1)]
inspect(nrarules)
imeasures <- interestMeasure(nrarules, c("support", "confidence",
                                         "leverage", "lift","coverage",  "conviction", "cosine",
                                         "chiSquare",  "oddsRatio"), uretimdf)
round(imeasures,3)



# Örnek 4.226: Eclat algoritmasıyla kural belirleme
# Bağımlılık: Örnek 4.220
#
uretimtract <- as(uretimdf,"transactions")
inspect(uretimtract) 
uretimisets <- eclat(uretimtract, control=list(verbose=F),
                    parameter = list(supp = 0.1, minlen=2, maxlen = 5))
inspect(uretimisets)
head(as(items(uretimisets), "list"))
plot(uretimisets)



# Örnek 4.227: Kuralların oluşturulması
# Bağımlılık: Örnek 4.226
#
uretimerules <- ruleInduction(uretimisets, 
                             transactions = uretimtract, confidence = 0.9, verbose = TRUE) 

uretimerules <- sort(uretimerules, by="lift") 
inspect(uretimerules[1:5]) 
plot(uretimerules, method="graph") 



# Örnek 4.229: Kuralları budama
# Bağımlılık: Örnek 4.226
#
nrarules <- uretimerules[!is.redundant(uretimerules,
                                       measure = "confidence", confint = TRUE, level = 0.95,
                                       smoothCounts = 1)]

inspect(nrarules)
imeasures <- interestMeasure(nrarules, c("support", "confidence",
                                         "leverage", "lift","coverage",  "conviction", "cosine",
                                         "chiSquare"), uretimdf)

round(imeasures,3)



# Örnek 4.230: PCA uygulaması
data(iris) 
irisdf <- iris[,1:4]

irispca <- prcomp(irisdf, center=TRUE, scale.=TRUE)

summary(irispca)
biplot(irispca, scale=0,
       col=c('blue', 'red'), cex=c(0.6, 1),
       xlab='Bileşen 1', ylab='Bileşen 2',
       main='PCA Grafiği', expand=1)


# Örnek 4.231: PCA sonuç nesnesi bileşenleri
# Bağımlılık: Örnek 4.230
#
ls(irispca)
irispca$center
irispca$scale
head(irispca$rotation)
head(irispca$x, 3)



# Örnek 4.232: Temel bileşenlerin varyansı açıklama oranları
# Bağımlılık: Örnek 4.230
#
irispca$sdev
varexp <- irispca$sdev^2

propvarexp <- varexp / sum(varexp)
round(propvarexp, 2)
round(cumsum(propvarexp), 2)


# Örnek 4.233: Çarşak grafiği
# Bağımlılık: Örnek 4.230
#
opar <- par(mfrow=c(1,2))
plot(propvarexp, type="b", col=4, lwd=2,
     ylim=c(0,1), xlab="Bileşenler", ylab="Var. Açıklama Oranı", xaxt="n")
axis(1,  at=c(1:4),labels=c("PC1","PC2","PC3","PC4"))
plot(cumsum(propvarexp), type="b", col=4, lwd=2,
     ylim=c(0,1), xlab="Bileşenler", ylab="Küm. Var. Açıklama Oranı", xaxt="n")
axis(1,  at=c(1:4),labels=c("PC1","PC2","PC3","PC4"))
par(opar)


# Örnek 4.234: Çarşak ve bileşen grafiği
# Bağımlılık: Örnek 4.230
#
suppressPackageStartupMessages(installed <- require(factoextra))
if (!installed) {
   install.packages("factoextra", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(factoextra))
 }
fviz_eig(irispca)  #Özdeğerler ve çarşak grafiği
fviz_pca_var(irispca, col.var = "contrib", 
           gradient.cols = c("red", "purple", "blue"), repel = TRUE)


# Örnek 4.235: Horn tekniğiyle temel bileşen sayısını saptama
# Bağımlılık: Örnek 4.230
#
suppressPackageStartupMessages(installed <- require((paran)))
if (!installed) {
    install.packages("paran", repos="https://cloud.r-project.org")  
    suppressPackageStartupMessages(require((paran)))
  }
                                 
paran(irisdf, iterations=5000, quietly=FALSE, status=FALSE, 
        all=TRUE, cfa=FALSE, graph=TRUE, color=TRUE, 
        col=c("black","red","blue"), lty=c(1,2,3), lwd=1, legend=TRUE, 
        file="", width=640, height=480, grdevice="jpg", 
        seed=123, mat=NA, n=NA)
                                

# Örnek 4.236: Kaiser ölçütü
# Bağımlılık: Örnek 4.230
#
eigvals <- get_eigenvalue(irispca)
head(eigvals)
sum(eigvals$eigenvalue > 1)



# Örnek 4.237: Temel bileşenlerle K-ortalamalar kümelemesi
# Bağımlılık: Örnek 4.230
#
irispcakmc <- kmeans(irispca$x[,1], centers=3, nstart=5)
pairs(irisdf, col=irispcakmc$cluster)
table(Clusters=irispcakmc$cluster, Classes=iris$Species)


# Örnek 4.238: iris verisinde kPCA uygulaması
suppressPackageStartupMessages(installed <- require(kernlab))
if (!installed) {
    install.packages("kernlab", repos="https://cloud.r-project.org")  
    suppressPackageStartupMessages(require(kernlab))
  }
                                 
data(iris)
tridx <- sample(x = nrow(iris), size = nrow(iris)*0.8)
iristrain <- iris[tridx,]
iristest <- iris[-tridx,]
                                 
iriskpca <- kpca(~.,data=iristrain[,-5], kernel="rbfdot",
        kpar=list(sigma=0.2),features=2)
                                 
# Temel bileşenler vektörleri
irispcv <- pcv(iriskpca)
head(irispcv)
                                 

# Örnek 4.239: kPCA grafiği
# Bağımlılık: Örnek 4.238
# 
plot(rotated(iriskpca), pch=19, col=as.integer(iristrain[,5]),
     xlab="PC1",ylab="PC2")

# Tahmin işlemi
preds <- predict(iriskpca,iristest[,-5])
points(preds, pch="O", col=as.integer(iristest[,5]))


# Örnek 4.240: mMDS uygulaması
data(iris)
irisdf <- iris[, 1:4]
irissd <- apply(irisdf, 2, sd)
irisdf <- sweep(irisdf, 2, irissd, "/")

irisdist <- dist(irisdf, method="euclidean") 

# k: Boyut sayısı 
irismds <- cmdscale(d=irisdist, k=2, eig=TRUE) 

attributes(irismds)
head(irismds$points, 3)
head(irismds$eig)



# Örnek 4.240: mMDS konfigürasyon grafiği
# Bağımlılık: Örnek 4.239
#
x <- irismds$points[,1]
y <- irismds$points[,2]
# Grafiği dikey döndürmek için #'ları kaldırınız
# x <- 0 - x
# y <- 0 - y
  
opar <- par(mfrow=c(1,2))
plot(x, y, xlab="Koordinat 1", ylab="Koordinat 2",
     main="MDS-Gözlemler", type="n")
abline(v=0, lty=2, col=3); abline(h=0, lty=2, col=3)
text(x, y, labels = row.names(irisdf), cex=0.6, col="blue")
plot(x, y, xlab="Koordinat 1", ylab="Koordinat 2",
     main="MDS-Sınıflar", type="n")
abline(v=0, lty=2, col=3); abline(h=0, lty=2, col=3)
text(x, y, labels = iris$Species, cex=0.5, col=as.numeric(iris$Species))
par(opar)


# Örnek 4.41: mMDS uyum iyiliği
# Bağımlılık: Örnek 4.240
irismds$GOF


# Örnek 4.242: swiss verisinde MDS uygulaması
suppressPackageStartupMessages(installed <- require(MASS))
if (!installed) {
    install.packages("MASS", repos="https://cloud.r-project.org")  
    suppressPackageStartupMessages(require(MASS))
  }
data(swiss)
head(swiss)
swissdist <- dist(swiss) 
                                 
swissmds <- isoMDS(swissdist, k=2)

# MDS grafiği
x <- swissmds$points[,1]
y <- swissmds$points[,2]
plot(x, y, xlab="Koordinat 1", ylab="Koordinat 2",
    main="Non-metrik MDS", type="n")
text(x, y, labels = row.names(swiss), cex=0.6, col="blue")



# Örnek 4.243: nMDS gerilim ölçütü
# Bağımlılık: Örnek 4.242
swissmds$stress



# Örnek 4.244: nMDS için çarşak grafiği
# Bağımlılık: Örnek 4.242
splot <- function(dist, k) {
   stres <- isoMDS(dist, k=k)$stress
   for(i in rev(seq(k-1)))  
   stres <- append(stres,isoMDS(dist, k=i)$stress)
   plot(seq(k),rev(stres), type="b", 
      xaxp=c(1,k, k-1), ylab="Gerilim", xlab="Boyut")
 }

splot(dist(swiss), k=6)


# Örnek 4.245: Shepard diyagramı
# Bağımlılık: Örnek 4.242
swissshep <- Shepard(dist(swiss), swissmds$points, p=2)
plot(swissshep, pch=".", col="blue")
lines(swissshep$x, swissshep$yf, type = "S")



# Örnek 4.246: Sammon MDS uygulaması
# Bağımlılık: Örnek 4.240
#
suppressPackageStartupMessages(installed <- require(MASS))
if (!installed) {
    install.packages("MASS", repos="https://cloud.r-project.org")  
    suppressPackageStartupMessages(require(MASS))
}                                                                    
swissmds2 <- sammon(dist(swiss), k=2)
                                                                      
swissmds2$stress

# MDS grafiği
x <- swissmds2$points[,1]
y <- swissmds2$points[,2]
plot(x, y, xlab="Koordinat 1", ylab="Koordinat 2",
      main="Non-metrik MDS (Sammon)", type="n")
text(x, y, labels = row.names(swiss), cex=0.6, col="blue")
                                                                  


# Örnek 4.247: Sammon MDS için Shepard ditagramı
# Bağımlılık: Örnek 4.245
#
swissshep <- Shepard(dist(swiss), swissmds2$points, p=2)
plot(swissshep, pch=".")
lines(swissshep$x, swissshep$yf, type = "S")



# Örnek 4.248: LLE uygulaması
suppressPackageStartupMessages(installed <- require(lle))
if (!installed) {
   install.packages("lle", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(lle))
 }
suppressPackageStartupMessages(installed <- require(scatterplot3d))
if (!installed) {
   install.packages("scatterplot3d", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(scatterplot3d))
 }
# Veri matrisi
repo <- 'http://people.cs.uchicago.edu/'
url <- paste0(repo, '/~dinoj/manifold/swissroll.dat')
swissroll <- read.table(url)
str(swissroll)
scatterplot3d::scatterplot3d(swissroll)

# K'nın bulunması
kvec <- calc_k(swissroll, m=2, kmin=2, kmax=20, 
               parallel=TRUE, cpus=4, plotres=TRUE, iLLE=FALSE)
k <- kvec$k[which.max(kvec$rho)]
k

# Komşular matrisi
neighbours <- find_nn_k(swissroll, k=k)
neighbours[1:3, 1:6]

# x ve komşuları arasındaki ağırlıklar
weights <- find_weights(neighbours, swissroll, m=2, reg=2)
weights$wgts[1:3, 1:6]

# LLE uygula
swisslle <- lle(swissroll, m=3, k=k, reg=2, ss=FALSE, id=TRUE, v=0.9 )
attributes(swisslle)
split.screen(c(2,1))
screen(1)
plot(swisslle$Y, xlab=expression(y[1]), ylab=expression(y[2]),
      main=paste0("K=",k))
screen(2)
plot(swisslle$id, main="intrinsic dimension", type="l", 
      xlab=expression(x[i]), ylab="id", lwd=2 )
plot_lle(swisslle$Y, swisslle$X, FALSE, col="blue", inter=TRUE )




########################################################################################
# Bolum 5: Regresyon Modelleri 
########################################################################################


# Örnek 5.1: Uzun patlıcan çeşidinde meyve boyu ve ağırlığı verisi
boy <- c(20.0, 21.0, 21.5, 22.0, 23.0, 24.0, 24.5, 25.0, 26.0, 
         26.0, 27.0, 28.0, 24.5, 26.5, 25.0)
agirlik <- c(100, 108, 110, 115, 112, 109, 116, 130, 125, 110, 132,
             127, 118, 122, 123)
patlican <- data.frame(boy, agirlik)
patlican
plot(patlican, cex=2, pch=19, col='dodgerblue',   
     xlab="Boy(cm)", ylab="Ağırlık(g)", main="Regresyon Doğrusu")
abline(lm(agirlik~boy, data=patlican), col='red', lwd=2)



# Örnek 5.2: Basit doğrusal regresyon analizi
# Bağımlılık: Örnek 5.1
patlicanmodel <- lm(agirlik ~ boy,  data = patlican)
summary(patlicanmodel)



# Örnek 5.3: Regresyon katsayıları
# Bağımlılık: Örnek 5.2
coef(patlicanmodel)



# Örnek 5.4: Basit doğrusal regresyon modeli başarımı
# Bağımlılık: Örnek 5.2
RSS <- sum(residuals(patlicanmodel)^2)
TSS <- sum((patlican$agirlik - mean(patlican$agirlik))^2)
R2 <- 1 - (RSS/TSS)
R2



# Örnek 5.5: Model diyagnostiği
# Bağımlılık: Örnek 5.2
layout(matrix(c(1,2,3,4),2,2)) 
plot(patlicanmodel)



# Örnek 5.6: Hata (kalıntı) analizi
# Bağımlılık: Örnek 5.2
residuals <- residuals(patlicanmodel)
sigmae <- sd(residuals)
sigmaekare <- sigmae^2
sigmae
sigmaekare

# Beta kestirimlerinin varyans-kovaryansını çıkar
betahatvar <- vcov(patlicanmodel)
round(betahatvar, 2)
if(!require(nlraa)) {
  install.packages('nlraa', repo='https://cloud.r-project.org')} 
require(nlraa)

# Hataların varyans-kovaryans matrisi
varcov <- nlraa::var_cov(patlicanmodel)
# Matrisin sol üst parçası kısmi görünüm
round(varcov[1:5,1:5],2)
# Görselleştirme
image(varcov[,ncol(varcov):1])


# Örnek 5.7: ChickWeight veri setinin okunması
data(ChickWeight)
head(ChickWeight, 3)
tail(ChickWeight, 3)


# Örnek 5.8: ChickWeight serpilme grafiği
# Bağımlılık: Örnek 5.7
plot(ChickWeight$Time, ChickWeight$weight,
     col=rgb(0.4,0.4,0.8,0.6), pch=19, cex=1.5, 
     main="Chick Weights", xlab="Time", ylab="Weight") 
abline(lm(weight~Time, data=ChickWeight), col='red', lwd=2)


# Örnek 5.8: Basit doğrusal regresyon analizi
# Bağımlılık: Örnek 5.7
chickmodel <- lm(weight ~ Time,  data = ChickWeight)
summary(chickmodel)

# Hataların varyans-kovaryans matrisi
varcov <- nlraa::var_cov(chickmodel)
# Matrisin sol üst parçası kısmi görünüm
round(varcov[1:5,1:5],2)
# Varyans-kovaryans matrisi görselleştirme
image(log(varcov[1:5, 5:1]))


# Örnek 5.10: GLS modeli 1
# Bağımlılık: Örnek 5.7
if(!require(nlme)) {
  install.packages('nlme', repo='https://cloud.r-project.org')} 
require(nlme)

chickmodel2 <- nlme::gls(weight ~ Time, data = ChickWeight,
                          weights = varPower())

chickmodel2

# Hataların varyans-kovaryans matrisi
varcov <- nlraa::var_cov(chickmodel2)
# Matrisin sol üst parçası kısmi görünüm
round(varcov[1:5,1:5],2)
# Varyans-kovaryans matrisi görselleştirme
image(log(varcov[1:5, 5:1]))


# Örnek 5.11: GLS modeli 2
# Bağımlılık: Örnek 5.7
chickmodel3 <- nlme::gls(weight ~ Time, data = ChickWeight,
                            weights = varPower(),
                            correlation = corCAR1(form = ~ Time | Chick))
chickmodel3

# Hataların varyans-kovaryans matrisi
varcov <- nlraa::var_cov(chickmodel3)
# Matrisin sol üst parçası kısmi görünüm
round(varcov[1:5,1:5],2)

# Varyans-kovaryans matrisi görselleştirme
image(log(varcov[1:36, 36:1]))



# Örnek 5.12: airquality veri setinin okunması ve analize hazırlanması 
data(airquality)
airquality <- airquality[,1:4]
airquality <- na.omit(airquality)
airquality <- airquality[is.finite(rowSums(airquality)),]
airquality <- data.frame(scale(airquality))
str(airquality)

suppressPackageStartupMessages(installed <- require(GGally))
if (!installed) {
   install.packages("GGally", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(GGally))
 }
ggpairs(airquality)

suppressPackageStartupMessages(installed <- require(rsample))
if (!installed) {
   install.packages("rsample", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rsample))
 }
set.seed(123)  
trainidx <- initial_split(airquality, prop=0.8)
ozonetrain <- training(trainidx)
ozonetest  <- testing(trainidx)



# Örnek 5.13: Çoklu regresyon modeli analizi
# Bağımlılık: Örnek 5.12
ozonemlr <- lm(Ozone~., data=ozonetrain)
summary(ozonemlr)


# Örnek 5.14: Kademeli regresyon ile değişken seçimi
# Bağımlılık: Örnek 5.13
if(!require(MASS)){
   install.packages("MASS", repo="cloud.r-project.org")
   require(MASS)}

ozonestep <- stepAIC(ozonemlr, direction = 'both')

ozonestep$anova 



# Örnek 5.15: Önemli değişkenlerle model
# Bağımlılık: Örnek 5.12
ozonemlr2 <- lm(Ozone~Wind+Temp, data=ozonetrain)
summary(ozonemlr2)

if(!require(performance)){
   install.packages("performance", repo="cloud.r-project.org")
   require(performance)}

compare_performance(ozonemlr, ozonemlr2)


# Örnek 5.16: Göreceli Önemliliklerin belirlenmesi
# Bağımlılık: Örnek 5.12, 5.13
if(!require(relaimpo)){
   install.packages("relaimpo", repo="cloud.r-project.org")
   require(relaimpo)}

calc.relimp(ozonemlr,type=c("lmg","last","first","pratt"),  rela=TRUE)

# 1000 tekrarlı bootstrap
ozoneboot <- boot.relimp(ozonemlr, b = 1000, 
                        type = c("lmg", "last", "first", "pratt"), 
                        rank = TRUE, diff = TRUE, rela = TRUE)
booteval.relimp(ozoneboot) # print result
plot(booteval.relimp(ozoneboot,sort=TRUE)) # plot result



# Örnek 5.17: Model diyagnostiği
# Bağımlılık: Örnek 5.15
layout(matrix(c(1,2,3,4),2,2)) 
plot(ozonemlr2)
par(mfrow=c(1,1))



# Örnek 5.18: Normallik testi
# Bağımlılık: Örnek 5.15
shapiro.test(ozonemlr2$residuals)

hist(ozonemlr2$residuals, col="orange", 
     xlab="Kalıntılar", ylab="Frekans", main="Kalıntı histogramı")


# Örnek 5.19: Eşserpilim (Homoscedasticity) testi
# Bağımlılık: Örnek 5.15
if(!require(lmtest)){
    install.packages("lmtest", repo="cloud.r-project.org")
    require(lmtest)}
bptest(ozonemlr2)


# Örnek 5.20: Çoklu Bağlantılılık kontrolü
# Bağımlılık: Örnek 5.15
if(!require(car)){
    install.packages("car", repo="cloud.r-project.org")
    require(car)} 

vif(ozonemlr2)


# Örnek 5.21: Çoklu bağlantılılık kontrolü
# Bağımlılık: Örnek 5.12
if(!require(caret)){
    install.packages("caret", repo="cloud.r-project.org")
    require(caret)} 
hcorvars <- findCorrelation(cor(airquality[,2:4]), cutoff = 0.6)
hcorvars 


# Örnek 5.22: Varsayımların genel kontrolü
# Bağımlılık: Örnek 5.15
if(!require(gvlma)){
    install.packages("gvlma", repo="cloud.r-project.org")
    require(glvma)} 

gvlma(ozonemlr2) 

# Örnek 5.23: Test verisinde tahmin
# Bağımlılık: Örnek 5.15
testpreds <- predict(object = ozonemlr2, newdata = ozonetest, level = 0.95)


# Örnek 5.24: Test verisinde başarım ölçütleri
# Bağımlılık: Kod 4.1.3; Örnek 5.15
if(!require(MLmetrics)){
    install.packages("MLmetrics", repo="cloud.r-project.org")
    require(MLmetrics)} 
if(!require(Metrics)){
    install.packages("Metrics", repo="cloud.r-project.org")
    require(Metrics)} 
MLmetrics::RMSE(y_pred = testpreds, y_true = ozonetest$Ozone)
MLmetrics::MAE(y_pred = testpreds, y_true = ozonetest$Ozone)
Metrics::rmse(predicted = testpreds, actual = ozonetest$Ozone)
Metrics::mae(predicted = testpreds, actual = ozonetest$Ozone)
regression_metrics(ypred=testpreds, yactual=ozonetest$Ozone)$RMSE
regression_metrics(ypred=testpreds, yactual=ozonetest$Ozone)$MAE

# Örnek 5.25: Modeli kaydetme
# Bağımlılık: Örnek 5.15
setwd("D:/mldmbook/models/")
save(ozonemlr2, file = "ozone_mlr.rda")


# Örnek 5.26: Modeli okuma ve yeni veri tahmini
setwd("D:/mldmbook/models/")
load(file = "ozone_mlr.rda")
newairq <- data.frame(Solar.R=190,Wind=7.4,Temp=67)
newpreds <- predict(object = ozonemlr2, newdata = newairq, level = 0.95)
newpreds


# Örnek 5.27: NLS ile doğrusal olmayan model analizi
setwd("D:/mldmbook/datasets")
turkey <- read.table("turkeysgrowth.dat", head=TRUE, sep="\t")
str(turkey)
head(turkey,3)

# Lojistik modelin tanımlanması
model <- log(y)~log(a/(1+exp(-(b+c*x))))

# Modelin nls ile eğitimi
turkeynlr <- nls(model, data=turkey,
                start=list(a=0.000145, b=-2.68, c=0.0884), trace=TRUE)

summary(turkeynlr)


# Örnek 5.28: Model uyumunu inceleme
# Bağımlılık: Örnek 5.27

# Gerçek ve tahmin değerleri arasındaki korelasyon
cor(log(turkey$y), predict(turkeynlr))

# Serpilme grafiği
plot(log(y)~log(x), data=turkey)
lines(log(turkey$x), predict(turkeynlr), lty=2, col="red", lwd=3)



# Örnek 5.29: Başlatıcı fonksiyonlar kullanma
# Bağımlılık: Örnek 5.27
nls(log(y) ~ SSlogis(log(x), Asym, xmid, scal), data = turkey)


# Örnek 5.30: Başlatıcı fonksiyon tanımlama
# Bağımlılık: Örnek 5.27
# 3 parametreli logistic fonksiyon
logis <- function(x, a, b, c) {
   val <- a / (1+exp(-(b+c*x)))
   return(val)
  }
# Başlangıç değerlerini saptama
svals <- nls(log(y) ~ log(logis(x, a, b, c)), data=turkey, 
             start = c(a=1, b=1, c=0.1))

turkeynlr2 <- nls(y ~ logis(x, a, b, c), data=turkey,
                  start = coef(svals))
turkeynlr2


# Örnek 5.31: drc paketi ile doğrusal olmayan regresyon
# Bağımlılık: Örnek 5.27
suppressPackageStartupMessages(installed <- require(drc))
if (!installed) {
   install.packages("drc", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(drc))
 }

model.logis <- drm(y~x, data=turkey, fct = L.3())
summary(model.logis)

# Örnek 5.32: Büyüme modellerinin karşılaştırılması
# Bağımlılık: Örnek 5.27

# Logistic 3 parametreli
model.logis <- drm(y~x, data = turkey, fct = L.3())
summary(model.logis)

# Üssel (exponential)
model.exp <- drm(y~x, data = turkey, fct = EXD.3())
summary(model.exp)

# Gompertz
model.gompertz <- drm(y~x, data = turkey, fct = G.3())
summary(model.gompertz)

# Genelleştirilmiş lojistik (Richards modeli)
model.genlogis <- drm(y~x, data = turkey, fct = LL2.5())
summary(model.genlogis)

# Weibull 3 parametreli
model.wei3 <- drm(y~x, data = turkey, fct = W1.3())
summary(model.wei3)

# Asymptotic regresyon (alt limit=0) 
model.asymptotic <- drm(y~x, data = turkey, fct = AR.2())
summary(model.asymptotic)

# Shifted Michaelis-Menten modeli
model.smm <- drm(y~x, data = turkey, fct = MM.3())
summary(model.smm)

# Brain-Cousens (Hormesis) modeli
model.bc5 <- drm(y~x, data = turkey, fct = BC.5())
summary(model.bc5)


# Örnek 5.33: Model grafiklerini göster
# Bağımlılık: Örnek 5.32
opar <- par(mfrow=c(2,4))
plot(model.logis, main="Lojistik", pch=19, cex=1.2, col=4)
plot(model.exp, main="Üssel", pch=19, cex=1.2, col=4)
plot(model.gompertz, main="Gompertz", pch=19, cex=1.2, col=4)
plot(model.genlogis, main="Generalized lojistik", pch=19, cex=1.2, col=4)
plot(model.wei3, main="Weibull (3 par)", pch=19, cex=1.2, col=4)
plot(model.asymptotic, main="Asymptotic regression", pch=19, cex=1.2, col=4)
plot(model.smm, main="Shifted Michaelis-Mentel", pch=19, cex=1.2, col=4)
plot(model.bc5, main="Brain-Cousens", pch=19, cex=1.2, col=4)
par(opar)


# Örnek 5.34: Modellerin başarım ölçütleri
# Bağımlılık: Kod 5.1, Örnek 5.32
original <- turkey$y
k <- length(model.logis$coefficients)
predicted <- predict(model.logis, data=turkey)
logis.perf <- performance(original, predicted, k)

k <- length(model.exp$coefficients)
predicted <- predict(model.exp, data=turkey)
exp.perf <- performance(original, predicted, k)

k <- length(model.gompertz$coefficients)
predicted <- predict(model.gompertz, data=turkey)
gompertz.perf <- performance(original, predicted, k)

k <- length(model.genlogis$coefficients)
predicted <- predict(model.genlogis, data=turkey)
genlogis.perf <- performance(original, predicted, k)

k <- length(model.wei3$coefficients)
predicted <- predict(model.wei3, data=turkey)
wei3.perf <- performance(original, predicted, k)

k <- length(model.asymptotic$coefficients)
predicted <- predict(model.asymptotic, data=turkey)
asymptotic.perf <- performance(original, predicted, k)

k <- length(model.smm$coefficients)
predicted <- predict(model.smm, data=turkey)
smm.perf <- performance(original, predicted, k)

k <- length(model.bc5$coefficients)
predicted <- predict(model.bc5, data=turkey)
bc5.perf <- performance(original, predicted, k)

perf.table <- rbind(logis.perf, exp.perf, gompertz.perf, 
                   genlogis.perf, wei3.perf, asymptotic.perf, smm.perf, bc5.perf)
row.names(perf.table) <- c("logis", "exp", "gompertz", 
                          "genlogis", "wei", "asymptotic", "smm", "bc")

perf.table$rankAIC <- rank(perf.table$AIC)
perf.table

# Örnek 5.35: Modelin kaydedilmesi
# Bağımlılık: Örnek 5.32
setwd("D:/mldmbook/models/")
save(model.genlogis, file = "turkey_nlr_genlogis.rda")

# Örnek 5.36: Modeli okuma ve yeni veri tahmini
# Bağımlılık: Örnek 5.35
setwd("D:/mldmbook/models/")
load(file = "turkey_nlr_genlogis.rda")
newx <- data.frame(x=c(10, 20, 5))
newpreds <- predict(object = model.genlogis, newdata = newx, level = 0.95)
newpreds


# Örnek 5.37: MARS analizi
# Doğrusal veri benzetimi
n <- 100
a <- 30
b <- 2
set.seed(3)
x <- runif(n, 20, 60)
y <- a + b * x
y <- rnorm(n, y, 5)
lineardf <- data.frame(x,y)

# MARS modelinin eğitimi
if(!require(earth)) {
   install.packages('earth', repo='https://cloud.r-project.org');
   require(earth) }

marsmodel1 <- earth(y ~ x,  data = lineardf)
summary(marsmodel1)

# Örnek 5.38: MARS model eğrisi
# Bağımlılık: Örnek 5.37
plotmo(marsmodel1, all1=T)
abline(v=26.72, lty=2, col=3)

# Örnek 5.39: LM ve MARS model eğrisinin karşılaştırılması
# Bağımlılık: Örnek 5.37
xnew <- seq(20, 80, 1)
ypreds <- predict(marsmodel1, newdata=xnew)
linearmodel <- lm(y~x, data=lineardf)
plot(lineardf, pch=19, col='gray')
lines(xnew, ypreds, col="orange", lwd=6)
abline(linearmodel, col="blue", lwd=2)
abline(v=26.7217, col=3, lty=3)
points(26.7217, 84, cex=2, col=2, lwd=2)
legend("bottomright", legend=c("LM","MARS"), 
     col=c("blue","orange"), lwd=c(3,3), horiz=TRUE)

# Örnek 5.40: MARS modeli MARS modeli sonuç bileşenleri listesi
# Bağımlılık: Örnek 5.37
ls(marsmodel1)

# Örnek 5.41: MARS modeli sonuç bileşenlerine erişme
# Bağımlılık: Örnek 5.37
marsmodel1$coefficients
marsmodel1$cuts


# Örnek 5.42: MARS modeli özet nesnesi
# Bağımlılık: Örnek 5.37
summarsmodel1 <- summary(marsmodel1)
ls(summarsmodel1)

# Örnek 5.43: MARS modeli sonuçlarının max stilinde görüntülenmesi
# Bağımlılık: Örnek 5.37
summary(marsmodel1, style="max")

# Örnek 5.44: MARS modeli ile tahmin işlemi
# Bağımlılık: Örnek 5.37
x <- 50
yhat <-  83.90111 - 2.457155 * max(0, 26.72166 - x) + 1.973004 * 
    max(0, x - 26.72166) 
yhat

# Örnek 5.45: MARS modeli ile tahmin
ypreds <- predict(marsmodel1) #veya marsmodel1$fitted.values
head(ypreds)

x <- 50
predict(marsmodel1, newdata=x)

xtest <- c(40, 50, 65)
xtest <- data.frame(x=xtest)
xtest

ypreds <- predict(marsmodel1, newdata=xtest)
ypreds


# Örnek 5.46: MARS modeli diyagnostik grafikleri
plot(marsmodel1, which=1)


# Örnek 5.47: Doğrusal olmayan veri benzetimi ve görselleştirme
n <- 200
set.seed(14)
x <- runif (n, 0, 2*pi)
y <- sin(x) + 0.2 * rnorm(length(x))
marsdf2 <- data.frame(x=x, y=y)
plot(marsdf2, pch=19, col='gray')
linearmodel <- lm(y~x, data=marsdf2)
abline(linearmodel, col=4, lwd=3)


# Örnek 5.48: Doğrusal olmayan ilişki için MARS modellemesi
marsmodel2 <- earth(y ~ x,  data = marsdf2)

summary(marsmodel2)

# Örnek 5.49: Doğrusal olmayan ilişki için MARS ve LM karşılaştırması
xnew <- seq(0, 10, 1)
ypreds <- predict(marsmodel2, newdata=xnew)
plot(marsdf2, pch=19, col='gray')
linearmodel2 <- lm(y~x, data=marsdf2)
abline(linearmodel2, col=4, lwd=3)
lines(xnew, ypreds, col=2, lwd=3)
legend("topright", legend=c("LM","MARS"), 
       col=c(4,2), lwd=c(3,3), horiz=TRUE)


# Örnek 5.50: MARS modeli diyagnostik grafikleri
plot(marsmodel2)

# Örnek 5.50: Çok değişkenli veriseti benzetimi
set.seed(1453)
x1 <- runif (n, 0, 2*pi)
x2 <- runif(n, 0, 2*pi)
x3 <- runif(n, 0, 2*pi)
x4 <- runif(n, 0, pi)
y <- 3*sin(x1) + cos(x2) + runif(1)*x3-runif(1) 
marsdf3 <- data.frame(x1=x1, x2=x2, x3=x3, x4=x4, y=y)
if(!require(psych)) {
   install.packages('psych', repo='https://cloud.r-project.org');
   require (psych) }
pairs.panels(marsdf3, hist.col='orange')


# Örnek 5.51: Çok değişkenli verisetinde MARS modellemesi
# Bağımlılık: Örnek 5.50
marsmodel3 <- earth(y ~ .,  data = marsdf3)
summary(marsmodel3, style="max")


# Örnek 5.52: Çok değişkenli verisetinde MARS model grafikleri
# Bağımlılık: Örnek 5.51
plotmo(marsmodel3, all1=TRUE, all2=FALSE)


# Örnek 5.53: Çok değişkenli verisetinde MARS model grafikleri 2
# Bağımlılık: Örnek 5.52
plotmo(marsmodel3, all1=FALSE, all2=TRUE)

# Örnek 5.54: airquality veri seti
data(airquality)
airquality <- na.omit(airquality)  # Eksik verili gözlemleri sil

# ggpairs ile açınsal grafikler
if(!require(GGally)) 
  { install.packages("GGally", repo="https://cloud.r-project.org");
      require(GGally) }
# yumuşatıcı regresyon eğrileri oluşturma fonksiyonu
regline <- function(data, pts=list(), smt=list(),mapping){
   ggplot(data=data, mapping=mapping) + 
     do.call(geom_point, pts) +
     do.call(geom_smooth, smt) 
 }

ggpairs(airquality,columns=1:6, 
        diag=list(discrete="barDiag", 
                  continuous=wrap("densityDiag", alpha=0.5)),
        lower=list(continuous=wrap(regline,
                  pts=list(size=1.2, col="black", alpha=0.5), 
                  smt=list(method="loess", size=1.2, se=FALSE,
                  colour="orange", alpha=0.5)))
     )

# Örnek 5.55: airquality veri setinde MARS analizi
# Bağımlılık: Örnek 5.54
if(!require(earth)) {
  install.packages('earth', repo='https://cloud.r-project.org');
  require(earth) }

ozonemarsmodel1 <- earth(Ozone ~ ., data=airquality)
summary(ozonemarsmodel1)
plotmo(ozonemarsmodel1, all1=TRUE)


# Örnek 5.56: airquality veri setinde MARS analizi 2
# Bağımlılık: Örnek 5.54
ozonemarsmodel2 <- earth(Ozone ~ ., data=airquality, degree=2)
summary(ozonemarsmodel2)
plotmo(ozonemarsmodel2, all2=TRUE)


# Örnek 5.57: MARS modeli çapraz doğrulamayla parametre ayarlama
# Bağımlılık: Örnek 5.54
suppressPackageStartupMessages(installed <- require(caret))
if (!installed) {
   install.packages("caret", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caret))
 }
# Örnek: Parametre ayarlama ızgarası
prmtunegrid <- expand.grid(
   nprune = c(2:50),  #terim sayısı
   degree = c(1:3))   #interaksiyon derecesi

head(prmtunegrid,10)
# caret ile çapraz doğrulama 
set.seed(1923)  
ozonemarscv <- train(
   x = subset(airquality, select= -Ozone),
   y = airquality$Ozone,
   method = "earth",
   trControl = trainControl(method="cv", number=10),
   metric = "RMSE",
   tuneGrid = prmtunegrid)
# Çapraz doğrulama tablosu
ozonemarscvresults <- ozonemarscv$results
head(ozonemarscvresults)
# summary(ozonemarscvresults)
plot(ozonemarscv)  #ggplot(ozonemarscv) ile daha estetik ve ayrıntılı grafik 


# Örnek 5.58: En iyi üst parametre değerleri
# Bağımlılık: Örnek 5.57
btune <- ozonemarscv$bestTune
btune

# Örnek 5.59: En iyi sonuç için seçilen ölçüte ilişkin istatistikler
# Bağımlılık: Örnek 5.57
ozonemarscvresults[ozonemarscvresults$degree==btune$degree & 
                     ozonemarscvresults$nprune==btune$nprune, ]

# Veya daha pratik biçimde aşağıdaki gibi elde edilir.
ozonemarscvresults[which.min(ozonemarscvresults[,"RMSE"]),]

# RMSE için çapraz doğrulama tanımlayıcı istatistikleri
ozonemarscvresultsRMSE <- ozonemarscv$results$RMSE
summary(ozonemarscvresultsRMSE)




# Örnek 5.60: En iyi MARS modeli 
# Bağımlılık: Örnek 5.57
ozonemarsfinalmodel <- ozonemarscv$finalModel
summary(ozonemarsfinalmodel, style="max")

# Örnek 5.61: MARS modelinde değişkenlerin önemlilikleri
# Bağımlılık: Örnek 5.57
impvars <- evimp(ozonemarsfinalmodel, trim=FALSE)
print(impvars)
plot(impvars)

# Örnek 5.62: vip paketiyle değişken önemlilik grafiği
# Bağımlılık: Örnek 5.57
if(!require(vip)) {
   install.packages('vip', repo='https://cloud.r-project.org');
   require(vip) }
viplot1 <- vip(ozonemarscv, num_features = 10, 
               geom = "point", value = "gcv") + ggtitle("GCV")
viplot2 <- vip(ozonemarscv, num_features = 10, 
               geom = "point", value = "rss") + ggtitle("RSS")
if(!require(gridExtra)) {
   install.packages('gridExtra', repo='https://cloud.r-project.org');
   require(gridExtra) }
grid.arrange(viplot1, viplot2, ncol=2)



# Örnek 5.63: SVM nu-regresyon modeli
data(airquality)
airquality <- airquality[,1:4]
airquality <- na.omit(airquality)
airquality <- airquality[is.finite(rowSums(airquality)),]
airquality <- data.frame(scale(airquality))
str(airquality)
suppressPackageStartupMessages(installed <- require(rsample))
if (!installed) {
   install.packages("rsample", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(rsample))
 }
set.seed(123)  
trainidx <- initial_split(airquality, prop=0.8)
ozonetrain <- training(trainidx)
ozonetest  <- testing(trainidx)

suppressPackageStartupMessages(installed <- require(e1071))
if (!installed) {
   install.packages("e1071", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(e1071))
 }

set.seed(123)
ozonetunemodels <- tune(svm, Ozone~., data=ozonetrain, kernel="linear",
                       ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))

summary(ozonetunemodels)
plot(ozonetunemodels)
bestozonemodel <- ozonetunemodels$best.model
summary(bestozonemodel)

# Örnek 5.64: SVR modelinin başarım ölçütleri
# Bağımlılık: Örnek 4.60, Kod 4.5
#
ozonetestpreds <- predict(bestozonemodel, newdata=ozonetest)
metrics <- regression_metrics(ozonetest$Ozone, ozonetestpreds)
attributes(metrics)
head(metrics$errors)
metrics$RMSE
metrics$MAPE

# Örnek 5.65: Karışık veri seti benzetimi, eğitim ve test verisinin hazırlanması
n <- 1000
set.seed(112) 
x1 <- runif(n)
x2 <- 2 * runif(n)
x3 <- 3 * runif(n) 
x4 <- factor(sample(LETTERS[1:6], n, replace=TRUE))
x5 <- factor(sample(LETTERS[1:3], n, replace=TRUE))
x6 <- ordered(sample(LETTERS[1:4], n, replace=TRUE), levels=LETTERS[4:1])
mu <- c(-1, 0, 1, 2)[as.numeric(x6)]
snr <- 20  # gürültü oranı
y <- x1 ^ 1.5 + 2 * (x2 ^ 0.5) + mu
sigma <- sqrt(var(y) / snr)
y <- y + rnorm(n, 0, sigma)
#x1[sample(1:n, size=20)] <- NA  # Eksik gözlem ekle 
#x4[sample(1:n, size=40)] <- NA  
simdata <- data.frame(y, x1, x2, x3, x4, x5, x6)
str(simdata)
head(simdata, 3)

set.seed(123)
tridx <- sample(2, nrow(simdata), prob = c(0.8, 0.2), replace = T)
simdatatrain <- simdata[tridx == 1,]
simdatatest <- simdata[tridx== 2,]


# Örnek 5.66: Regresyon ağacı 
# Bağımlılık: Örnek 5.65
#
if(!require(rpart)){
   install.packages("rpart", repo="https://cloud.r-project.org")
   require(rpart)    
 }

# Regresyon ağacı
simdatart <- rpart(y ~., data = simdatatrain)
simdatart

rpart.rules(simdatart)

# Regresyon ağacı ve CP grafiği
if(!require(rpart.plot)){
   install.packages("rpart.plot", repo="https://cloud.r-project.org")
   require(rpart.plot)    
 }
  
opar <- par(mfrow=c(2,1))
rpart.plot(simdatart)
plotcp(simdatart)
par(opar)


# Örnek 5.67: RT modelinin eğitim ve test başarımları 
# Bağımlılık: Örnek 5.66
# Eğitim başarımı
trainpreds <- predict(simdatart, newdata=simdatatrain)
head(trainpreds)
trainmetrics <- regression_metrics(simdatatrain$y, trainpreds)
c(MAE=trainmetrics$MAE, RMSE=trainmetrics$RMSE, R.sq= trainmetrics$R2)

# Test başarımı
testpreds <- predict(simdatart, newdata=simdatatest)
testmetrics <- regression_metrics(simdatatest$y, testpreds)
c(MAE=testmetrics$MAE, RMSE=testmetrics$RMSE, R.sq= testmetrics$R2)

# Örnek 5.68: Modeli kaydetme
# Bağımlılık: Örnek 5.66
setwd("D:/mldmbook/models/")
save(simdatart, file = "simdata_rt.rda")


# Örnek 5.69: Modeli okuma ve yeni veri tahmini
# Bağımlılık: Örnek 5.68
setwd("D:/mldmbook/models/")
load(file = "simdata_rt.rda")
udata <- data.frame(x1=0.4, x2=0.3, x3=2.5, x4=factor("B"), 
                  x5=factor("C"), x6=ordered("A"))
udata

newpreds <- predict(object = simdatart, newdata = udata, level = 0.95)
newpreds


# Örnek 5.70: Yapay veri benzetimi
n <- 500
set.seed(1923)
x1 <- runif (n, 0, 2*pi)
x2 <- runif(n, 0, pi)
x3 <- rnorm (n)
x4 <- runif(n, 0, 3/2*pi)
y <- 3*sin(x1) + cos(x2) + runif(1)*x3-runif(1) 
simdata <- data.frame(x1=x1, x2=x2, x3=x3, x4=x4, y=y)

if(!require(psych)) {
   install.packages('psych', repo='https://cloud.r-project.org');
   require(psych) }
pairs.panels(simdata, hist.col='orange')


# Örnek 5.71: caret ile çapraz doğrulama
# Bağımlılık: Örnek 5.70
suppressPackageStartupMessages(installed <- require(caret))
if (!installed) {
   install.packages("caret", repos="https://cloud.r-project.org")  
   suppressPackageStartupMessages(require(caret))
 }

# Çoklu doğrusal regresyon
set.seed(2023)
cvLM <- train(y ~ ., data = simdata, method = "lm",
             preProcess = c("center", "scale"),
             trControl = trainControl(method = "cv", number = 10),
             metric = "RMSE", tuneLength = 10)

# Doğrusal çekirdekli SVM
set.seed(2023)
cvLSVM <- train(y ~ ., data = simdata, method = "svmLinear",
               preProcess = c("center", "scale"),
               trControl = trainControl(method = "cv", number = 10),
               metric = "RMSE", tuneLength = 10)

# Radyal çekirdekli SVM
set.seed(2023)
cvRSVM <- train(y ~ ., data = simdata, method = "svmRadial",
               preProcess = c("center", "scale"),
               trControl = trainControl(method = "cv", number = 10),
               metric = "RMSE", tuneLength = 10)

# Temel bileşen regresyonu
set.seed(2023)
cvPCR <- train(y ~ ., data = simdata, method = "pcr",
               preProcess = c("center", "scale"), 
               trControl = trainControl(method = "cv", number = 10),
               metric = "RMSE", tuneLength = 10)

# Kısmi en küçük kareler regresyonu
set.seed(2023)
cvPLSR <- train(y ~ ., data = simdata, method = "pls",
               preProcess = c("center", "scale"),
               trControl = trainControl(method = "cv", number = 10),
               metric = "RMSE", tuneLength = 10)

# Cezalı regresyon – Ridge 
set.seed(2023)
cvRidge <- train(y ~ ., data = simdata, method = "glmnet",
                 preProcess = c("center", "scale"),
                 trControl = trainControl(method = "cv", number = 10),
                 tuneGrid = expand.grid(alpha = 0, lambda = 0),
                 metric = "RMSE", tuneLength = 10)

# Cezalı regresyon – Lasso 
set.seed(2023)
cvLasso <- train(y ~ ., data = simdata, method = "glmnet",
                 preProcess = c("center", "scale"),
                 trControl = trainControl(method = "cv", number = 10),
                 tuneGrid = expand.grid(alpha = 1, lambda = 0),
                 metric = "RMSE", tuneLength = 10)

# Cezalı regresyon - ElasticNet
set.seed(2023)
cvENET <- train(y ~ ., data = simdata, method = "glmnet",
               preProcess = c("center", "scale"),
               trControl = trainControl(method = "cv", number = 10),
               tuneGrid = expand.grid(alpha = 0.5, lambda = 0),
               metric = "RMSE", tuneLength = 10)

# MARS
set.seed(2023)
cvMARS <- train(y ~ ., data = simdata, method = "earth",
               preProcess = c("center", "scale"),
               trControl = trainControl(method = "cv", number = 10),
               metric = "RMSE", tuneLength = 10)

# RT
set.seed(2023)
cvRT <- train(y ~ ., data = simdata, method = "rpart2",
             preProcess = c("center", "scale"),
             trControl = trainControl(method = "cv", number = 10),
             metric = "RMSE", tuneLength = 10)





# Örnek 5.72: Başarımların incelenmesi
# Bağımlılık: Örnek 5.71
performances <- resamples(list(MLR = cvLM, LinSVM=cvLSVM,
                               RadSVM=cvRSVM, PCR = cvPCR, PLSR = cvPLSR, Ridge=cvRidge,
                               LASSO=cvLasso, ENET = cvENET, MARS = cvMARS, RT=cvRT))
summary(performances)
bwplot(performances)
dotplot(performances)




########################################################################################
# Bolum 6: Evrişimsel Sinir Ağları ile Derin Öğrenme 
########################################################################################


# Örnek 6.1: reticulate paketinin kurulması 1
install.packages('reticulate', repos='https://cloud.r-project.org')


# Örnek 6.2: reticulate paketinin kurulması 2
install.packages('devtools', repos='https://cloud.r-project.org')
devtools::install_github("rstudio/reticulate") 


# Örnek 6.3: miniconda kurulumu
library(reticulate)
install_miniconda(path = "D:/ProgramData/miniconda3", 
                 update = TRUE, force = FALSE)


# Örnek 6.4: miniconda kurulum yolunu açıklama
Sys.setenv(RETICULATE_MINICONDA_PATH = "D:/ProgramData/miniconda3")
conda_create(envname="r-reticulate") 


# Örnek 6.5: r-reticulate ortamının aktifleştirilmesi
C:\>conda activate r-reticulate


# Örnek 6.6: reticulate paketinin yüklenmesi ve miniconda kurulumu kontrolü
library(reticulate)
reticulate::py_config() 


# Örnek 6.7: reticulate ile Python komutlarının çalıştırılması
library(reticulate)
scipy <- import("scipy")
scipy$amax(c(24,13,45,57,22,18))


# Örnek 6.8: Rtools bileşenlerinin yolunu tanımlama
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")


# Örnek 6.9: Rtools kurulumunu kontrol etme
Sys.which("make")


# Örnek 6.10: Rtools ile kaynak kodu derleme
install.packages("ppclust", type = "source", 
                  repo="https://cloud.r-project.org")


# Örnek 6.11: tensorflow paketinin kurulması
install.packages('devtools', repos='https://cloud.r-project.org')
devtools::install_github("rstudio/tensorflow") 

# Örnek 6.12: Tensorflow paketinin GPU sürümünün kurulması
require(tensorflow)
install_tensorflow(gpu = TRUE)


# Örnek 6.13: Keras paketinin kurulması
install.packages('devtools', repos='https://cloud.r-project.org')
devtools::install_github('rstudio/keras') 

# Örnek 6.14: Keras Python sürümünün kurulması
require(keras)
install_keras()  #CPU modu
install_keras(keras='keras-gpu')  #GPU modu


# Örnek 6.15: iris veri setinin keras ile kullanmak için hazırlama
if(!require(magrittr)){
   install.packages("magrittr", repo="https://cloud.r-project.org");
   require(magrittr) }
# 
if(!require(keras)){
   install.packages("devtools", repo="https://cloud.r-project.org");
   devtools::install_github("rstudio/keras");
   require(keras) }
#
# Min-Max normalleştirme fonksiyonu
minmaxnorm <- function(x) (x-min(x))/(max(x) - min(x))

data(iris)
set.seed(1)
iris <- iris[sample(nrow(iris)),]  # Karıştırma
x <- iris[,1:4]
# [0,1] aralığına MinMax normalleştirmesi 
x <- as.matrix(apply(x, 2, minmaxnorm))
head(x,3)
y <- iris[,"Species"]
# Etiket kodlaması
levels(y) <- 1:length(y)
y <- to_categorical(as.integer(y)-1 , num_classes=3)
colnames(y) <- c("setosa", "versicolor","virginica")
rownames(y) <- rownames(x)
head(y, 3)
head(cbind(x,y), 3)

# Örnek 6.16: Eğitim ve test verisinin hazırlanması
# Bağımlılık: Örnek 6.15
# Eğitim ve test verisinin oluşturulması
set.seed(11)
idx <- sample(2, nrow(iris), replace=TRUE, prob=c(0.8, 0.2))
iristrainx <- x[idx==1,]
iristrainy <- y[idx==1,]
iristestx <- x[idx==2, ]
iristesty <- y[idx==2, ]


# Örnek 6.17: MLP modelinin tanımlanması
# Bağımlılık: Örnek 6.16
# Modeli başlat
model1 <- keras_model_sequential()

# Modele katmanlarını tanımla
model1 %>%
  layer_dense(input_shape=ncol(iristrainx), units=16, activation="relu") %>%
  layer_dense(units=8, activation="relu") %>%
  layer_dense(units=ncol(iristrainy), activation="softmax")


# Örnek 6.18: ESA modeline optimize edici ve kayıp fonksiyonu eklenmesi
# Bağımlılık: Örnek 6.17
model1 %>%
  compile(
      loss = "categorical_crossentropy",
      optimizer = "adagrad",  #alternatif olarak "optimizer_rmsprop()" ile dene
      metrics = "accuracy"
    )


# Örnek 6.19: ESA modelinin eğitilmesi
# Bağımlılık: Örnek 6.16, 6.17
historymodel1 <- model1 %>%
   fit(
       x = iristrainx,
       y = iristrainy,
       epochs = 100,
       batch_size = 1,
       validation_split = 0.3,
       shuffle = TRUE,
       verbose=2
     )

# Örnek 6.20: ESA modelinin özetlenmesi 
# Bağımlılık: Örnek 6.17
#
summary(model1)

# Örnek 6.21: ESA modelinin yapısı
# Bağımlılık: Örnek 6.17
model1$layer
model1$inputs
model1$outputs
get_config(model1)
get_layer(model1, index = 1)

# Örnek 6.22: ESA modelinin eğitim geçmişi ve görselleştirilmesi
# Bağımlılık: Örnek 6.17
historymodel1
plot(historymodel1)

# Örnek 6.23: Eğitim ve test verisinde loss geçmişi grafiği
# Bağımlılık: Örnek 6.17
plot(historymodel1$metrics$loss, main="Model Loss", 
     xlab = "Evre", ylab="loss", col="blue", type="l", lwd=2)
lines(historymodel1$metrics$val_loss, col="red", lwd=2)
legend("topright", c("Eğitim","Doğrulama"), 
         col=c("blue", "red"), lwd=c(2,2))

# Örnek 6.24: ESA modeliyle tahmin ve test
# Bağımlılık: Örnek 6.17
#
iristestpreds <- predict(model1, iristestx)
rownames(iristestpreds) <- rownames(iristestx)
dim(iristestpreds)
head(iristestpreds, 3)
testclasses1 <- apply(iristestpreds, 1, which.max)-1
testclasses1
testclasses2 <- k_argmax(iristestpreds)
testclasses2

# Örnek 6.25: Modeli değerlendirme
evaluate(model1, iristrainx, iristrainy, verbose=0)
evaluate(model1, iristestx, iristesty, verbose=0)


# Örnek 6.26: Modeli kaydetme
setwd("D:/mldmbook/models/")
save_model_hdf5(model1, "iris_cnn_100_epochs.h5", overwrite=TRUE)


# Örnek 6.27: Modeli çalışma alanına yükle
setwd("D:/mldmbook/models/")
model1 <- load_model_hdf5("iris_cnn_300_epochs.h5", overwrite=TRUE)


# Örnek 6.28: Model ağırlıklarını kaydetme ve çalışma alanına yükle
setwd("D:/mldmbook/models/")
save_model_weights_hdf5(model1, "iris_cnn_300_weights.h5")
model1 <- load_model_weights_hdf5("iris_cnn_300_weights.h5")

# Örnek 6.29: Modeli JSON olarak kaydetme ve yükleme
jsonmodel1 <- model_to_json(model1)
model1 <- model_from_json(jsonmodel1)


# Örnek 6.30: Modeli klasöre kaydet sakla ve yükle
setwd("D:/mldmbook/models/")
model1 %>% save_model_tf("iris_cnn_100_epoch")
model1 <- load_model_tf("iris_cnn_100_epoch")


# Örnek 6.31: keras ile regresyon modeli eğitimi
if(!require(magrittr)){
   install.packages("magrittr", repo="https://cloud.r-project.org");
   require(magrittr) }

if(!require(keras)){
   install.packages("devtools", repo="https://cloud.r-project.org");
   devtools::install_github("rstudio/keras");
   require(keras) }

n <- 200
set.seed(14)
x <- runif (n, 0, 2*pi)
y <- sin(x) + 0.2 * rnorm(length(x))
plot(x,y, pch=19, col=4, cex=0.8)

set.seed(11)
idx <- sample(2, length(x), replace=TRUE, prob=c(0.8, 0.2))
trainx <- as.matrix(x[idx==1]) 
trainy <- as.matrix(y[idx==1])
testx <- as.matrix(x[idx==2])  
testy <- as.matrix(y[idx==2])

modelnlm <- keras_model_sequential()

modelnlm %>%
  layer_dense(units = 64, 
                input_shape = dim(trainx)[2],
                activation = "relu") %>%
  layer_dense(units = 32,
                activation = "relu") %>%
  layer_dense(units = 1,
                activation="linear"
           ) 

modelnlm %>% compile(
    loss = "mse",
    optimizer = optimizer_adam(), # optimizer_rmsprop(),
    metrics = c('mean_absolute_error','mean_squared_error')
 )

historymodelnlm <- modelnlm %>% fit(
   x = trainx,
   y = trainy,
   epochs = 50,
   validation_split = 0.2,
#validation_data = list(xvalidation, yvalidation),
   shuffle = TRUE,
   verbose=2
 ) 

summary(modelnlm)

plot(historymodelnlm)

# Örnek 6.32: Model başarımının değerlendirilmesi
# Eğitim seti
#modelnlm %>% fit(trainx, trainy, epochs=50, verbose=0)
trainmetrics <- modelnlm %>% evaluate(trainx, trainy, verbose=0)
print(trainmetrics)

# Test seti
testmetrics <- modelnlm %>% evaluate(testx, testy, verbose=0)
print(testmetrics)
# Tahmin işlemi
ypreds <- modelnlm %>% predict(testx) 
colnames(ypreds) <- "yhat"
head(ypreds, 3)

# Gerçek ve tahmin değerlerinin karşılaştırılması
xvals <- seq(1:length(ypreds))
plot(xvals, testy, type="l", col="green", xlab="Gözlem", ylab="Y", lwd=5)
lines(xvals, ypreds, col="blue")
legend("bottom", legend=c("Gerçek", "Tahmin"),
       col=c("green", "blue"), lty=1, cex=0.8)


# Örnek 6.33: Modeli kaydetme
setwd("D:/mldmbook/models")
save_model_hdf5(model1, "regresyon_cnn_50_epochs.h5", overwrite=TRUE)


# Örnek 6.34: Modeli çalışma alanına yükleme
setwd("D:/mldmbook/models")
model1 <- load_model_hdf5("regresyon_cnn_50_epochs.h5", overwrite=TRUE)


# Örnek 6.35a: İki sınıflı görüntü sınıflama – Aşama 1
# Paketleri yükle 
if(!require(magrittr)){ 
   install.packages("magrittr", repo="https://cloud.r-project.org");
   require(magrittr) }
#
if(!require(keras)){
   install.packages("devtools", repo="https://cloud.r-project.org");
   devtools::install_github("rstudio/keras");
   require(keras) }
#
if(!require(tensorflow)){
   install.packages("devtools", repo="https://cloud.r-project.org");
   devtools::install_github("rstudio/tensorflow");
   require(tensorflow) }
options(scipen=999) #Üslü sayı gösterimini önle
set_random_seed(1919)


# Örnek 6.35b: İki sınıflı görüntü sınıflama – Aşama 3
# Görüntü klasörlerini ve dosyaları tanımlama
base_path <- "D:/mldmbook/apples"
setwd(base_path)
train_images_path <- paste0(base_path, "/train/")
test_images_path <- paste0(base_path, "/test/")
train_images_list <- list.files(train_images_path, full.names=TRUE) 
test_images_list <- list.files(test_images_path, full.names=TRUE) 


# Örnek 6.35c: İki sınıflı görüntü sınıflama – Aşama 4
# Parametreleri tanımlama
# Hedef görüntü yeni boyutları
img_width <- 220
img_height <- 220
target_size <- c(img_width, img_height)
batch_size <- 3 # Yığın büyüklüğü
number_epochs <- 25 # Evre sayısı

# Örnek 6.35d: İki sınıflı görüntü sınıflama – Aşama 5
# Görüntü okuma ve işleme fonksiyonu
read_images <- function(image_list) {
   gray_images <- lapply(image_list, image_load, grayscale=T) #Gri ölçekleme
   gray_images <- lapply(gray_images, image_to_array) # Diziye çevirme
   gray_images <- lapply(gray_images, image_array_resize, 
                            +      height=img_height, width=img_width) # Yeniden boyutlandırma
   gray_images <- normalize(gray_images, axis=1) # Normalleştirme 
   return(gray_images)
 }

# Görüntüleri oku
train_images <- read_images(train_images_list) #Eğitim görüntülerini oku
test_images <- read_images(test_images_list) #Test görüntülerini oku
# Sınıfları tanımla
train_classes <- c(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1) #Eğitim sınıfları
test_classes <- c(0,0,0,1,1,1) #Test sınıfları
# Sınıf etiketlerinin kategori etiketlerini (one-hot encoding) oluştur
train_class_labels <- to_categorical(train_classes) 
test_class_labels <- to_categorical(test_classes)
# Shiny apps uygulamalarında kullanmak için elma adlarını sakla
apple_names <- c("Gala", "Red Delicious")
save(apple_names, file="apple_names.RData")

# Örnek 6.35e: İki sınıflı görüntü sınıflama 
attributes(train_images)
plot(as.raster(train_images[5,,,]))

# Örnek 6.35f: İki sınıflı görüntü sınıflama – Aşama 4
# Model tanımlama
# Evrişim düzeyinin (convolutional level) tanımlanması
apple_model <- keras_model_sequential() %>% 
   layer_conv_2d(filters = 32, kernel_size = c(3,3), 
                 input_shape = c(img_width,img_height,1), activation = "relu") %>% 
   layer_max_pooling_2d(pool_size = c(2,2)) %>% 
   layer_conv_2d(filters = 64, kernel_size = c(3,3), activation = "relu") %>% 
   layer_max_pooling_2d(pool_size = c(2,2))
# Üst düzeyin (top level) tanımlanması
apple_model %>% 
   layer_flatten() %>% 
   layer_dense(units = 32, activation = "relu") %>% 
   layer_dense(units = 64, activation = "relu") %>% 
   layer_dense(units = 2, activation = "sigmoid")
#
# Ağ mimarisini inceleme
summary(apple_model)


# Örnek 6.35g: İki sınıflı görüntü sınıflama – Aşama 5
# Model derleme
# 
apple_model %>%
   compile(
      optimizer='adam',
      loss='binary_crossentropy', 
      metrics=c('accuracy')
   )

# Örnek 6.35h: İki sınıflı görüntü sınıflama – Aşama 6
# Modelin eğitilmesi
history_apple_model <- apple_model %>%
   fit(
     x=train_images, 
     y=train_class_labels, 
     validation_split=0.2,
     epochs=number_epochs, 
     batch_size=batch_size,
     callbacks=callback_tensorboard("logs/apples_model_1"),
     verbose=1
   ) 

# Örnek 6.35i: İki sınıflı görüntü sınıflama – Aşama 7
# Modeli değerlendirme
apple_model %>%
   evaluate(train_images, train_class_labels)

# Model doğruluk ve kayıp geçmişi grafiği
plot(history_apple_model)


# Örnek 6.35j: İki sınıflı görüntü sınıflama – Aşama 8
# Test değerlendirmesi
apple_model %>%
   evaluate(test_images, test_class_labels)


# Örnek 6.35k: İki sınıflı görüntü sınıflama – Aşama 9
# Test görüntülerinin sınıfını tahmin etme
#
test_preds <- apple_model %>% predict(test_images) %>% round(8)
test_preds


# Örnek l: İki sınıflı görüntü sınıflama – Aşama 10
# Yanılgı matrisi ve sınıflama başarım ölçütleri
#
test_pred_classes <- apply(test_preds,1, which.max)-1
test_pred_classes
table(Tahmin = test_pred_classes, Gerçek = test_classes)
test_pred_probs <- apply(test_preds,1, max) 
test_pred_probs <- round(test_pred_probs*100,2) 
test_pred_probs 


# Örnek 6.35m: İki sınıflı görüntü sınıflama – Aşama 7
# Bazı test görüntülerini ve tahminleri gösterme
# Test görüntülerini örnekle ve olasılıklarını belirle
set.seed(9)
imgidx <- sample(1:length(test_images_list), 4)
images_pred_classes <- test_pred_classes[imgidx]
images_pred_probs <- test_pred_probs[imgidx]
# Görüntüleme
opar <- par(mfrow = c(2, 2), mar=rep(0, 4))
for(i in 1:length(imgidx)){
   image(t(apply(test_images[imgidx[i],,,], 2, rev)),
         col=gray.colors(16), axes=FALSE)
legend("topleft", legend=paste("%", images_pred_probs[i], 
         ifelse(images_pred_classes[i] == 0, "Gala", "Red Delicious")),
         text.col=ifelse(images_pred_classes[i] == 0, "blue", "red"),
         text.font=1, bty="n")
 }
par(opar)


# Örnek 6.35n: İki sınıflı görüntü sınıflama – Aşama 8
suppressPackageStartupMessages(installed <- require(magick))
if (!installed){
    install.packages("magick", repo="https://cloud.r-project.org", 
                      dependecies = TRUE)
    suppressPackageStartupMessages(require(magick)) } 

base_path <- "D:/mldmbook/test_images/"
img_path <- paste0(base_path, "/red_delicious_x.jpg")
unseen_image <- image_read(img_path)
opar <- par(mar=c(0,0,0,0))
plot(unseen_image)
text(100,50, "Merhaba! \n Acaba ben hangi elmayım?")
par(opar)


# Örnek 6.35o: İki sınıflı görüntü sınıflama – Aşama 9
target_size <- c(img_height, img_width)
unseen_image <- image_load(img_path, grayscale=T, target_size=target_size)
unseen_image <- image_to_array(unseen_image)
unseen_image <- array_reshape(unseen_image, c(1, dim(unseen_image)))
unseen_image <- unseen_image/255
prediction <- apple_model %>% predict(unseen_image)
prediction <- data.frame(
   "Elma" = c("Gala", "Red Delicious"), "Olasılık" = t(prediction))
prediction <- prediction[order(prediction$Olasılık, decreasing=T),][1:2,]
prediction$Olasılık <- paste("%", round(prediction$Olasılık*100, 2))
prediction
opar <- par(mar=rep(0,4))
image(t(apply(unseen_image[1,,,1], 2, rev)),
       col=gray.colors(16), axes=FALSE)
legend("bottom", legend=paste("Ben", prediction$Olasılık[1], 
       "olasılıkla", prediction$Elma[1], "çeşidiyim. Afiyet olsun!"), 
       text.col="blue", text.font=4, bty='n')
par(opar)


# Örnek 6.35p: Modelin kaydedilmesi
# RData formatı
base_path <- "D:/mldmbook/models/"
apple_model %>% save(file=paste0(mpath, "apple_model_epoch_25_1.RData"))
# veya HDF5 formatında dosyaya kaydet
apple_model %>% save_model_hdf5(paste0(mpath, "apple_model_epoch_25_1.h5"))
# veya TF formatında klasöre kaydet
apple_model %>% save_model_tf(paste0(mpath, "apple_model_epoch_25_1"))


# Örnek 6.35r: Kayıtlı modelin okunması
base_path <- "D:/mldmbook/models/"
apple_model <- load (paste0(base_path,"apple_model_epoch_25_1.RData")) 
# veya hdf5 formatındaki dosyayı oku
apple_model <- load_model_hdf5(paste0(base_path,"apple_model_epoch_25_1.h5"))
# veya TF formatındaki modeli oku
apple_model <- load_model_tf(paste0(base_path,"apple_model_epoch_25_1"))


# Örnek 6.35s: Model ağırlıklarını kaydetme ve okuma
> base_path <- "D:/mldmbook/models/"

# TF formatında kaydetme
apple_model %>% 
   save_model_weights_tf(paste0(base_path,"apple_model_epoch_25_1_weights"))

# HDF5 formatında kaydetme
apple_model %>% 
  save_model_weights_hdf5(
  paste0(base_path,"apple_model_epoch_25_1_weights.h5"))

# TF formatındaki modeli yükleme
apple_model2 <- load_model_weights_tf(apple_model, 
                 paste0(base_path, "apple_model_epoch_25_1_weights")) 

# HDF5 formatında modeli yükleme
apple_model2 <- load_model_weights_hdf5(apple_model, 
                 filepath=paste0(base_path,"apple_model_epoch_25_1_weights.h5")) 
apple_model2
get_config(apple_model2)


# Örnek 6.35t: YAML ve JSON formatı
# JSON formatında serileştirme
apple_json_string <- apple_model %>% model_to_json()

# Modeli yeniden oluşturma
apple_model_json <- model_from_json(apple_json_string)

# YAML formatında serileştirme
apple_yaml_string <- apple_model %>% model_to_yaml()

# Modeli yeniden oluşturma
apple_model_yaml <- model_from_yaml(apple_yaml_string)


# Örnek 6.36a: Domates hastalıkları için ESA modeli – Aşama 1
# Paketleri yükle 
if(!require(tidyr)){ 	
   install.packages("tidyr", repo="https://cloud.r-project.org");
   require(tidyr) }
#
if(!require(magrittr)){ 
   install.packages("magrittr", repo="https://cloud.r-project.org");
   require(magrittr) }
#
if(!require(dplyr)){ 	
   install.packages("dplyr", repo="https://cloud.r-project.org");
   require(dplyr) }
#
if(!require(keras)){
   install.packages("devtools", repo="https://cloud.r-project.org");
   devtools::install_github("rstudio/keras");
   require(keras) }
#
if(!require(tensorflow)){
   install.packages("devtools", repo="https://cloud.r-project.org");
   devtools::install_github("rstudio/tensorflow");
   require(tensorflow) }

# Örnek 6.36b: Domates hastalıkları için ESA modeli – Aşama 2
# Görüntü ve analiz dosyaları klasörlerinin tanımlanması
base_path <- "D:/mldmbook/tomato"
setwd(base_path)
train_images_path <- paste0(base_path,"/tomato/train")
validation_images_path <- paste0(base_path,"/tomato/validation")

# Örnek 6.36c: Domates hastalıkları için ESA modeli – Aşama 3
# Domates hastalık snıf etiketleri (adları)
class_labels <- list.files(train_images_path, full.names=FALSE)
class_labels
#
class_number <- length(class_labels) # Sınıf sayısı
class_number
# 
# Alternatif yöntemle sınıf etiketlerini listeleme ve kaydetme
class_labels <- dir(train_images_path)
class_number <- length(class_labels)

save(class_labels, file="tomato_disease_classes.RData")

# Hedef görüntü yeni boyutları
img_width <- 256
img_height <- 256
target_size <- c(img_width, img_height)  #Hedef görüntü boyutları
number_channels <- 3   # RGB kanalları sayısı
#
batch_size <- 32 # Yığın büyüklüğü
number_epochs <- 15 # Evre sayısı

# Örnek 6.36d: Görüntülerin okunması ve işlenmesi – Aşama 4a
# Eğitim verisi oluşturucusu
train_data_gen <- image_data_generator(
   rescale = 1/255
 )
#
# Doğrulama verisi oluşturucusu
validation_data_gen <-image_data_generator(
   rescale = 1/255
 )
#
# Eğitim görüntülerini aktarma
train_images_array <- flow_images_from_directory(
   directory = train_images_path, 
   generator = train_data_gen,
   target_size = target_size,
   class_mode = "categorical",
   classes = class_labels,
   batch_size = batch_size,
   shuffle = TRUE,
   seed = 2023
 )
#
# Doğrulama görüntülerini aktarma
validation_images_array <- flow_images_from_directory(
   directory = validation_images_path,
   generator = validation_data_gen,
   target_size = target_size,
   class_mode = "categorical",
   classes = class_labels,
   batch_size = batch_size
 )


# Örnek 6.36e: Görüntülerin okunması ve işlenmesi (Alternatif yol) - Aşama 4b
# Ortak veri oluşturucusu
general_data_gen <- image_data_generator(
   rescale = 1/255 
 ) 
#
# Eğitim görüntülerini aktarma
train_images_array <- flow_images_from_directory(
   directory = train_images_path, 	
   generator = general_data_gen	,
   target_size = target_size,
   class_mode = "categorical",
   classes = class_labels,
   batch_size = batch_size,
   shuffle = TRUE,
   seed = 2023
 )
#
# Doğrulama görüntülerini aktarma
validation_images_array <- flow_images_from_directory(
   validation_images_path,
   generator = general_data_gen,
   target_size = target_size,
   class_mode = "categorical",
   classes = class_labels,
   batch_size = batch_size
 )


# Örnek 6.36f: Sınıf etiketleri  - Aşama 5
head(train_images_array$classes)
tail(train_images_array$classes)
train_images_array$class_indices 

# Sınıf etiketleri ve indis eşleştirmesi tablosu
t(as.data.frame(train_images_array$class_indices))

# Sınıflara göre görüntü sayıları
table(factor(train_images_array$classes))
number_train_images <- train_images_array$n  
number_validation_images <- validation_images_array$n 
#
cat("Eğitim görüntüsü sayısı:",  number_train_images, "\n")
#
cat("Doğrulama görüntüsü sayısı:",  number_validation_images, "\n")

# Bir eğitim görüntüsünün gösterilmesi
plot(as.raster(train_images_array[[1]][[1]][2,,,]))


# Örnek 6.36g:  Model oluşturma  - Aşama 6
# Modeli oluştur
tomato_diseases_model <- keras_model_sequential()
tomato_diseases_model %>%
# Evrişim katmanı 1
  layer_conv_2d(input_shape = c(img_width, img_height, number_channels),
               filter = 64, kernel_size = c(3,3), padding = "same") %>%
  layer_activation("relu") %>%
# Max pooling katmanı 1
  layer_max_pooling_2d(pool_size = c(2,2)) %>%
# Evrişim katmanı 2
  layer_conv_2d(filter = 32, kernel_size = c(3,3), padding = "same", 
              input_shape = c(img_width, img_height, number_channels)) %>%
  layer_activation("relu") %>%
# Evrişim katmanı 3
  layer_conv_2d(filter = 16, kernel_size = c(3,3), padding = "same") %>% 
  layer_activation_leaky_relu(0.5) %>%
  layer_batch_normalization() %>%
# Max pooling katmanı 2
  layer_max_pooling_2d(pool_size = c(2,2)) %>% 
# Düzleştirme (flatten) 
  layer_flatten() %>%
  layer_dense(units=200) %>%
  layer_activation("relu") %>%
# Çıkış katmanı 
  layer_dense(units = class_number) %>% 
  layer_activation("softmax")


# Örnek 6.36h: Model derleme ve gösterme  - Aşama 7
tomato_diseases_model %>% compile(
   loss = "categorical_crossentropy",
   optimizer = optimizer_rmsprop(lr = 0.0001, decay = 1e-6),
   metrics = "accuracy"
 )
#
# Modeli özetle (hata verirse eğitimden sonra
summary(tomato_diseases_model)


# Örnek 6.36i: Modeli eğitme 1 – Aşama 8
history_tomato_diseases_model <- tomato_diseases_model %>% 
   fit(
   # Eğitim verisi
    train_images_array,
   # Evreler
    epochs = number_epochs, 
    steps_per_epoch = as.integer(number_train_images / batch_size),
   # Doğrulama verisi
    validation_data = validation_images_array,
    validation_steps = as.integer(number_validation_images / batch_size),
   # İlerleme bilgilendirmesi
    verbose = 2
 )


# Örnek 6.36j: Model eğitim ve doğrulama başarımı ve grafiği  - Aşama 9
history_tomato_diseases_model

plot(history_tomato_diseases_model)

# Örnek 6.36k: Modeli eğitme 2  - Aşama 10
callbacks <- list(
   callback_early_stopping(patience = 5, monitor = 'val_loss'),
   callback_tensorboard(paste0(base_path,"/logs")),
   callback_model_checkpoint(paste0(base_path, 
                             "/cpoints/tomato_diseases_checkpoints.h5", save_best_only=TRUE))
 )
history_tomato_diseases_model <- tomato_diseases_model %>% 
   fit(
    train_images_array,
    validation_data = validation_images_array,
    validation_steps = as.integer(number_validation_images / batch_size),
    epochs = number_epochs, 
    steps_per_epoch = as.integer(number_train_images / batch_size),
    callbacks = callbacks, 
    verbose = 3
 )

# Örnek 6.36l: TensorBoard ile görselleştirme - Aşama 11
tensorboard(paste0(base_path,"/logs"))

# Örnek 6.36m: Modelin kaydedilmesi - Aşama 12
tomato_diseases_model %>% save_model_tf("tomato_diseases_model_epoch_15_1")

# Örnek 6.36n: Kayıtlı modelin okunması - Aşama 13
tomato_diseases_model <- load_model_tf("tomato_diseases_model_epoch_15_1") 

# Örnek 6.36o: Modelin test edilmesi – Aşama 14
# Test verileri klasörü
base_path <- "D:/mldmbook/tomato"
setwd(base_path)
test_images_path <- paste0(base_path,"/tomato/test")
# Test verisi işleme
test_data_gen <- image_data_generator(
   rescale = 1/255
 )  
# Test görüntüleri
test_generator <- flow_images_from_directory(
   directory = test_images_path,
   generator = test_data_gen,
   target_size = target_size,
   class_mode = "categorical",
   classes = class_labels,
   batch_size = batch_size,
   shuffle = FALSE)
#
tomato_diseases_model %>%
  evaluate(test_generator, 
           steps = as.integer(test_generator$n))

# Örnek 6.36p: Sınıf indisleri ve etiketleri tablosu – Aşama 15
classes <- test_generator$classes %>%
   factor() %>% table() %>% as_tibble()
colnames(classes)[1] <- "value"
classes
#
# Sınıf indisi ve adları için bir eşleştirme tablosu oluştur
indices <- test_generator$class_indices %>%
   as.data.frame() %>% 
   gather() %>%
   mutate(value = as.character(value)) %>%
   left_join(classes, by = "value")
indices


# Örnek 6.36r: Tahmin işlemi  – Aşama 16
#test_generator$reset() # gerekli değil ancak kullanılması karışıklığı önler
predictions <- tomato_diseases_model %>% 
   predict(
     x = test_generator,
     steps = as.integer(test_generator$n)) %>%
   round(digits = 2) %>% 
   as_tibble() 
#
colnames(predictions) <- indices$key
str(predictions)
#
predictions <- predictions %>%
   mutate(pred_lbl = as.character(test_generator$classes)) %>%
   left_join(indices, by = c("pred_lbl" = "value"))
#
str(predictions)

pred_table <- predictions %>%
   mutate(img_id = seq(1:test_generator$n)) %>%
   gather(pred_lbl, y,  Bacterial_spot:Yellow_leaf_curl_virus) %>%
   group_by(img_id) %>%
   filter(y == max(y)) %>%
   arrange(img_id) %>%
   group_by(key, n, pred_lbl) %>%
   count()
#

pred_table


# Örnek 6.36s: Yanılgı matrisi grafiği – Aşama 17
if(!require(ggplot2)){ 	
   install.packages("ggplot2", repo="https://cloud.r-project.org");
   require(ggplot2) }
#
cmgraph <- pred_table %>%
   mutate(percentage_pred = nn / n * 100) %>%
   ggplot(aes(x = key, y = pred_lbl, 
                   fill = percentage_pred,
                   label = round(percentage_pred, 2))) +
     geom_tile() +
     scale_fill_gradient(low = "red", high = "blue") +
     geom_text(color = "yellow", size = 4) +
     theme(axis.text.x = element_text(angle = 45, 
                    vjust = 1, hjust = 1, size=10)) +
     labs(x = "Gerçek Sınıf", 
          y = "Tahmin Edilen Sınıf",
          fill = "Tahmin\n Yüzdesi",
          title = "Yanılgı Matrisi Grafiği", 
          subtitle = "Domates Hastalıkları Veri Seti",
          caption = "Kırmızı: Düşük yüzde, Mavi: Yüksek yüzde")
cmgraph


# Örnek 6.36t: Doğru-Yanlış tablosu grafiği – Aşama 18
if(!require(ggplot2)){ 	
   install.packages("ggplot2", repo="https://cloud.r-project.org");
   require(ggplot2) }
#
dytablografik <- pred_table %>%
   mutate(prediction = case_when(
   key == pred_lbl ~ "DOĞRU", TRUE ~ "YANLIŞ")) %>%
   group_by(key, prediction, n) %>%
   summarise(sum = sum(nn)) %>%
   mutate(percentage_pred = sum / n * 100) %>%
   ggplot(aes(x = key, y = prediction, 
       fill = percentage_pred,
       label = round(percentage_pred, 2))) +
   geom_tile() +
   geom_text(color = "yellow") +
   coord_flip() +
   scale_fill_gradient(low = "red", high = "blue") +
   labs(x = "Gerçek Sınıf", 
        y = "Tahmin",
        fill = "Tahmin\n Yüzdesi",
        title = "Doğru ve Yanlış Tahminler Tablosu", 
        subtitle = "Domates Hastalıkları Veri Seti",
        caption = "Kırmızı: Düşük yüzde, Mavi: Yüksek yüzde")
dytablografik

# Örnek 6.36u: Başarım ölçütleri – Aşama 19
# Bağımlılık: Kod 4.2
#
predictions$predicted <- apply(predictions, 1, which.max)-1
predictions$actual <- test_generator$classes

mcreport <- multi_class_metrics(predictions$predicted, predictions$actual)
confmat <- mcreport$confmat
confmat

all_metrics <- mcreport$criteria
all_metrics

accuracy <- mcreport$accuracy
accuracy
wF1 <- mcreport$weighted.F1
wF1


# Örnek 6.37a:  Bırakma katmanlı model oluşturma 1
# Modeli oluştur
tomato_diseases_model_2 <- keras_model_sequential()
tomato_diseases_model_2 %>%
# Giriş evrişim katmanı 1
 layer_conv_2d(input_shape = c(img_width, img_height, number_channels),
               filter = 64, kernel_size = c(3,3), padding = "same") %>%
   layer_activation("relu") %>%
# Max pooling katmanı 1
   layer_max_pooling_2d(pool_size = c(2,2)) %>%
# Evrişim katman 2
  layer_conv_2d(filter = 32, kernel_size = c(3,3), padding = "same", 
                  input_shape = c(img_width, img_height, number_channels)) %>%
  layer_activation("relu") %>%
# Evrişim katmanı 3
  layer_conv_2d(filter = 16, kernel_size = c(3,3), padding = "same") %>%
  layer_activation_leaky_relu(0.5) %>%
  layer_batch_normalization() %>%
# Max pooling katmanı 2
  layer_max_pooling_2d(pool_size = c(2,2)) %>% 
# Bırakma katmanı 1
  layer_dropout(0.5) %>%
# Düzleştirme (flatten) 
  layer_flatten() %>%
  layer_dense(units=200) %>%
  layer_activation("relu") %>%
# Bırakma katmanı 2
  layer_dropout(0.5) %>%
# Çıkış katmanı 
  layer_dense(units = class_number) %>% 
  layer_activation("softmax")
#
tomato_diseases_model_2 %>% compile(
  loss = 'categorical_crossentropy',
  optimizer = optimizer_rmsprop(lr = 0.0001, decay = 1e-6),
  metrics = 'accuracy'
 )


# Örnek 6.37b: Bırakma katmanlı modelin başarımı
tomato_diseases_model_2
plot(history_tomato_diseases_model_2)

# Örnek 6.37c: Modelin test edilmesi 
# Test verileri klasörü
base_path <- "D:/mldmbook/tomato"
setwd(base_path)
test_images_path <- paste0(base_path,"/tomato/test")
# Test verisi işleme
test_data_gen <- image_data_generator(
   rescale = 1/255
 )  
# Test görüntüleri
test_generator <- flow_images_from_directory(
   directory = test_images_path,
   generator = test_data_gen,
   target_size = target_size,
   class_mode = "categorical",
   classes = class_labels,
   batch_size = 1,
   seed = 2023)
#
tomato_diseases_model_2 %>%
  evaluate(test_generator, 
           steps = as.integer(test_generator$n))


# Örnek 6.38a: Veri çoğaltma için görüntü oluşturucu
augmented_data_gen <- image_data_generator(
   rescale = 1/255,
   rotation_range = 45,
   width_shift_range = 0.2,
   height_shift_range = 0.2,
   shear_range = 0.2,
   zoom_range = 0.2,
   horizontal_flip = TRUE,
   fill_mode = "nearest"
 )


# Örnek 6.38b: Domates hastalıkları görüntü çoğaltma uygulamasını anlama
# Paketleri yükle
if(!require(EBImage)){
   install.packages("EBImage", repo="https://cloud.r-project.org");
   require(EBImage) }
if(!require(magrittr)){
   install.packages("magrittr", repo="https://cloud.r-project.org");
   require(magrittr) }
if(!require(keras)){
   install.packages("devtools", repo="https://cloud.r-project.org");
   devtools::install_github("rstudio/keras");
   require(keras) }
#
# Görüntü klasörünün tanımlanması
base_path <- "D:/mlmbook/tomato"
images_path <- paste0(base_path,"/tomato/train/Mosaic_virus")
image_list <- list.files(images_path, full.names = TRUE)
img_idx <- sample(1:length(image_list), 1)
img_sampled <- image_list[img_idx]
img_width <- 160; img_height <- 160
target_size <- c(img_width, img_height)
# Çoğaltma öncesinde orijinal görüntü
opar <- par(mfrow = c(3,2), pty='s', mar=c(1, 0, 1, 0))
readImage(img_sampled) %>% 
   resize(w = img_width, h = img_height) %>% 
   display(method = 'raster')
text(0,10, paste("Orijinal\nGörüntü #",img_idx), col="White", cex=0.9)
# Görüntüyü yükle ve yeniden boyutlandır
image <- image_load(img_sampled, target_size = target_size)
# PIL formatından (width, height, channels) biçiminden diziye dönüştürme
img_array <- image_to_array(image)
# Batch boyutu ekleyerek yeniden biçimlendir
img_array <- array_reshape(img_array, c(1, img_width, img_height, 3))
# img_array'den çoğaltılmış görüntü yığınları oluştur
augmentation_generator <- flow_images_from_data(
   img_array, # Dört ranklı olması gerekir
   generator = augmented_data_gen, # Çoğaltma veri oluşturucususu (Bkz. Örnek)
   batch_size = 1
 )
# Değiştirilmiş 5 görüntüyü göster
for (i in 1:5) {
   img_augmented <- generator_next(augmentation_generator)
   plot(as.raster(img_augmented[1,,,]))
   text(20, 10, paste("Çoğaltılmış\nGörüntü:",i), col="White", cex=0.9)
 }
par(opar)


# Örnek 6.38c: Eğitim ve doğrulama görüntülerini veri attırmalı okuma
train_images_array <- flow_images_from_directory(
   directory = train_images_path,
   generator = augmented_data_gen,
   target_size = target_size,
   batch_size = batch_size,
   class_mode = 'categorical'
   classes = class_labels,
   shuffle = TRUE,
   seed = 2023
 )
#
validation_images_array <- flow_images_from_directory(
   directory = validation_images_path,
   generator = augmented_data_gen,
   target_size = target_size,
   batch_size = batch_size,
   class_mode = 'categorical'
   classes = class_labels,
   shuffle = TRUE,
   seed = 2023
 )


# Örnek 6.38d: Modeli tanımlama ve derleme
tomato_augmented_model <- keras_model_sequential() %>%
  layer_conv_2d(input_shape = c(img_width, img_height, number_channels), 
               filters = 32, kernel_size = c(3, 3), 
               activation = 'relu' ) %>%
  layer_max_pooling_2d(pool_size = c(2, 2)) %>%
  layer_conv_2d(filters = 64, kernel_size = c(3, 3), activation = 'relu') %>%
  layer_max_pooling_2d(pool_size = c(2, 2)) %>%
  layer_conv_2d(filters = 128, kernel_size = c(3, 3), activation = 'relu') %>%
  layer_max_pooling_2d(pool_size = c(2, 2)) %>%
  layer_flatten() %>%
  layer_dense(units = 512, activation = 'relu') %>%
  layer_dense(units = class_number, activation = 'softmax')

# Modeli derleme
tomato_diseases_augmented_model %>%
  compile(
     loss = 'categorical_crossentropy',
     optimizer = optimizer_rmsprop(lr = 0.0001, decay=1e-04),
     metrics = 'accuracy'
   )


# Örnek 6.38e: Eğitim ve eğitim geçmişi
history_tomato_diseases_augmented_model <- tomato_diseased_augmented_model %>% 
 fit(
    generator = train_images_array,
    epochs = 5,
    steps_per_epoch = 30, 
    validation_data = validation_images_array,
    validation_steps = 20 
    )

summary(history_tomato_diseases_augmented_model)
plot(history_tomato_diseases_augmented_model)

tomato_diseases_augmented_model %>% 
   save_model_hdf5("tomato_diseases_augmented_model.h5") 


# Örnek 6.39a: Temel model
base_model <- keras_model_sequential()
base_model %>%
  layer_conv_2d(input_shape = c(img_width, img_height, number_channels),
                  filter = 64, kernel_size = c(3,3), padding = "same") %>%
  layer_activation("relu") %>%
  layer_max_pooling_2d(pool_size = c(2,2)) %>%
  layer_activation("relu")


# Kod 6.1: Model oluşturma fonksiyonu
model_generator <- function(base_model, lr= 0.001, dor=0.2, nd=1024){
   k_clear_session()
   generated_model <- keras_model_sequential() %>%
       base_model %>% 
       layer_dense(units = nd) %>%
       layer_activation("relu") %>%
       layer_dropout(dor) %>%
       layer_dense(units=class_number, activation="softmax")
   generated_model %>% compile(
       loss = "categorical_crossentropy",
       optimizer = optimizer_adam(lr = lr),
       metrics = "accuracy"
    )
  return(generated_model)
  }


# Örnek 6.39b: Parametre ayarlama ızgarası
parameter_tune_grid <- data.frame(
   "lr" = c(0.001, 0.0001),  # Öğrenme hızı
   "dor" = c(0.5, 0.2),      # Bırakma oranı
   "nd" = c(256, 1024)       # Yoğunluk
  )


# Örnek 6.39c: Parametre ayarlama denemesi
tuned_results <- NULL
set.seed(2023)
for (i in 1:length(parameter_tune_grid$lr)){
  for (j in 1:length(parameter_tune_grid$dor)){
    for (k in 1:length(parameter_tune_grid$nd)){
      tuned_model <- model_generator(
        lr = parameter_tune_grid$lr[i],
        dor = parameter_tune_grid$dor[j],
        nd = parameter_tune_grid$nd[k])
#
      history_tuned_model <- tuned_model %>% 
        fit(
          train_images_array,
          steps_per_epoch = train_images_array$n %/% batch_size, 
          epochs = number_epochs, 
          validation_data = validation_images_array,
          validation_steps = validation_images_array$n %/% batch_size,
          verbose = 2
          )
      # Model parametreleri ve doğruluk matrisi
      tuned_results <- rbind(
        tuned_results,
        c("Learning_rate" = parameter_tune_grid$lr[i],
                     "Dropout_rate" = parameter_tune_grid$dor[j],
                     "N_dense" = parameter_tune_grid$nd[k],
                     "val_accuracy" = history_tuned_model$metrics$val_accuracy))
      }
    }
  }


# Örnek 6.39d: Sonuçların incelenmesi
tuned_results

best_result <- tuned_results[which( 
  tuned_results[,ncol(tuned_results)] == 
    max(tuned_results[,ncol(tuned_results)])),]

best_result 


# Örnek 6.39e: En iyi parametrelerle model eğitimi
#
number_epochs <- 25
tomato_diseases_tuned_model <- model_generator(
  lr = best_result["Learning_rate"],
  dor = best_result["Dropout_rate"],
  nd = best_result["N_dense"])

history_tomato_diseases_tuned_model <- tomato_diseases_tuned_model %>%
  fit(
    train_images_array,
    steps_per_epoch = number_train_images %/% batch_size, 
    epochs = number_epochs, 
    validation_data = validation_images_array,
    validation_steps = number_validation_images %/% batch_size,
    verbose = 2
    )


# Örnek 6.39f: Modelin test edilmesi 
# Test verileri klasörü
base_path <- "D:/mldmbook/tomato"
setwd(base_path)
test_images_path <- paste0(base_path,"/tomato/test")
# Test verisi işleme
test_data_gen <- image_data_generator(
  rescale = 1/255
  )  
# Test görüntüleri
test_generator <- flow_images_from_directory(
  directory = test_images_path,
  generator = test_data_gen,
  target_size = target_size,
  class_mode = "categorical",
  classes = class_labels,
  batch_size = 1,
  seed = 2023)
# Eğitilen modelin yüklenmesi
load_model_tf("tomato_diseases_tuned_model") %>% tomato_diseases_tuned_model 
# Test değerlendirmesi
tomato_diseases_tuned_model %>%
  evaluate(test_generator, 
              steps = as.integer(test_generator$n))

# Örnek 6.39g: Eğitilen modelin kaydedilmesi
base_path <- "D:/mldmbook/models/"
tomato_diseases_tuned_model %>% 
  save_model_tf("tomato_diseases_tuned_model")


# Örnek 6.39h: Tahmin işlemleri 
base_path <- "D:/mldmbook/models/"
load_model_tf("tomato_diseases_tuned_model")

predictions <- tomato_diseases_tuned_model %>% 
  predict(
    x = test_generator,
    steps = test_generator$n
    ) %>% as.data.frame
names(predictions) <- class_labels
predictions$predicted_class <- 
  paste0("Class",apply(predictions,1,which.max)-1)
predictions$true_class <- paste0("Class",test_generator$classes)
predictions %>% group_by(true_class) %>% 
  summarise(percentage_true = round(100*sum(predicted_class == 
                                                true_class)/n(),2)) %>% 
  left_join(data.frame(Disease= names(test_generator$class_indices), 
                      true_class=paste0("Class",0:8)),by="true_class") %>%
  select(Disease, percentage_true) %>% 
  mutate(Disease = fct_reorder(Disease,percentage_true)) %>%
  ggplot(aes(x=Disease,y=percentage_true,fill=percentage_true, 
              label=percentage_true)) +
  geom_col() + theme_minimal() + coord_flip() +
  geom_text(nudge_y = 3) + 
  ggtitle("Hastalıklara göre doğru sınıflama yüzdesi")


# Örnek 6.40: Xception Ağı 
xception_model <- application_xception(include_top = FALSE,
                                input_shape = c(width, height, nb_channels),
                                pooling='max', weights='imagenet')
#
freeze_weights(base_model) 

# Örnek 6.41a: Resnet50 ile görüntü sınıfı tahmini
# Paketleri yükle
if(!require(keras)){
   install.packages("devtools", repo="https://cloud.r-project.org");
   devtools::install_github("rstudio/keras");
   require(keras) }
require(magrittr)
#
# Görüntüyü seç ve yükle
img_path <- file.choose()
x <- image_load(img_path, target_size = c(224, 224))
x <- image_to_array(x)
dim(x)
# 4B tensör oluştur
x <- array_reshape(x, c(1, dim(x)))
dim(x)
# Görüntüye önişleme uygula
x <- imagenet_preprocess_input(x)


# Örnek 6.41b: Resnet50 ile görüntü sınıfı tahmini
# Modeli oluştur
vgg19_model <- application_vgg19(weights = 'imagenet')

summary(vgg19_model)
# Tahmin yap, dekodla ve göster
img_preds <- vgg19_model %>% predict(x)

imagenet_decode_predictions(img_preds, top=3)[[1]]

# Örnek 6.41c: Resnet50 ile görüntü özellik çıkarma
# Paketleri yükle
if(!require(keras)){
   install.packages("devtools", repo="https://cloud.r-project.org");
   devtools::install_github("rstudio/keras");
   require(keras) }
if(!require(magrittr)){
   install.packages("magrittr", repo="https://cloud.r-project.org");
   devtools::install_github("rstudio/keras");
   require(magrittr) }
#
# Görüntüyü seç ve yükle
img_path <- file.choose()
x <- image_load(img_path, target_size = c(224, 224))
x <- image_to_array(x)
dim(x)
# 4B tensör oluştur
x <- array_reshape(x, c(1, dim(x)))
dim(x)
# Görüntüye önişleme uygula
x <- imagenet_preprocess_input(x)

vgg19_model <- application_vgg19(include_top = FALSE, weights = 'imagenet')
summary(vgg19_model)
img_features <- vgg19_model %>% predict(x)

str(img_features)

# Örnek 6.42a: tfhub sınıflayıcısı kullanma
if(!require(keras)){
   install.packages("devtools", repo="https://cloud.r-project.org");
   devtools::install_github("rstudio/keras");
   require(keras) }

if(!require(tfhub)){
  install.packages("tfhub", repos="https://cloud.r-project.org");
  require(tfhub)
 }

# Örnek 6.42b: tfhub Python modülü
if(!require(tfhub)){
  install.packages("tfhub", repos="https://cloud.r-project.org");
  require(tfhub)
 }
install_tfhub()

# Örnek 6.42c: tfhub Python modülü
url <- "https://tfhub.dev/google/imagenet/resnet_v2_50/classification/5"
module_v2_50 <- hub_load(handle=url)


# Örnek 6.42d: tfhub Python modülü
input <- tf$random$uniform(shape = shape(1,224,224,3), minval = 0, maxval = 1)
output <- module_v2_50(input)
output

# Örnek 6.42e: Sınıflanacak görüntünün okunması ve tf ile işlenmesi
if(!require(pins)){
  install.packages("pins", repos="https://cloud.r-project.org");
  require(pins)
 }
#
img_url <- "https://live.staticflickr.com/1/436/20176688510_eeb4e688ca_z.jpg"
img <- pins::pin(img_url) %>%
   tensorflow::tf$io$read_file() %>% 
   tensorflow::tf$image$decode_image(dtype = tf$float32) 

img %>%  as.array() %>% as.raster() %>% plot()


# Örnek 6.42f: Sınıflayıcı modülünü çağırma
result <- img %>% 
   tf$expand_dims(0L) %>% 
   module_v2_50()

# Örnek 6.42g: Sınıf belirleme
predicted_class <- tf$argmax(result, axis = 1L) %>% as.integer()
predicted_class

# Örnek 6.42h: Sınıf belirleme
#
url <-"https://storage.googleapis.com/"
url <- paste0(url, "download.tensorflow.org/data/ImageNetLabels.txt")
imagenet_labels <- pins::pin(url, "imagenet_labels") %>% readLines()
img %>% as.array() %>% as.raster() %>% plot()
title(paste("Sınıf tahmini:" , imagenet_labels[predicted_class + 1]))

# Örnek 6.43a: layer_hub ile TF eğitilmiş modeli kullanma
if(!require(keras)){
   install.packages("devtools", repo="https://cloud.r-project.org");
   devtools::install_github("rstudio/keras");
   require(keras) }
if(!require(tfhub)){
  install.packages("tfhub", repos="https://cloud.r-project.org");
  require(tfhub)
 }
# 
url <- "https://tfhub.dev/google/imagenet/resnet_v2_50/classification/5" 
layer_resnet50v2 <- layer_hub(handle = url)

input <- layer_input(shape = c(224, 224, 3))
output <- layer_resnet50v2(input)
model_resnet50v2 <- keras_model(input, output)
summary(model_resnet50v2)

# Örnek 6.43b: ImageNet ile sınıflama
new_image <- image_load(file.choose(), 
              target_size = c(224,224)) %>% 
              image_to_array()
new_image <- new_image/255
dim(new_image) <- c(1, dim(new_image))
image_preds <- predict(model_resnet50v2, new_image)
imagenet_decode_predictions(image_preds[,-1, drop=FALSE])[[1]]


# Örnek 6.44a: VGG16 modelini başlatma
# Bağımlılık: Örnek 6.36a,b,c,f
img_width <- 224
img_height <- 224
target_size <- c(img_width, img_height)
#
vgg16_model <- application_vgg16(
   include_top = FALSE, weights="imagenet", 
   input_shape = c(img_width, img_height, 3)
 )


# Örnek 6.44b: Yeni ağ katmanları ekleme 1
# Ağları birleştir (composite ağ)
tomato_diseases_pv_model <- keras_model_sequential() %>%
   vgg16_model %>%
   layer_flatten()%>%
   layer_dense(units=128, activation="relu")%>%
   layer_dropout(0.5)%>%
   layer_dense(units=64, activation="relu")%>%
   layer_dense(units=class_number, activation="softmax") 


# Örnek 6.44b: Yeni ağ katmanları ekleme 2
predictions <- vgg16_model$output %>% 
   layer_flatten()%>%
   layer_dense(units=128, activation="relu")%>%
   layer_dropout(0.5)%>%
   layer_dense(units=64, activation="relu")%>%
   layer_dense(units=class_number, activation="softmax") 
# 
# Yeni modeli oluşturma
tomato_diseases_pv_model <- keras_model(
   input = vgg16_model$input, output = predictions)

# Örnek 6.44c: Modeli derle
tomato_diseases_pv_model %>% compile(
   loss = "categorical_crossentropy", 
   optimizer = optimizer_sgd(learning_rate=0.0001, momentum=0.9),
   metrics="accuracy"
 )

# Model yapısı 
summary(tomato_diseases_pv_model)

# Örnek 6.44d: Model ağırlıklarını dondurma 1
vgg16_model %>% freeze_weights


# Örnek 6.44e: Model ağırlıklarını dondurma 2
for(layer in vgg16_model$layers)
   layer$trainable <- FALSE

# Örnek 6.44f: Modeli derle
tomato_diseases_pv_model %>% compile(
   loss = "categorical_crossentropy", 
   optimizer = optimizer_sgd(learning_rate=0.0001, momentum=0.9),
   metrics="accuracy"
 )
#
summary(tomato_diseases_pv_model)


# Örnek 6.44g: Eğitim ve doğrulama verilerini hazırlama
train_datagen = image_data_generator(
  #  horizontal_flip = TRUE,
  #  fill_mode = "nearest",
  #  zoom_range = 0.3,
  #  width_shift_range = 0.3,
  #  height_shift_range=0.3,
  #  rotation_range=30
  rescale = 1./255
  )

validation_datagen = image_data_generator(
  #  horizontal_flip = TRUE,
  #  fill_mode = "nearest",
  #  zoom_range = 0.3,
  #  width_shift_range = 0.3,
  #  height_shift_range=0.3,
  #  rotation_range=30
  rescale = 1./255
  )

train_generator = flow_images_from_directory(
   directory = train_images_path,
   generator = train_datagen,
   target_size = c(img_height, img_width),
   batch_size = batch_size,
   class_mode = "categorical",
   classes = class_labels
 )

validation_generator = flow_images_from_directory(
   directory = validation_images_path,
   generator = validation_datagen,
   target_size = c(img_height, img_width),
   batch_size = batch_size,
   class_mode = "categorical",
   classes = class_labels
 )


# Örnek 6.44h: Geriye çağrılar (Callbacks)
checkpoints <- callback_model_checkpoint(
   "tomato_disease_vgg16_model_1.h5", monitor='val_acc', 
   save_best_only=TRUE, save_weights_only=FALSE, mode='auto', 
   save_freq=1, verbose=1)

earlystop <- EarlyStopping(monitor='val_acc', min_delta=0, 
                         patience=10, mode='auto', verbose=1)

tensboard <- TensorBoard(log_dir="/logs/log_vgg{}/".format(time.time()),
                         write_graph=TRUE, write_images=TRUE, histogram_freq = 0)


# Örnek 6.44i: Modelin eğitilmesi
history_tomato_diseases_pv_model <- tomato_diseases_pv_model %>%  
   fit(
       train_generator,
       samples_per_epoch = as.integer(number_train_images / batch_size),
       epochs = number_epochs,
       validation_data = validation_generator,
       validation_steps = as.integer(number_validation_images / batch_size),
       #callbacks = list(checkpoints, earlystop, tensboard),
       verbose = 2
   )

# En iyi evre sonuçlarını göster
b_epoch <- which.min(history_tomato_diseases_pv_model$metrics$val_loss)
b_loss <- history_tomato_diseases_pv_model$metrics$val_loss[b_epoch] %>%
   round(3)
b_acc<-history_tomato_diseases_pv_model$metrics$val_accuracy[b_epoch] %>% 
   round(3) 

cat(paste("Optimal kayıp:", b_loss, " En yüksek doğruluk:", b_acc))
plot(history_tomato_diseases_pv_model) 


# Örnek 6.44j: Modelin test edilmesi 
# Test verileri klasörü
base_path <- "D:/mldmbook/tomato"
setwd(base_path)
test_images_path <- paste0(base_path,"/tomato/test")
# Test verisi işleme
test_datagen <- image_data_generator(
   rescale = 1/255.
 )  
# Test görüntüleri
test_generator <- flow_images_from_directory(
   directory = test_images_path,
   generator = test_datagen,
   target_size = target_size,
   class_mode = "categorical",
   classes = class_labels,
   batch_size = batch_size,
   shuffle = FALSE)
#

tomato_diseases_pv_model %>%
  evaluate(test_generator, 
           steps = as.integer(test_generator$n))


# Örnek 6.44k: Tahmin işlemleri ve yanılgı matrisi
predictions <- tomato_diseases_pv_model %>% 
   predict(
        x = test_generator,
        steps = test_generator$n
    ) %>% as.data.frame

nbc <- length(test_generator$class_indices)
names(predictions) <- 0:nbc-1
predictions$predicted <- apply(predictions, 1, which.max)-1
predictions$actual <- test_generator$classes
confmat <- table(predictions$predicted, predictions$actual)
rownames(confmat)[1:nbc] <- names(test_generator$class_indices)
colnames(confmat)[1:nbc]  <- rownames(confmat)
confmat
write.table(predictions, 
           file="models/tomato_diseases_pv_model_not_frozen_predictions.txt")


# Örnek 6.44l: cvms paketiyle yanılgı matrisi
# Bağımlılık: Örnek 6.44k
if(!require(cvms)){
  install.packages("cvms", repos="https://cloud.r-project.org");
  require(cvms)}
#
confmat <- confusion_matrix(targets = predictions$actual,
                            predictions = predictions$predicted)
plot_confusion_matrix(confmat$`Confusion Matrix`[[1]],
                      palette = "Greens",
                      intensity_by = "counts",
                      add_normalized = FALSE,
                      add_row_percentages = FALSE,
                      add_col_percentages = TRUE,
                      font_counts = font(
                          color="black", size=5), 
                      font_col_percentages = font(
                          color="black", size=3, 
                          prefix="%", suffix=""),
                      theme_fn = ggplot2::theme_light) +
  ggplot2::labs(x = "Gerçek", y = "Tahmin")


# Örnek 6.44m: Bazı başarım ölçütlerinin hesaplanması
# Bağımlılık: Örnek 6.44k
confmat <- data.frame("Prediction" = predictions$predicted_class, 
                      "Actual" = predictions$true_class, stringsAsFactors=TRUE)

calcacc<- function(predictions, actuals) {
     return(length(which(predictions == actuals)) / length(actuals))
 }

calcwaccc <- function(predictions, actuals, weights) {
     lvls <- levels(actuals)
     if (length(weights) != length(lvls)) {
         stop("Ağırlık ve sınıf sayısı eşit olmalıdır")
     }
     if (sum(weights) != 1) {
         stop("Ağırlıklar toplamı 1 olmalıdır")
     }
     accs <- lapply(lvls, function(x) {
         idx <- which(actuals == x)
         return(calacc(predictions[idx], actuals[idx]))
     })
     acc <- mean(unlist(accs))
     return(acc)
 }

acc <- calacc(confmat$Prediction, confmat$Actual)
print(paste0("Doğruluk: ", round(acc, 2)))
weights <- rep(1 / length(levels(confmat$Actual)), 
                 length(levels(confmat$Actual)))
wacc <- calcwacc(confmat$Prediction, confmat$Actual, weights)
print(paste0("Ağırlıklı doğruluk: ", round(wacc, 2)))

confmetrics <- function(confmat) {
     out <- vector("list", length(confmat))
     for (i in seq_along(confmat)) {
         x <- confmat[[i]]
         tp <- x$table[x$positive, x$positive] 
         fp <- sum(x$table[x$positive, colnames(x$table) != x$positive])
         fn <- sum(x$table[colnames(x$table) != x$positie, x$positive])
         elem <- c(tp = tp, fp = fp, fn = fn)
         out[[i]] <- elem
     }
     df <- do.call(rbind, out)
     rownames(df) <- unlist(lapply(cm, function(x) x$positive))
     return(as.data.frame(df))
 }

calcmicrof1 <- function(confmat) {
     cm <- confmetrics(confmat)
     tp <- sum(cm$tp)
     fn <- sum(cm$fn)
     fp <- sum(cm$fp)
     pr <- tp / (tp + fp)
     re <- tp / (tp + fn)
     f1 <- 2 * ((pr * re) / (pr + re))
     return(f1)
 }
microf1 <- get.micro.f1(confmat)
print(paste0("Micro F1: ", round(microf1, 2)))


# Örnek 6.44n: Eğitilen modelin kaydedilmesi
tomato_diseases_pv_model %>% 
   save_model_tf("models/tomato_diseases_pv_vgg16_not_frozen_weights")
tomato_diseases_pv_model %>% 
   save_model_hdf5("models/tomato_diseases_pv_vgg16_not_frozen_weights.h5")

# Örnek 6.44o: Kaydedilen model ile yeni verinin tahmin edilmesi
tomato_diseases_pv_model <- 
  load_model_hdf5("models/tomato_diseases_pv_vgg16_not_frozen_weights.h5")
test_image <- image_load("D:/mldmbook/test_images/Leaf_Mold_1.jpg"),
  target_size = target_size)
ximage <- image_to_array(test_image)
ximage<- array_reshape(ximage, c(1, dim(ximage)))
ximage <- ximage/255.
prediction <- tomato_diseases_pv_model %>% predict(ximage)
prediction <- data.frame("Hastalıklar" = class_labels, 
                         "Olasılık" = t(prediction))
prediction <- prediction[order(prediction$Olasılık, decreasing=TRUE),][1:5,]
prediction$Olasılık <- paste("%", round(100*prediction$Olasılık, 2))
prediction


# Örnek 6.45: Görüntünün okunması ve işlenmesi
if(!require(keras)){
   install.packages("devtools", repo="https://cloud.r-project.org");
   devtools::install_github("rstudio/keras");
   require(keras) }

img_path <- "D:/mldmbook/test_images/leaf_mold_1.jpg"
img <- image_load(img_path, target_size = c(256, 256)) 
# Görüntüyü 4B tensora dönüştürme
imgtensor <- image_to_array(img)
imgtensor <- array_reshape(imgtensor, c(1, 256, 256, 3))
imgtensor <- imgtensor / 255 
dim(imgtensor)
plot(as.raster(imgtensor[1,,,]))


# Örnek 6.46: Modelin yüklenmesi
base_path <- "D:/mldmbook/models/"
model <- load_model_tf(paste0(base_path, 
                     "tomato_diseases_model_epoch_15_1"))
model


# Örnek 6.47: Görüntünün okunması ve işlenmesi
# Bağımlılık: Örnek 6.45, 6.46
layer_outputs <- lapply(model$layers[1:11], function(layer) layer$output)
activation_model <- keras_model(inputs=model$input, outputs=layer_outputs)
activations <- activation_model %>% predict(imgtensor)
slayer_activation <- activations[[1]]
dim(slayer_activation)

# Kod 6.2: Aktivasyon çıktısını görüntüleme
display_activation <- function(channel) {
   rotate <- function(x) t(apply(x, 2, rev))
   image(rotate(channel), axes = FALSE, asp = 1,
         col = terrain.colors(10))
 }


# Örnek 6.48: Aktivasyon çıktısını görüntüleme
# Bağımlılık: Kod 6.2; Örnek 6.47
opar <- par(mfrow=c(2,2), mar=c(2,1,1,1))
plot(as.raster(imgtensor[1,,,]))
display_activation(slayer_activation[1,,,1])
display_activation(slayer_activation[1,,,5])
display_activation(slayer_activation[1,,,30])
par(opar)


# Örnek 6.49: Aktivasyon çıktılarını görüntü dosyasına kaydetme
# Bağımlılık: Örnek 6.46
outdir <- "D:/mldmbook/graphics/"
dir.create(outdir)
image_size <- 64
images_per_row <- 16
for (i in 1:5) {
   layer_activation <- activations[[i]]
   layer_name <- model$layers[[i]]$name
   n_features <- dim(layer_activation)[[4]]
   n_cols <- n_features / images_per_row
   png(paste0(outdir, i, "_", layer_name, ".png"), 
          width = image_size * images_per_row, 
          height = image_size * n_cols)
   op <- par(mfrow = c(n_cols, images_per_row), mai = rep_len(0.02, 4))
   for (col in 0:(n_cols-1)) {
       for (row in 0:(images_per_row-1)) {
           channel_image <- layer_activation[1,,,(col*images_per_row) + row + 1]
           display_activation(channel_image)
         }
    }
   par(op)
   dev.off()
  }


# Örnek 6.50: Süper piksellerin görüntülenmesi
if(!require(lime)){
   install.packages("lime", repo="https://cloud.r-project.org");
   require(lime) }
img_path <- "D:/mldmbook/test_images/leaf_mold_1.jpg"
plot_superpixels(img_path)



# Örnek 6.51: lime açıklayıcı nesnesi
base_path <- "D:/mldmbook/models/"
tomato_model <- load_model_tf(paste0(base_path, 
                     "tomato_diseases_model_epoch_15_1"))

class_labels = c("Bacterial_spot", "Early_blight", "Healthy",
                 "Late_blight" ,"Leaf_mold", "Mosaic_virus", "Septoria_leaf_spot", 
                 "Target_spot", "Yellow_leaf_curl_virus")
explainer <- lime::lime(img, 
                      as_classifier(tomato_model, class_labels), imgprocess)

# Örnek 6.52: Açıklama işlemi
explanation <- explain(
   img, 
   explainer,
   n_labels = 9,
   n_features = 5,
   n_permutations = 1000,
   feature_select ='auto',
   n_superpixels = 50,
   weight = 20,
   n_iter = 10,
   p_remove = 0.5,
   background = "white"
  )

# Örnek 6.53: Açıklamayı görüntüleme
plot_image_explanation(explanation)


# Örnek 6.54: Açıklamayı öbeksel görüntüleme 
plot_image_explanation(explanation, display = 'block')

#Örnek 6.55: app.R dosyası 1
require(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)


# Örnek 6.56: app.R dosyası 2
library(shiny)
library(shinydashboard)

ui <- dashboardPage(
  dashboardHeader(),
  dashboardSidebar(),
  dashboardBody()
)

server <- function(input, output) 
{
  …
}
shinyApp(ui, server)

# Örnek 6.57: app.R dosyası 
library(keras)
library(shiny)
library(shinydashboard)
apps_path <- "D:/mldmbook/shinyapps"
setwd(paste0(apps_path,"/apples"))
# Shiny app.R'da olması gereken kısım
apple_model <- load_model_tf("apple_model_epoch_25_1")
load("apple_names.RData")
target_size <- c(160, 160)
options(scipen=999) #Üslü sayı gösterimini önle


# Örnek 6.58: Kullanıcı arabirimi (ui.R)
ui <- dashboardPage(skin="red",
# Uygulama başlığı
          dashboardHeader(title=tags$h1("Elma Çeşitleri",
                style="font-size: 100%; font-weight: bold; 
                      font-family: 'Garamond', color:white"),
                titleWidth = 350,
                tags$li(class = "dropdown"),
                dropdownMenu(type = "notifications", 
                      icon = icon("question-circle", "fa-1x"), 
                      badgeStatus = NULL,
                      headerText="App",
                      tags$li(a(href = "https://avesis.cu.edu.tr/zcebeci/",
                              target = "_blank",
                              tagAppendAttributes(icon("icon-circle"), class = "info"),
                              "Adapted by ZC"))
                      )),
          # Gezinti bölmesi
          dashboardSidebar(
                width=350,
                tags$br(),
                tags$p("Fotoğraf yükle ve tanı"),
                fileInput("input_image","Dosya seç", accept = c('.jpg','.jpeg')) 
                ),
          # Görüntü penceresi
          dashboardBody(
                tags$h4("Uygulama:"),
                tags$p("Bu uygulama Gala ve Red Delicious elma çeşitlerini tanımak için 
                        geliştirilmiş bir CNN modeli kullanır."),
                tags$p("Shiny App uygulaması için test amaçlı olarak oluşturulmuştur."),
                tags$hr(),
                tags$br(),tags$p("1. Elma fotoğrafı çek"),
                tags$p("2. Elmayı belirgin hale getirmek için kırp"),
                tags$p("3. Fotoğrafı soldaki kutudan Browse ile seçip yükle"),
                tags$br(),
                fluidRow(
                      column(h3("Yüklenen Fotoğraf:"),imageOutput("output_image"), width=4),
                      column(h3("TAHMİN SONUÇLARI"),tags$br(),textOutput("warntext",), 
                      tags$br(), tags$p("Tahmin Tablosu"),tableOutput("text"),width=6)
                      ),tags$br()
                ))


# Örnek 6.59: Kullanıcı arabiriminin görüntülenmesi
print(ui)

# Örnek 6.60: Sunucu nesnesi (server.R dosyası içeriği)
server <- function(input, output) {
    image <- reactive({image_load(input$input_image$datapath, 
                        grayscale=T, target_size = target_size[1:2])})
    prediction <- reactive({
      if(is.null(input$input_image)){return(NULL)}
      x <- image_to_array(image())
      x <- array_reshape(x, c(1, dim(x)))
      x <- x/255
      pred <- apple_model %>% predict(x)
      pred <- data.frame("Elma" = apple_names, "Tahmin" = t(pred))
      pred <- pred[order(pred$Tahmin, decreasing=T),][1:2,]
      pred$Tahmin <- sprintf("%.2f %%", 100*pred$Tahmin)
      pred
    })
    
    output$text <- renderTable({
      prediction()
      })
    
    output$warntext <- renderText({
      req(input$input_image)   
      if(as.numeric(substr(prediction()[1,2],1,2)) >= 50){return(NULL)}
      if(as.numeric(substr(prediction()[1,2],1,3)) == 100){return(NULL)}
      warntext <- "Bu tanıdık bir elma çeşidi değil!"
      warntext
    })
    
    output$output_image <- renderImage({
      req(input$input_image)  
      outfile <- input$input_image$datapath
      contentType <- input$input_image$type
      list(src = outfile,
           contentType=contentType,
           width = 400)
      }, deleteFile = TRUE)
    }

# Örnek 6.61: Uygulamayı oluştur
shinyApp(ui, server)


# Örnek 6.62: Shiny sunucusuna bağlanma 
if(!require(rsconnect)) {
   install.packages('rsconnect', repo='https://cloud.r-project.org')
   require(rsconnect)
 }

rsconnect::setAccountInfo(
   name='yapayzeka',
   token='D98488FE355515FF479A4AB4C17FB385',
   secret='<SECRET>'
 )


# Örnek 6.63: Uygulamayı sunucuya yükleme
rsconnect::deployApp(getwd())


# Örnek 6.64: Uygulamayı kullanma
https://yapayzeka.shinyapps.io/apples/
  
# Örnek 6.65: Uygulamayı sunucudan kaldırma
terminateApp("apples")






